<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>mydcwfy&#39;s Blog</title>
  
  
  <link href="https://mydcwfy.github.io/atom.xml" rel="self"/>
  
  <link href="https://mydcwfy.github.io/"/>
  <updated>2021-12-26T04:04:17.573Z</updated>
  <id>https://mydcwfy.github.io/</id>
  
  <author>
    <name>mydcwfy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>P4897</title>
    <link href="https://mydcwfy.github.io/2021/12/26/P4897/"/>
    <id>https://mydcwfy.github.io/2021/12/26/P4897/</id>
    <published>2021-12-26T04:03:28.000Z</published>
    <updated>2021-12-26T04:04:17.573Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="看大家都是倍增，我换一个简单点的方法吧"><a href="#看大家都是倍增，我换一个简单点的方法吧" class="headerlink" title="看大家都是倍增，我换一个简单点的方法吧"></a>看大家都是倍增，我换一个简单点的方法吧</h3><p><del>一开始还以为是最小割的模板呢</del></p><h2 id="1-题意"><a href="#1-题意" class="headerlink" title="1.题意"></a>1.题意</h2><p><a href="http://luogu.org/problem/P4897">题目传送门</a></p><ol><li>每次询问$u$到$v$的最小割。</li><li>有$Q$个询问，点数、边数分别为$n$、$m$。</li><li>$Q \leq 10^5,n \leq 500,m \leq 1500$。</li></ol><h2 id="2-知识储备"><a href="#2-知识储备" class="headerlink" title="2.知识储备"></a>2.知识储备</h2><p>网络流 + 最大流</p><p>最大流最小割定理</p><p>不会请移步<br><a href="">我的博客</a> 或者百度</p><h2 id="3-最小割树"><a href="#3-最小割树" class="headerlink" title="3.最小割树"></a>3.最小割树</h2><p>很明显，不可能每次求最小割（复杂度为 $O(Qn^2m)$）。</p><p>我们将一个网络流的图转化为一棵树，其中原图 $u$ 到 $v$ 的最小割即为转化到树上。</p><p>树的一个性质是：删除一条边，树变得不连通。</p><p>那么，我们可以任意选 2 个点 $s$ 与 $t$，跑最小割（即最大流），然后再连一条从 $s$ 到 $t$ 的边。</p><p>又 Dinic 算法最后一次 bfs 相当于求一个最小割，原图就被分为了两部分。</p><p>最后分治就可以了，复杂度为 $O(n^3m)$（Dinic 跑不满的，所以不会超时）。</p><p>按这样建出的树，就是一棵无根树。</p><p>我们可以发现一个有趣的性质：$u$ 到 $v$ 的最小割就是树上从 $u$ 到 $v$ 的所有路径长的最小值。</p><p>可以感性地理解一下（ <del>主要是太菜不会证</del> ）：最小割即为最小的路径长，把 $u$ 到 $v$ 的任意一条路径切断，都是割。</p><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>每次跑 Dinic 时，都要对全图进行，否则就不是最大流<br>（$u$ 到 $v$ 的最大流就是针对全局的）。</p><p>Code：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//node存放要处理的节点，l与r分别是左右端点</span></span><br><span class="line"><span class="keyword">if</span> (l==r) <span class="keyword">return</span> ;</span><br><span class="line">S=node[l],T=node[l+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> t=<span class="built_in">dinic</span>();</span><br><span class="line">ans[T][S]=ans[S][T]=t;<span class="comment">//or add(S,T,t),add(T,S,t)</span></span><br><span class="line"><span class="keyword">int</span> cnt1=<span class="number">0</span>,cnt2=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=l;i&lt;=r;++i)</span><br><span class="line"><span class="keyword">if</span> (d[node[i]]) tmp1[++cnt1]=node[i];</span><br><span class="line"><span class="keyword">else</span> tmp2[++cnt2]=node[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt1;++i) node[i+l<span class="number">-1</span>]=tmp1[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt2;++i) node[cnt1+l+i<span class="number">-1</span>]=tmp2[i];</span><br><span class="line"><span class="built_in">work</span>(l,l+cnt1<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">work</span>(l+cnt1,r);</span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-处理询问"><a href="#4-处理询问" class="headerlink" title="4.处理询问"></a>4.处理询问</h2><p>由于询问数很多（ $Q \leq 10^5$ ），很多 dalao 选择了树上倍增的做法，复杂度为 $O(Q \log n)$。</p><p>鉴于本人对倍增不太熟练，我换了一种方式。</p><p>观察题目数据范围，发现 $n$ 较小，而 $Q$ 较大，所以使用预处理的方式，先将答案处理好。</p><p>复杂度为 $O(n^2)$。</p><p>我们甚至不用建树（心中有“树”即可），在每一个 work(l,r) 函数中直接统计从 $s$ 所在集合 $S$ 到 $t$ 所在集合 $T$ 的答案。</p><p>当前 $S$ 与 $T$ 集合的连接只有 $s$ 与 $t$（其他的都在集合内部）。</p><p>则 $\forall u \in S,v \in T$，都有：<br>$$ans(u,v)=\min (ans(u,s),ans(s,t),ans(t,v))$$</p><p>同时，由于正向与反向都相同，所以不要忘记处理反向。</p><p>最后每个询问，输出答案即可。</p><p>代码实现时，注意以下几个细节：</p><ol><li><p>每一次最大流时，都要先恢复开始的网络流（即退流）。</p></li><li><p>插入网络流的边时，要双向插入（题目没有指明哪个是起点）。</p></li><li><p>下标从 0 开始到 $n$。</p></li><li><p>每一次最大流时，先保存源点和汇点，防止被覆盖（如果 $s$ 与 $t$ 使用全局变量）（ <del>卡了一个多小时我才发现</del> ）。</p></li></ol><p>其余细节看代码吧。</p><p>Code：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">505</span>,M=<span class="number">6005</span>,INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="comment">//M要开4倍，因为正反各要2条边</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> h[N],e[M],ne[M],w[M],idx;</span><br><span class="line"><span class="keyword">int</span> cur[N],q[N],d[N],S,T,n,m;</span><br><span class="line"><span class="keyword">int</span> node[N],ans[N][N],tmp1[N],tmp2[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[idx]=b,ne[idx]=h[a],w[idx]=c,h[a]=idx++;</span><br><span class="line">e[idx]=a,ne[idx]=h[b],w[idx]=<span class="number">0</span>,h[b]=idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line"><span class="keyword">int</span> hh=<span class="number">1</span>,tt=<span class="number">1</span>;</span><br><span class="line">q[<span class="number">1</span>]=S;cur[S]=h[S];d[S]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (hh&lt;=tt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x=q[hh++];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=h[x];~i;i=ne[i])</span><br><span class="line"><span class="keyword">if</span> (!d[e[i]]&amp;&amp;w[i])</span><br><span class="line">&#123;</span><br><span class="line">d[e[i]]=d[x]+<span class="number">1</span>;</span><br><span class="line">cur[e[i]]=h[e[i]];</span><br><span class="line"><span class="keyword">if</span> (e[i]==T) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">q[++tt]=e[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findflow</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> limit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x==T) <span class="keyword">return</span> limit;</span><br><span class="line"><span class="keyword">int</span> flow=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=cur[x];~i&amp;&amp;flow&lt;limit;i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line">cur[x]=i;</span><br><span class="line"><span class="keyword">if</span> (d[e[i]]==d[x]+<span class="number">1</span>&amp;&amp;w[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> t=<span class="built_in">findflow</span>(e[i],<span class="built_in">min</span>(w[i],limit-flow));</span><br><span class="line"><span class="keyword">if</span> (!t) d[e[i]]=<span class="number">-1</span>;</span><br><span class="line">w[i]-=t,w[i^<span class="number">1</span>]+=t,flow+=t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;idx;i+=<span class="number">2</span>)</span><br><span class="line">w[i]=(w[i]+w[i^<span class="number">1</span>]),w[i^<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="comment">//注意退流的方式</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line"><span class="keyword">int</span> r=<span class="number">0</span>,flow;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">bfs</span>()) <span class="keyword">while</span> (flow=<span class="built_in">findflow</span>(S,INF)) r+=flow;</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;<span class="comment">//Dinic模板</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l==r) <span class="keyword">return</span> ;</span><br><span class="line">S=node[l],T=node[l+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> t=<span class="built_in">dinic</span>(),s=node[l],tt=node[l+<span class="number">1</span>];<span class="comment">//将源汇点存下来</span></span><br><span class="line">ans[T][S]=ans[S][T]=t;</span><br><span class="line"><span class="keyword">int</span> cnt1=<span class="number">0</span>,cnt2=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=l;i&lt;=r;++i)</span><br><span class="line"><span class="keyword">if</span> (d[node[i]]) tmp1[++cnt1]=node[i];</span><br><span class="line"><span class="keyword">else</span> tmp2[++cnt2]=node[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt1;++i) node[i+l<span class="number">-1</span>]=tmp1[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt2;++i) node[cnt1+l+i<span class="number">-1</span>]=tmp2[i];</span><br><span class="line"><span class="built_in">work</span>(l,l+cnt1<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">work</span>(l+cnt1,r);<span class="comment">//分治</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt1;++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt2;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> ii=node[i+l<span class="number">-1</span>],jj=node[j+cnt1+l<span class="number">-1</span>];</span><br><span class="line">ans[jj][ii]=ans[ii][jj]=<span class="built_in">min</span>(<span class="built_in">min</span>(ans[ii][s],ans[s][tt]),ans[tt][jj]);</span><br><span class="line">&#125;<span class="comment">//每个点都要处理</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line"><span class="built_in">memset</span>(ans,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> ans);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">int</span> x,y,z;</span><br><span class="line"><span class="keyword">while</span> (m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line"><span class="built_in">add</span>(x,y,z);<span class="built_in">add</span>(y,x,z);<span class="comment">//双向边</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;++i) node[i]=i;</span><br><span class="line"><span class="built_in">work</span>(<span class="number">0</span>,n);<span class="comment">//下标从0开始</span></span><br><span class="line"><span class="keyword">int</span> que;cin&gt;&gt;que;</span><br><span class="line"><span class="keyword">while</span> (que--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[x][y]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h3 id=&quot;看大家都是倍增，我换一个简单点的方法吧&quot;&gt;&lt;a href=&quot;#看大家都是倍增，我换一个简单点的方法吧&quot; class=&quot;headerlink&quot; title=&quot;看大家都是倍增，我换一个简单点的方法吧&quot;&gt;&lt;/a&gt;看大家都</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>网络流</title>
    <link href="https://mydcwfy.github.io/2021/12/26/Network-flow/"/>
    <id>https://mydcwfy.github.io/2021/12/26/Network-flow/</id>
    <published>2021-12-26T03:56:23.000Z</published>
    <updated>2021-12-26T03:57:54.050Z</updated>
    
    <content type="html"><![CDATA[<p><strong>update: 2021-4-12 9:58 增加最小割的内容</strong></p><span id="more"></span><p><del>从我P5192的题解摘过来的</del></p><h2 id="1-网络流"><a href="#1-网络流" class="headerlink" title="1. 网络流"></a>1. 网络流</h2><p>通俗的讲，网络流就是一个水系，有源点（水库， S ）和汇点（大海， T ），中间有很多节点，中间的节点不储存流，作为一个中转站。</p><p>每一条边有一个容量（河道宽度），也有一个流量。显然流量小于等于容量。</p><p>如图是一张网络流。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/qfa0af16.png?x-oss-process=image/resize,m_lfit,h_170,w_225" alt="一张网络图"></p><p>已经有流量的图被称为残留网络。</p><p>注意：残留网络中，有反向边，而一般认为原图中没有反向边。<br>反向边的容量是正向边的流量。</p><p>（可以这么认为，反向边是用来退回正向边的流量，而最多就退回原来流过的量）</p><p>刚才那张图的残留网络是如下：</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/135e9u9d.png?x-oss-process=image/resize,m_lfit,h_170,w_225" alt="残留网络"></p><p>增广路：沿着容量大于0的边，从 S 到达 T 的路径，</p><p>（这么多已经足够，详细解释请见百度 <del>逃</del> ）</p><h2 id="2-最大流"><a href="#2-最大流" class="headerlink" title="2. 最大流"></a>2. 最大流</h2><p>我们现在想要求从源点到汇点能流的最大值。</p><p>显然，上面的那张图不是最大流。</p><p>最大流应该是这样。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/s9ngtdta.png?x-oss-process=image/resize,m_lfit,h_170,w_225" alt="最大流"></p><h2 id="3-Edmonds-Karp-与-Dinic-——求最大流的算法"><a href="#3-Edmonds-Karp-与-Dinic-——求最大流的算法" class="headerlink" title="3. Edmonds-Karp 与 Dinic ——求最大流的算法"></a>3. Edmonds-Karp 与 Dinic ——求最大流的算法</h2><p>Edmonds-Karp 的主要思路是每次寻找一条增广路。</p><p>原理可以理解为搜索，直到流不过去为止。</p><p>一般能处理$10^3至$10^4的网络规模</p><p>Code：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span><span class="comment">// 广搜</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i) vis[i]=<span class="number">0</span>;</span><br><span class="line">d[S]=<span class="number">1e8</span>;</span><br><span class="line"><span class="keyword">while</span> (q.<span class="built_in">size</span>()) q.<span class="built_in">pop</span>();</span><br><span class="line">vis[S]=<span class="number">1</span>;</span><br><span class="line">q.<span class="built_in">push</span>(S);</span><br><span class="line"><span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x=q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=h[x];i!=<span class="number">-1</span>;i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (vis[e[i]]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (w[i]!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">vis[e[i]]=<span class="number">1</span>;</span><br><span class="line">d[e[i]]=<span class="built_in">min</span>(d[x],w[i]);</span><br><span class="line">pre[e[i]]=i;<span class="comment">//记录前驱</span></span><br><span class="line"><span class="keyword">if</span> (e[i]==T) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">q.<span class="built_in">push</span>(e[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Edmonds_Karp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> r=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">bfs</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> f=d[T];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=T;i!=S;i=e[pre[i]^<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">w[pre[i]]-=f;</span><br><span class="line">w[pre[i]^<span class="number">1</span>]+=f;<span class="comment">//反向边加上对应流量</span></span><br><span class="line">&#125;</span><br><span class="line">r+=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dinic 是 EK 的优化，主要思想是建立分层图，一次找多个增广路</p><p>一般能处理$10^4$至$10^5$的网络规模</p><p>Code：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">queue &lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(d,<span class="number">-1</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>()) q.<span class="built_in">pop</span>();</span><br><span class="line">    q.<span class="built_in">push</span>(S);</span><br><span class="line">    d[S]=<span class="number">0</span>;cur[S]=h[S];<span class="comment">//cur 是指当前到的出边</span></span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t=q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=h[t];i!=<span class="number">-1</span>;i=ne[i])</span><br><span class="line">        &#123;</span><br><span class="line"><span class="keyword">if</span> (d[e[i]]==<span class="number">-1</span>&amp;&amp;w[i])</span><br><span class="line">&#123;</span><br><span class="line">d[e[i]]=d[t]+<span class="number">1</span>;</span><br><span class="line">cur[e[i]]=h[e[i]];</span><br><span class="line"><span class="keyword">if</span> (e[i]==T) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">q.<span class="built_in">push</span>(e[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> lim)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u==T) <span class="keyword">return</span> lim;</span><br><span class="line">    <span class="keyword">int</span> flow=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=cur[u];i!=<span class="number">-1</span>&amp;&amp;flow&lt;lim;i=ne[i])</span><br><span class="line">    &#123;<span class="comment">//没有剩余流量就直接退出</span></span><br><span class="line">        cur[u]=i;<span class="comment">// 当前弧优化，下一次从这一条边出发</span></span><br><span class="line">        <span class="keyword">if</span> (d[e[i]]==d[u]+<span class="number">1</span>&amp;&amp;w[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> t=<span class="built_in">find</span>(e[i],<span class="built_in">min</span>(w[i],lim-flow));</span><br><span class="line">            <span class="keyword">if</span> (t!=<span class="number">0</span>) d[e[i]]=<span class="number">-1</span>;</span><br><span class="line">            <span class="comment">// 没有路径，就不再访问，赋值为-1</span></span><br><span class="line">            w[i]-=t,w[i^<span class="number">1</span>]+=t,flow+=t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r=<span class="number">0</span>,flow=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">bfs</span>())</span><br><span class="line">        <span class="keyword">while</span> (flow=<span class="built_in">find</span>(S,INF)) r+=flow;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-最小割"><a href="#4-最小割" class="headerlink" title="4. 最小割"></a>4. 最小割</h2><h3 id="1）-定义"><a href="#1）-定义" class="headerlink" title="1） 定义"></a>1） 定义</h3><p>如果沿着剩余容量大于0的边，无法从 s 到 t，那么这个残余网络就被称为割。</p><p>令 s 能搜到的点集合为 S，其余点的集合为 T。</p><p>割的容量定义为<br>$$c=\sum_ {u\in S,v \in T}{c(u,v)}$$</p><p>割的流量定义为<br>$$flow=\sum_ {u\in S,v\in T}{f(u,v)}-<br>\sum_ {u\in T,v\in S}{f(u,v)}$$</p><p>最小割是指容量最小的割。</p><h3 id="2）-最大流最小割定理"><a href="#2）-最大流最小割定理" class="headerlink" title="2） 最大流最小割定理"></a>2） 最大流最小割定理</h3><p>当下面条件满足之一时，均满足：</p><ol><li><p>f 是最大流</p></li><li><p>不存在从 s 到 t 的路径（沿着剩余容量大于0的边）</p></li><li><p>存在一个割，使 $c(S,T)=f(s,t)$</p></li></ol><h4 id="证明："><a href="#证明：" class="headerlink" title="证明："></a>证明：</h4><p>我们只要证出有1能得到2，有2能得到3，有3能得到1，原命题成立</p><h4 id="a-1推2"><a href="#a-1推2" class="headerlink" title="a.1推2"></a>a.1推2</h4><p>显然，如果2不满足的话，1一定不满足</p><p>他的逆否命题也成立（即原命题）</p><h4 id="b-2推3"><a href="#b-2推3" class="headerlink" title="b.2推3"></a>b.2推3</h4><p>将 s 能到的点作为一个集合，剩余的作为另一个集合</p><p>很明显，现在 S 与 T 的连接一定都是满流，且反向边容量为0</p><p>如果感觉有点绕的话，看一下上面的最大流图理解一下</p><h4 id="c-3推1"><a href="#c-3推1" class="headerlink" title="c.3推1"></a>c.3推1</h4><p>首先，任意一个割，都大于等于最大流。</p><p>其次，满足 3 的割，一定大于等于最小割（<del>废话</del>）。</p><p>然后，满足 3 的流，一定小于等于最大流。</p><p>我们可以得到：$c(S,T) \geq cmin \geq fmax \geq f(s,t)$</p><p>又 $c(S,T)=f(s,t)$</p><p>所以4项都相等。</p><h4 id="证毕。"><a href="#证毕。" class="headerlink" title="证毕。"></a>证毕。</h4><hr><h3 id="你已经掌握了最简单的网络流，切切网络流24题吧！"><a href="#你已经掌握了最简单的网络流，切切网络流24题吧！" class="headerlink" title="你已经掌握了最简单的网络流，切切网络流24题吧！"></a>你已经掌握了最简单的网络流，切切网络流24题吧！</h3><hr><p><del>小心被切</del></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;update: 2021-4-12 9:58 增加最小割的内容&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="网络流" scheme="https://mydcwfy.github.io/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>P5192</title>
    <link href="https://mydcwfy.github.io/2021/12/26/P5192/"/>
    <id>https://mydcwfy.github.io/2021/12/26/P5192/</id>
    <published>2021-12-26T03:55:23.000Z</published>
    <updated>2021-12-26T04:02:07.188Z</updated>
    
    <content type="html"><![CDATA[<p>同步发表于 P5192 题解。</p><span id="more"></span><h2 id="1-知识储备"><a href="#1-知识储备" class="headerlink" title="1.  知识储备"></a>1.  知识储备</h2><p>网络流 + 最大流。</p><p>（如果各位 dalao 已经滚瓜烂熟，请跳过）。</p><h4 id="1-网络流"><a href="#1-网络流" class="headerlink" title="1. 网络流"></a>1. 网络流</h4><p>通俗的讲，网络流就是一个水系，有源点（水库， S ）和汇点（大海， T ），中间有很多节点，中间的节点不储存流，作为一个中转站。</p><p>每一条边有一个容量（河道宽度），也有一个流量。显然流量小于等于容量。</p><p>如图是一张网络流。</p><img src="/2021/12/26/P5192/%E4%B8%80%E5%BC%A0%E5%9B%BE.png" class="" title="一张网络图"><p>已经有流量的图被称为残留网络。</p><p>注意：残留网络中，有反向边，而一般认为原图中没有反向边。<br>反向边的容量是正向边的流量。</p><p>（可以这么认为，反向边是用来退回正向边的流量，而最多就退回原来流过的量）</p><p>刚才那张图的残留网络是如下：</p><img src="/2021/12/26/P5192/%E6%AE%8B%E7%95%99%E7%BD%91%E7%BB%9C.png" class=""><p>增广路：沿着容量大于0的边，从 S 到达 T 的路径，</p><p>（这么多已经足够，详细解释请见百度 <del>逃</del> ）</p><h4 id="2-最大流"><a href="#2-最大流" class="headerlink" title="2. 最大流"></a>2. 最大流</h4><p>我们现在想要求从源点到汇点能流的最大值。</p><p>显然，上面的那张图不是最大流。</p><p>最大流应该是这样。</p><img src="/2021/12/26/P5192/%E6%9C%80%E5%A4%A7%E6%B5%81.png" class=""><h4 id="3-Edmonds-Karp-与-Dinic-——求最大流的算法"><a href="#3-Edmonds-Karp-与-Dinic-——求最大流的算法" class="headerlink" title="3. Edmonds-Karp 与 Dinic ——求最大流的算法"></a>3. Edmonds-Karp 与 Dinic ——求最大流的算法</h4><p>Edmonds-Karp 的主要思路是每次寻找一条增广路。</p><p>原理可以理解为搜索，直到流不过去为止。</p><p>Code：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span><span class="comment">// 广搜</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i) vis[i]=<span class="number">0</span>;</span><br><span class="line">d[S]=<span class="number">1e8</span>;</span><br><span class="line"><span class="keyword">while</span> (q.<span class="built_in">size</span>()) q.<span class="built_in">pop</span>();</span><br><span class="line">vis[S]=<span class="number">1</span>;</span><br><span class="line">q.<span class="built_in">push</span>(S);</span><br><span class="line"><span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x=q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=h[x];i!=<span class="number">-1</span>;i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (vis[e[i]]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (w[i]!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">vis[e[i]]=<span class="number">1</span>;</span><br><span class="line">d[e[i]]=<span class="built_in">min</span>(d[x],w[i]);</span><br><span class="line">pre[e[i]]=i;<span class="comment">//记录前驱</span></span><br><span class="line"><span class="keyword">if</span> (e[i]==T) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">q.<span class="built_in">push</span>(e[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Edmonds_Karp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> r=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">bfs</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> f=d[T];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=T;i!=S;i=e[pre[i]^<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">w[pre[i]]-=f;</span><br><span class="line">w[pre[i]^<span class="number">1</span>]+=f;<span class="comment">//反向边加上对应流量</span></span><br><span class="line">&#125;</span><br><span class="line">r+=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dinic 是 EK 的优化，主要思想是建立分层图，一次找多个增广路</p><p>Code：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">queue &lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(d,<span class="number">-1</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>()) q.<span class="built_in">pop</span>();</span><br><span class="line">    q.<span class="built_in">push</span>(S);</span><br><span class="line">    d[S]=<span class="number">0</span>;cur[S]=h[S];<span class="comment">//cur 是指当前到的出边</span></span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t=q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=h[t];i!=<span class="number">-1</span>;i=ne[i])</span><br><span class="line">        &#123;</span><br><span class="line"><span class="keyword">if</span> (d[e[i]]==<span class="number">-1</span>&amp;&amp;w[i])</span><br><span class="line">&#123;</span><br><span class="line">d[e[i]]=d[t]+<span class="number">1</span>;</span><br><span class="line">cur[e[i]]=h[e[i]];</span><br><span class="line"><span class="keyword">if</span> (e[i]==T) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">q.<span class="built_in">push</span>(e[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> lim)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u==T) <span class="keyword">return</span> lim;</span><br><span class="line">    <span class="keyword">int</span> flow=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=cur[u];i!=<span class="number">-1</span>&amp;&amp;flow&lt;lim;i=ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        cur[u]=i;<span class="comment">// 当前弧优化，下一次从这一条边出发</span></span><br><span class="line">        <span class="keyword">if</span> (d[e[i]]==d[u]+<span class="number">1</span>&amp;&amp;w[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> t=<span class="built_in">find</span>(e[i],<span class="built_in">min</span>(w[i],lim-flow));</span><br><span class="line">            <span class="keyword">if</span> (t!=<span class="number">0</span>) d[e[i]]=<span class="number">-1</span>;</span><br><span class="line">            <span class="comment">// 没有路径，就不再访问，赋值为-1</span></span><br><span class="line">            w[i]-=t,w[i^<span class="number">1</span>]+=t,flow+=t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r=<span class="number">0</span>,flow=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">bfs</span>())</span><br><span class="line">        <span class="keyword">while</span> (flow=<span class="built_in">find</span>(S,INF)) r+=flow;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-无源汇上下界最大流"><a href="#2-无源汇上下界最大流" class="headerlink" title="2. 无源汇上下界最大流"></a>2. 无源汇上下界最大流</h2><p>我们当然希望他不要有上下界，所以要转化成普通的最大流。</p><p>设边 (u,v) 流量为 f(u,v), 那么有<br>$$ cmin(u,v)\le f(u,v) \le cmax(u,v) $$</p><p>可以得到：</p><p>$$ 0 \le f(u,v) \le cmax(u,v) - cmin(u,v) $$</p><p>可以发现，我们直接从 u 连一条 cmax(u,v) - cmin(u,v) 为容量的边即可！</p><p>真的可以了吗？（<del>雾</del>）</p><p>回顾原来的定义，每一个节点都是要不储存流量的，但这样的话，会导致节点 u 存储的一些流量，为</p><p>$$ \sum_{(u,v)\in E}c(u,v)-\sum_{(t,u)\in E}c(t,u)$$</p><p>为了弥补这一缺陷，我们不得不建立一个源点和汇点（其他点无法在流入或流出）</p><p>如果该项大于 0 ，我们就从源点连一条边到该点，否则就从该点流出到汇点（别无选择）</p><p>于是，我们就可以用最大流了。</p><p>还有一个问题，假设从源点不能每一条边都是满流？此时，我们可以发现，如果不是满流，每一个点还是要储存流量，就会导致性质无法满足。</p><p>最后的最大流，就是从源点出发的流加上每一条边原来没有计算的流量。</p><p>（可以先理解，因为每一个流都会从源点流出，不然就会有其他点不流量守恒了）</p><p>Code: 略（<del>主要是不想打</del>）</p><h2 id="3-有源汇上下界最大流"><a href="#3-有源汇上下界最大流" class="headerlink" title="3. 有源汇上下界最大流"></a>3. 有源汇上下界最大流</h2><p>有源汇对于无源汇来说，有一点不同：原来的源点（记为 s ）和汇点（记为 t ）也是不流量守恒的。</p><p>显而易见的方法是，从 t 到 s 连一条 $+\infty$ 的边。</p><p>然后就先从 S 到 T 用 Dinic ，再 s 到 t 用 Dinic 。<br>两次的流量相加，就可以了。（<del>就可以了</del>）</p><p>但真的可以吗？（<del>雾</del>）</p><p>是可以的（<del>不要被我问一次就犹豫了</del>）</p><p>但是我这里需要严谨证明一下。（看不懂可以略过）</p><p><strong>证明</strong></p><p>我们需要证明的是原图中从 s 到 t 的可行流与新图第一次 Dinic 后从 s 到 t 的可行流是一 一对应的。</p><p>首先，原图的可行流与新图中的满流是一一对应的。</p><h4 id="1-原图至新图"><a href="#1-原图至新图" class="headerlink" title="1. 原图至新图"></a>1. 原图至新图</h4><p>假设新图有一个满流 f(S,T) ，对于任意一个原图的可行流，即一个新图的满流，相减后， S 和 T 相关的边，流量都会变成 0 。</p><p>又由于有 c(t,s)=$+\infty$ ，去掉这条边后，就是从 s 到 t 的可行流。</p><h4 id="2-新图至原图"><a href="#2-新图至原图" class="headerlink" title="2. 新图至原图"></a>2. 新图至原图</h4><p>设新图中有一个满流 f(S,T) ，并有任意一个 s 到 t 的可行流  f(s,t).</p><p>那么，f(S,T)+f(s,t) 也一定是一个满流，同时由于 f(s,t) 不经过 S 和 T ，每个点也满足流量守恒。</p><p>所以对任意一个 f(s,t) ，都有一个满流与之对应，也就是有原图的可行流。</p><p><strong>证毕！</strong></p><h2 id="4-回归本题"><a href="#4-回归本题" class="headerlink" title="4.回归本题"></a>4.回归本题</h2><p><strong><del>由标题可以看出</del>，本题是一个模板题。</strong></p><ul><li><p>先建立一个源点。</p></li><li><p>从源点到每个少女，流量为 [gi,$+\infty$)</p></li><li><p>从每个少女到每一天，流量为 [li,ri]</p></li><li><p>从每一天到汇点，流量为 [0,di]</p></li></ul><p>记得清零，以及少女的编号问题。</p><p>最后，献上代码。其它问题看注释，或者私信。</p><p>Code：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll N=<span class="number">5e4</span>+<span class="number">10</span>,M=<span class="number">4e5</span>+<span class="number">10</span>,INF=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">ll h[N],e[M],ne[M],w[M],A[N],d[N],cur[N],idx,n,m,S,T,q[N],s,t;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ll a,ll b,ll c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[idx]=b,w[idx]=c,ne[idx]=h[a],h[a]=idx++;</span><br><span class="line">e[idx]=a,w[idx]=<span class="number">0</span>,ne[idx]=h[b],h[b]=idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//加每一个有上下界的边</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(ll from,ll to,ll least,ll most)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">add</span>(from,to,most-least);</span><br><span class="line">A[from]-=least,A[to]+=least;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">ll hh=<span class="number">1</span>,tt=<span class="number">1</span>;</span><br><span class="line">q[tt]=S;d[S]=<span class="number">1</span>;cur[S]=h[S];</span><br><span class="line"><span class="keyword">while</span> (hh&lt;=tt)</span><br><span class="line">&#123;</span><br><span class="line">ll x=q[hh++];</span><br><span class="line"><span class="keyword">for</span> (ll i=h[x];i!=<span class="number">-1</span>;i=ne[i])</span><br><span class="line"><span class="keyword">if</span> (!d[e[i]]&amp;&amp;w[i])</span><br><span class="line">&#123;</span><br><span class="line">d[e[i]]=d[x]+<span class="number">1</span>;</span><br><span class="line">cur[e[i]]=h[e[i]];</span><br><span class="line"><span class="keyword">if</span> (e[i]==T) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">q[++tt]=e[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line">ll res=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> ((c=<span class="built_in">getchar</span>())&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> (c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">res=c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">while</span> ((c=<span class="built_in">getchar</span>())&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;c&gt;=<span class="string">&#x27;0&#x27;</span>) res=(res&lt;&lt;<span class="number">3</span>)+(res&lt;&lt;<span class="number">1</span>)+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> res*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">findflow</span><span class="params">(ll x,ll limit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">ll flow=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (x==T) <span class="keyword">return</span> limit;</span><br><span class="line"><span class="keyword">for</span> (ll i=cur[x];i!=<span class="number">-1</span>&amp;&amp;flow&lt;limit;i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line">cur[x]=i;<span class="comment">//当前弧优化</span></span><br><span class="line"><span class="keyword">if</span> ((d[e[i]]==d[x]+<span class="number">1</span>)&amp;&amp;w[i])</span><br><span class="line">&#123;</span><br><span class="line">ll t=<span class="built_in">findflow</span>(e[i],<span class="built_in">min</span>(limit-flow,w[i]));</span><br><span class="line"><span class="keyword">if</span> (!t) d[e[i]]=<span class="number">-1000</span>;</span><br><span class="line">w[i]-=t,w[i^<span class="number">1</span>]+=t,flow+=t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//dinic 模板</span></span><br><span class="line"><span class="function">ll <span class="title">dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll r=<span class="number">0</span>,flow;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">bfs</span>())</span><br><span class="line"><span class="keyword">while</span> (flow=<span class="built_in">findflow</span>(S,INF)) r+=flow;</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m))<span class="comment">//敲黑板</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line"><span class="built_in">memset</span>(A,<span class="number">0</span>,<span class="keyword">sizeof</span> A);<span class="comment">//A 是指多出来的流量</span></span><br><span class="line">s=<span class="number">0</span>,t=m+n+<span class="number">1</span>;ll tot=<span class="number">0</span>;idx=<span class="number">0</span>;<span class="comment">//原图的源汇点</span></span><br><span class="line"><span class="keyword">for</span> (ll i=<span class="number">1</span>,x;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">x=<span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">addedge</span>(s,i,x,INF);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (ll i=<span class="number">1</span>,C,D;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">C=<span class="built_in">read</span>();D=<span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">addedge</span>(m+i,t,<span class="number">0</span>,D);</span><br><span class="line"><span class="keyword">for</span> (ll j=<span class="number">1</span>,x,L,R;j&lt;=C;++j)</span><br><span class="line">&#123;</span><br><span class="line">x=<span class="built_in">read</span>(),L=<span class="built_in">read</span>(),R=<span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">addedge</span>(x+<span class="number">1</span>,m+i,L,R);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">S=m+n+<span class="number">2</span>;T=m+n+<span class="number">3</span>;<span class="comment">//新图的源汇点</span></span><br><span class="line"><span class="keyword">for</span> (ll i=<span class="number">0</span>;i&lt;=m+n+<span class="number">1</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (A[i]&gt;<span class="number">0</span>) <span class="built_in">add</span>(S,i,A[i]),tot+=A[i];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (A[i]&lt;<span class="number">0</span>) <span class="built_in">add</span>(i,T,-A[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">add</span>(t,s,INF);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">dinic</span>()&lt;tot)<span class="comment">//判断是否为满流</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">ll res=w[idx<span class="number">-1</span>];</span><br><span class="line">w[idx<span class="number">-1</span>]=w[idx<span class="number">-2</span>]=<span class="number">0</span>;</span><br><span class="line">S=s,T=t;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n\n&quot;</span>,res+<span class="built_in">dinic</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;同步发表于 P5192 题解。&lt;/p&gt;</summary>
    
    
    
    
    <category term="题解" scheme="https://mydcwfy.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
    <category term="网络流" scheme="https://mydcwfy.github.io/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>二分图</title>
    <link href="https://mydcwfy.github.io/2021/12/26/Bipartite-graph/"/>
    <id>https://mydcwfy.github.io/2021/12/26/Bipartite-graph/</id>
    <published>2021-12-26T03:52:49.000Z</published>
    <updated>2021-12-26T03:54:31.078Z</updated>
    
    <content type="html"><![CDATA[<p>简单的前置知识。</p><span id="more"></span><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h3><p>也就是能分成两部分，每部之间没有边。</p><p>二分图在染色法时（每边染色不同，且只有 2 种颜色）不产生矛盾。</p><p>同时，如果不满足染色法，一定不是二分图。</p><p>这个证明其实有点难，感性理解就是了<del>（大雾</del></p><p>因为无法将颜色相同的点放入两部分，因为无论放入哪部分都会导致该部分内有边。</p><p>没有长度为奇数环（染色法没有矛盾）就一定是二分图。</p><p><strong>证明：</strong>因为没有奇数环的图，那么自己如果能走回自己，一定是经过的偶数条边，而这样两次染的色是相同的，所以就不会产生矛盾。</p><h4 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h4><p><a href="https://www.luogu.com.cn/problem/P1525">关押罪犯 Luogu</a></p><p><a href="https://www.acwing.com/problem/content/259/">关押罪犯 AcWing</a></p><p>这是一道典型的二分图判定题目。</p><p>虽然有其他做法，但今天着重讲二分图。</p><p>我们对这个图的操作明显就是二分图，而答案又是最大的影响最小化，所以<del>根据套路</del>，应该二分。</p><p>二分答案，对于每一个 $mid$，小于等于的不管，大于的加入边集，看会不会发生冲突。</p><p>用染色方法判定，时间复杂度为 $O(n\log\max(a_i))$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e4</span>+<span class="number">10</span>,M=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> h[N],e[M],ne[M],idx,w[M];</span><br><span class="line"><span class="keyword">int</span> color[N],now,n,m;</span><br><span class="line"><span class="keyword">bool</span> res;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx]=b,ne[idx]=h[a],w[idx]=c,h[a]=idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!res) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=h[x];~i;i=ne[i])</span><br><span class="line">        <span class="keyword">if</span> (w[i]&gt;now)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (color[x]==color[e[i]])</span><br><span class="line">            &#123;</span><br><span class="line">                res=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (color[e[i]]==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                color[e[i]]=-color[x];</span><br><span class="line">                <span class="built_in">dfs</span>(e[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> mid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(color,<span class="number">0</span>,<span class="keyword">sizeof</span> color);</span><br><span class="line">    res=<span class="number">1</span>;now=mid;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">if</span> (color[i]==<span class="number">0</span>) color[i]=<span class="number">1</span>,<span class="built_in">dfs</span>(i);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;<span class="keyword">int</span> a,b,c;</span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">        <span class="built_in">add</span>(a,b,c);<span class="built_in">add</span>(b,a,c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">0</span>,r=(<span class="keyword">int</span>)<span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">while</span> (l&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) r=mid;</span><br><span class="line">        <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;l&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-求最大匹配–匈牙利算法"><a href="#2-求最大匹配–匈牙利算法" class="headerlink" title="2.求最大匹配–匈牙利算法"></a>2.求最大匹配–匈牙利算法</h3><h4 id="1）-匹配（定义一堆"><a href="#1）-匹配（定义一堆" class="headerlink" title="1） 匹配（定义一堆"></a>1） 匹配（<del>定义一堆</del></h4><p>我们让二分图的一些边作为匹配边，需要满足的条件是：这些边都没有共同的端点。匹配边两边的点是匹配点，反之就是非匹配点。</p><p>最大匹配就是所有匹配中最大的<del>（废话</del>，最大的评级是根据边数（其实根据点数也没有什么，因为点数等于边数的两倍，只是更为常见的定义是用边数。</p><h4 id="2）增广路径"><a href="#2）增广路径" class="headerlink" title="2）增广路径"></a>2）增广路径</h4><p>从非匹配点开始，沿着非匹配边、匹配边、非、匹、非走，最后走到非匹配点，这样的路径就是一条增光路径。</p><h4 id="3）算法核心"><a href="#3）算法核心" class="headerlink" title="3）算法核心"></a>3）算法核心</h4><p>最大匹配等价于没有增广路径。</p><p>必要性易证：如果有，一定可以这条增广路径上的所有边将所有都取反（匹配边变为非匹配，非匹配变为匹配边，就得到更大匹配。</p><p>画个图，其实比较直观。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/lzykgvau.png"></p><p>（蓝色、红色是匹配边，黑色是非匹配边，左边红-黑交替的是增广路径，两端是非匹配点，将红-黑的所有边匹配取反，答案增加 1）</p><p>充分性略过。</p><h4 id="4）Konig-定理"><a href="#4）Konig-定理" class="headerlink" title="4）Konig 定理"></a>4）Konig 定理</h4><p>最小点覆盖 = 最大匹配。</p><p>最小点覆盖是指标记数量最少的点，使得每一条边至少有一个端点被标记。</p><p>证明又一次略。<del>（主要是我太菜</del></p><h4 id="5）算法流程"><a href="#5）算法流程" class="headerlink" title="5）算法流程"></a>5）算法流程</h4><p>首先，枚举每一个点，然后看这个点有没有增广路径，如果有的话，直接取反，答案加 1。</p><p>具体来说，我们举一个实在的例子。</p><p>我们发现，$a$ 现在想要匹配 $b$，但是现在 $b$ 匹配着 $c$，如果我们要让 $a$ 匹配 $b$，那么我们就要给 $c$ 找到一个匹配，不然的话答案不会增加。又发现现在 $a$ 和 $c$ 是同一部分的，这个其实是一个相似的问题，我们对 $c$ 进行递归即可。直到递归到 $m$ 和 $a,c$ 是同一部分的，而且 $m$ 有一个非匹配点 $n$ 与之相连，那么，我们就将 $m$ 的匹配变为 $n$，递归回去，最后 $a$ 匹配 $b$，答案加一。</p><p>时间复杂度为 $O(nm)$，实际和 spfa 等类似，跑得飞快。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span><span class="comment">//是看 x 能不能重新匹配一个，能就返回 true</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=h[x];~i;i=ne[i])</span><br><span class="line">        <span class="keyword">if</span> (!vis[e[i]])<span class="comment">//vis 在每一次重新 a 开始的时候都要清空，是为了看一下有没有又走回来，就导致死循环了</span></span><br><span class="line">        &#123;</span><br><span class="line">            vis[e[i]]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (mat[e[i]]==<span class="number">0</span>||<span class="built_in">dfs</span>(mat[e[i]]))</span><br><span class="line">            &#123;</span><br><span class="line">                mat[e[i]]=x;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-最小点覆盖"><a href="#3-最小点覆盖" class="headerlink" title="3. 最小点覆盖"></a>3. 最小点覆盖</h3><p><a href="https://www.acwing.com/problem/content/description/378/">AcWing376 机器任务</a></p><p>可以发现，对于 $a(i)$ 和 $b(i)$，必须有一个被取。</p><p>而我们发现，对于每一个 $i\in[1,n]$，$a(i)$ 只需要重启一次，也就是说，我们对于每一个 $a(i)$，贡献仅为 1。</p><p>可以将 $a(i)-b(i)$ 转化为一条边，变成用最少的点让所有的边都有一个端点有标记，也就是最小点覆盖问题，用 Konig 定理转化为最大匹配，用匈牙利算法就可以了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">250</span>,M=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> h[N],e[M],ne[M],w[M],idx;</span><br><span class="line"><span class="keyword">int</span> n,m,k,mat[N],ans;</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx]=b,ne[idx]=h[a],h[a]=idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=h[x];~i;i=ne[i])</span><br><span class="line">        <span class="keyword">if</span> (!vis[e[i]])</span><br><span class="line">        &#123;</span><br><span class="line">            vis[e[i]]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (mat[e[i]]==<span class="number">0</span>||<span class="built_in">dfs</span>(mat[e[i]]))</span><br><span class="line">            &#123;</span><br><span class="line">                mat[e[i]]=x;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (cin&gt;&gt;n&amp;&amp;n)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="built_in">memset</span>(mat,<span class="number">0</span>,<span class="keyword">sizeof</span> mat);</span><br><span class="line">    cin&gt;&gt;m&gt;&gt;k;</span><br><span class="line">    <span class="keyword">int</span> i,a,b;</span><br><span class="line">    <span class="keyword">while</span> (k--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;i,&amp;a,&amp;b);</span><br><span class="line">        <span class="keyword">if</span> (a&gt;=<span class="number">1</span>&amp;&amp;b&gt;=<span class="number">1</span>) <span class="built_in">add</span>(a,b+n),<span class="built_in">add</span>(b+n,a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">dfs</span>(i)) ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    ans=<span class="number">0</span>;idx=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-最大独立集"><a href="#4-最大独立集" class="headerlink" title="4.最大独立集"></a>4.最大独立集</h3><p><a href="https://www.acwing.com/problem/content/380/">AcWing378 骑士放置</a></p><p><a href="https://www.luogu.com.cn/problem/P3355">Luogu P3355 骑士共存问题</a></p><p>对于每一条限制，相当于端点只能取一个。</p><p>也就是一个最大独立集的问题了。</p><p>大概又有一个<del>简单的</del>定理：最大独立集 = 总点数 - 最小点覆盖。</p><p>不会证，只有鸽着了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span><span class="comment">//AcWing 代码，Luogu n = m</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">110</span>;</span><br><span class="line">PII mat[N][N];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">bool</span> v[N][N],vis[N][N];</span><br><span class="line"><span class="keyword">int</span> dx[]=&#123;<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">-2</span>&#125;,</span><br><span class="line">    dy[]=&#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">2</span>,<span class="number">-2</span>,<span class="number">2</span>,<span class="number">-2</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x&gt;=<span class="number">1</span>&amp;&amp;y&gt;=<span class="number">1</span>) <span class="keyword">return</span> x&lt;=n&amp;&amp;y&lt;=m;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (v[x][y]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">8</span>;++k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> i=x+dx[k],j=y+dy[k];</span><br><span class="line">        <span class="keyword">if</span> ((!<span class="built_in">check</span>(i,j))||v[i][j]||vis[i][j]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[i][j]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> ii=mat[i][j].first,jj=mat[i][j].second;</span><br><span class="line">        <span class="keyword">if</span> (((ii==<span class="number">0</span>)&amp;&amp;(jj==<span class="number">0</span>))||<span class="built_in">dfs</span>(ii,jj))</span><br><span class="line">        &#123;</span><br><span class="line">            mat[i][j]=<span class="built_in">make_pair</span>(x,y);</span><br><span class="line">            <span class="comment">// printf(&quot;%d %d:%d %d\n&quot;,x,y,i,j);</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k,a,b;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;<span class="keyword">int</span> tmp=k;</span><br><span class="line">    <span class="keyword">while</span> (k--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">        v[a][b]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (v[i][j]||(i+j)&amp;<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">dfs</span>(i,j)) res++;</span><br><span class="line">        &#125;</span><br><span class="line">    cout&lt;&lt;n*m-tmp-res&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;简单的前置知识。&lt;/p&gt;</summary>
    
    
    
    
    <category term="图论" scheme="https://mydcwfy.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
    <category term="二分图" scheme="https://mydcwfy.github.io/tags/%E4%BA%8C%E5%88%86%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>欧拉回路</title>
    <link href="https://mydcwfy.github.io/2021/12/26/Euler-circuit-and-Eulerian-path/"/>
    <id>https://mydcwfy.github.io/2021/12/26/Euler-circuit-and-Eulerian-path/</id>
    <published>2021-12-26T03:50:30.000Z</published>
    <updated>2021-12-26T03:51:45.799Z</updated>
    
    <content type="html"><![CDATA[<p>代码简单。</p><span id="more"></span><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h3><p>即”一笔画“问题，从一个点出发，能不重复地走过所有边，则称该路径为欧拉路径。</p><p>如果能走回原点，则该路径为欧拉回路。</p><p>注意，点是可以多次经过的，只要不重复走边即可。</p><h3 id="2-定理"><a href="#2-定理" class="headerlink" title="2.定理"></a>2.定理</h3><p>前提是图连通。</p><h4 id="1）无向图"><a href="#1）无向图" class="headerlink" title="1）无向图"></a>1）无向图</h4><p>一个图有欧拉回路的充要条件是：该图的每一个点的度数都为偶数。</p><p>欧拉路径的充要条件是：除了起始点和终点的度数为奇数，其余都为偶数，或者是欧拉回路。</p><p>即：度数为奇数的点只有 0 或 2 个。</p><p>必要性易证：如果原命题不成立，每一次经过一个点，需要消耗 2 个度，则有些点度数为奇数的点进来后就没有出去的边了，就没法构成欧拉路径了。</p><h4 id="2）有向图"><a href="#2）有向图" class="headerlink" title="2）有向图"></a>2）有向图</h4><p>欧拉回路的充要条件是：每一个点的入度和出度都相等。</p><p>欧拉路径的充要条件是：要么是欧拉回路，或者除了起点的出度比入度多一，终点的入度比出度多一，其余的点入度和出度相等。</p><p>必要性和上面的证明类似。</p><h3 id="3-定理充分性的证明"><a href="#3-定理充分性的证明" class="headerlink" title="3.定理充分性的证明"></a>3.定理充分性的证明</h3><p>只要对于每个符合条件的图，只要构造出来即可。</p><p>通过 dfs 实现。</p><p>直接 dfs，但是有一个问题：如果没有找到所有的边怎么办？</p><p>首先，可以明确的是，欧拉路径是又若干个环所组成的。</p><p>那么，我们怎样将所有的边接为一个大环呢？</p><p>我们模拟栈的回溯过程，将第二个环嵌在第一个环中间。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/olg0wl1u.png"></p><p>这个会按照 红-绿 的颜色进行递归的，然后按照这个倒序的话，我们就可以找到这个欧拉回路，也就是这个 红-绿 路径。</p><p>栈的模拟十分简单，回溯的时候直接将这条边入栈，最后倒序输出就可以了。</p><p>但是，这样的时间复杂度是 $O(nm)$（虽然和 spfa 差不多），我们很多时候需要优化，变为严格 $O(n+m)$。</p><p>可以发现，每一次前面遍历过的边，都肯定不会再被用到。</p><p>直接将 $head[x]$ 设为当前边的下一条 $next[i]$。</p><p>Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">4e5</span>+<span class="number">10</span>,M=<span class="number">4e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> h[N],e[M],ne[M],idx;</span><br><span class="line"><span class="keyword">int</span> din[N],dout[N],ans[M],cnt;</span><br><span class="line"><span class="keyword">int</span> n,m,t;</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx]=b,ne[idx]=h[a],h[a]=idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> &amp;i=h[x];~i;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (vis[i])</span><br><span class="line">        &#123;</span><br><span class="line">            i=ne[i];</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (t==<span class="number">1</span>) vis[i^<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> now;</span><br><span class="line">        <span class="keyword">if</span> (t==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            now=i/<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i&amp;<span class="number">1</span>) now=-now;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> now=i+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> j=e[i];</span><br><span class="line">        i=ne[i];</span><br><span class="line">        <span class="built_in">dfs</span>(j);</span><br><span class="line">        ans[++cnt]=now;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    cin&gt;&gt;t&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">        <span class="built_in">add</span>(a,b);dout[a]++;din[b]++;</span><br><span class="line">        <span class="keyword">if</span> (t==<span class="number">1</span>) <span class="built_in">add</span>(b,a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (t==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">            <span class="keyword">if</span> (din[i]+dout[i]&amp;<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">            <span class="keyword">if</span> (din[i]!=dout[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">if</span> (~h[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(i);<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> (cnt&lt;m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=cnt;i;i--)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;代码简单。&lt;/p&gt;</summary>
    
    
    
    
    <category term="图论" scheme="https://mydcwfy.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
    <category term="欧拉回路" scheme="https://mydcwfy.github.io/tags/%E6%AC%A7%E6%8B%89%E5%9B%9E%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>Manacher</title>
    <link href="https://mydcwfy.github.io/2021/12/22/Manacher-Algorithm/"/>
    <id>https://mydcwfy.github.io/2021/12/22/Manacher-Algorithm/</id>
    <published>2021-12-22T14:01:34.000Z</published>
    <updated>2021-12-26T02:10:26.128Z</updated>
    
    <content type="html"><![CDATA[<p>其实应用范围并不是很广。主要是预处理比较麻烦，而且很多问题回归原串的话是比较麻烦的。</p><span id="more"></span><h2 id="1-思想"><a href="#1-思想" class="headerlink" title="1. 思想"></a>1. 思想</h2><p>解决最长回文串的问题。</p><p>其实字符串的思想其实是比较类似的，都是将一个 $O(n ^ 2)$ 或者更高的复杂度的一个算法降一个 $n$。</p><p>比如，这里的 Manacher，暴力匹配是 $O(n ^ 2)$，但是我们通过 Manacher，可以优化到 $O(n)$。（但是有二分加 Hash $O(n \log n)$）</p><h2 id="2-算法流程"><a href="#2-算法流程" class="headerlink" title="2. 算法流程"></a>2. 算法流程</h2><h3 id="1）预处理"><a href="#1）预处理" class="headerlink" title="1）预处理"></a>1）预处理</h3><p>由于 Manacher <del>比较拙劣</del>只能处理长度为奇数的回文串，所以我们需要一些预处理。</p><p>其实很简单，我们直接在每两个字符之间加上另外一个没有出现过的字符，然后回文中心其实就是新加入的字符。</p><p>比如说，$\texttt{abba}$，然后我们变为：$\texttt{a|b|b|a}$，于是回文中心就是中间的 |。</p><p>注意我们可能会一些比较神奇的匹配出现，同时为了防止边界问题，我们在前面再加一个都没有出现过的字符。</p><p>于是就是：$\texttt{+a|b|b|a}$，很明显匹配的时候，我们会匹配到 + 的时候是一定不会在往前匹配的。所以一定不会导越界。</p><h3 id="2）主流程"><a href="#2）主流程" class="headerlink" title="2）主流程"></a>2）主流程</h3><p>定义 $p(i)$ 表示以 $s(i)$ 为中心的最长回文串半径。比如 $\texttt{a|b|a}$，中间 $b$ 的下标是 $3$，那么 $p(3) = 3$，因为半径就是 $\texttt{b|a}$ 的长度。</p><p>首先，我们定义当前匹配的回文串最远可以达到 $r$，贡献这一个最远的是 $mid$，即 $r = \max(i + p(i) - 1)$，且 $r = mid + p(mid) - 1$。</p><p>我们计算 $p(i)$ 的时候，如果 $i &lt; r$，那么就可以得到 $p(i)\geq p(2 * mid - i)$。为什么呢？</p><p>首先，我们计算 $p(i)$ 的时候，$mid &lt; i$，然后 $2 * mid - i &lt; i$，所以</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;其实应用范围并不是很广。主要是预处理比较麻烦，而且很多问题回归原串的话是比较麻烦的。&lt;/p&gt;</summary>
    
    
    
    
    <category term="字符串" scheme="https://mydcwfy.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="Manacher" scheme="https://mydcwfy.github.io/tags/Manacher/"/>
    
  </entry>
  
  <entry>
    <title>并查集</title>
    <link href="https://mydcwfy.github.io/2021/12/17/Disjoint-set/"/>
    <id>https://mydcwfy.github.io/2021/12/17/Disjoint-set/</id>
    <published>2021-12-17T14:28:10.000Z</published>
    <updated>2021-12-17T14:29:17.623Z</updated>
    
    <content type="html"><![CDATA[<p>简单的前置知识。</p><span id="more"></span><h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><h3 id="1-基本操作"><a href="#1-基本操作" class="headerlink" title="1.基本操作"></a>1.基本操作</h3><p>并查集维护的是一种关系，这种关系具有传递性，并且一般具有对称性。</p><p>1）merge: 将两个集合合并</p><p>2）find: 查询代表元素</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p[x]==x) <span class="keyword">return</span> p[x];</span><br><span class="line">    <span class="keyword">return</span> p[x]=<span class="built_in">find</span>(p[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> root_a=<span class="built_in">find</span>(a),root_b=<span class="built_in">find</span>(b);</span><br><span class="line">    p[root_b]=root_a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>易得，并查集是树形结构。</p><h3 id="2-优化"><a href="#2-优化" class="headerlink" title="2.优化"></a>2.优化</h3><p>1）路径压缩：$O(\log(n))$</p><p>2）按秩合并：$O(\log(n))$</p><p>一般来说，只需要用第一个即可。</p><p>由于常数很小，实际用时，可以看做 $O(1)$</p><h3 id="3-扩展"><a href="#3-扩展" class="headerlink" title="3.扩展"></a>3.扩展</h3><p>1）记录集合大小：一般保存到代表元素。</p><p>2）每个点到根节点的距离：绑定到每一个元素。</p><p>比如说 [NOI2001] 食物链</p><p><a href="https://www.luogu.com.cn/problem/P2024">题目传送门 Luogu</a></p><p><a href="https://www.acwing.com/problem/content/242/">题目传送门 AcWing</a></p><p>有两种处理方式：边带权和扩展域。</p><p>我们后面再讲。</p><h3 id="4-例题"><a href="#4-例题" class="headerlink" title="4.例题"></a>4.例题</h3><h4 id="T1：格子游戏"><a href="#T1：格子游戏" class="headerlink" title="T1：格子游戏"></a>T1：格子游戏</h4><p>来自 《信息学奥赛一本通》（但多方都没有找到）</p><p>将连边的两个点合并到一个并查集即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> get(i,j) (i-1)*n+j</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">205</span>*<span class="number">205</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,p[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p[x]==x) <span class="keyword">return</span> p[x];</span><br><span class="line">    <span class="keyword">return</span> p[x]=<span class="built_in">find</span>(p[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> root_a=<span class="built_in">find</span>(a),root_b=<span class="built_in">find</span>(b);</span><br><span class="line">    p[root_b]=root_a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">char</span> op[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n*n;++i) p[i]=i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%s&quot;</span>,&amp;a,&amp;b,op);</span><br><span class="line">        <span class="keyword">int</span> x=<span class="built_in">get</span>(a,b);</span><br><span class="line">        <span class="keyword">int</span> y;</span><br><span class="line">        <span class="keyword">if</span> (op[<span class="number">0</span>]==<span class="string">&#x27;D&#x27;</span>) y=<span class="built_in">get</span>(a+<span class="number">1</span>,b);</span><br><span class="line">        <span class="keyword">else</span> y=<span class="built_in">get</span>(a,b+<span class="number">1</span>);</span><br><span class="line">        x=<span class="built_in">find</span>(x);y=<span class="built_in">find</span>(y);</span><br><span class="line">        <span class="keyword">if</span> (x==y)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">merge</span>(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;draw&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T2：搭配购买"><a href="#T2：搭配购买" class="headerlink" title="T2：搭配购买"></a>T2：搭配购买</h4><p><a href="https://www.luogu.com.cn/problem/P1455">题目传送门 Luogu</a></p><p>注意维护根节点的价钱和价值。</p><p>最后是一个 01 背包。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e4</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> p[N],v[N],w[N],n,m,f[<span class="built_in"><span class="keyword">int</span></span>(<span class="number">1e7</span>)],tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p[x]==x) <span class="keyword">return</span> p[x];</span><br><span class="line">    <span class="keyword">return</span> p[x]=<span class="built_in">find</span>(p[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;tot;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) p[i]=i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,v+i,w+i);</span><br><span class="line">    <span class="keyword">int</span> a,b,x,y;</span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">        x=<span class="built_in">find</span>(a);y=<span class="built_in">find</span>(b);</span><br><span class="line">        <span class="keyword">if</span> (x!=y)</span><br><span class="line">        &#123;</span><br><span class="line">            w[x]+=w[y];</span><br><span class="line">            v[x]+=v[y];</span><br><span class="line">            p[y]=x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (p[i]!=i) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=tot;j&gt;=v[i];--j)</span><br><span class="line">            f[j]=<span class="built_in">max</span>(f[j],f[j-v[i]]+w[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;f[tot]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T3：-NOI2015-程序自动分析"><a href="#T3：-NOI2015-程序自动分析" class="headerlink" title="T3：[NOI2015] 程序自动分析"></a>T3：[NOI2015] 程序自动分析</h4><p><a href="https://www.luogu.com.cn/problem/P1955">题目传送门 Luogu</a></p><p><a href="https://www.acwing.com/problem/content/239/">题目传送门 AcWing</a></p><p>考虑由于等于具有传递性，而不等于不具有传递性，所以将相互等于的数维护一个并查集即可。</p><p>数据范围较大，需要离散化。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line">unordered_map &lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; S;</span><br><span class="line"><span class="keyword">int</span> n,m,p[N*<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Q</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a,b,e;</span><br><span class="line">&#125;q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S.<span class="built_in">count</span>(x)==<span class="number">0</span>) S[x]=++n;</span><br><span class="line">    <span class="keyword">return</span> S[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x==p[x]) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> p[x]=<span class="built_in">find</span>(p[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t,x,y,e;cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        n=<span class="number">0</span>;</span><br><span class="line">        S.<span class="built_in">clear</span>();</span><br><span class="line">        cin&gt;&gt;m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;x,&amp;y,&amp;q[i].e);</span><br><span class="line">            q[i].a=<span class="built_in">get</span>(x),q[i].b=<span class="built_in">get</span>(y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) p[i]=i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">            <span class="keyword">if</span> (q[i].e) p[<span class="built_in">find</span>(q[i].a)]=<span class="built_in">find</span>(q[i].b);</span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">            <span class="keyword">if</span> (!q[i].e)</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">find</span>(q[i].a)==<span class="built_in">find</span>(q[i].b))</span><br><span class="line">                &#123;</span><br><span class="line">                    flag=<span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="built_in">puts</span>(flag?<span class="string">&quot;YES&quot;</span>:<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T4：-NOI2002-银河英雄传说"><a href="#T4：-NOI2002-银河英雄传说" class="headerlink" title="T4：[NOI2002] 银河英雄传说"></a>T4：[NOI2002] 银河英雄传说</h4><p><a href="https://www.luogu.com.cn/problem/P1955">题目传送门 Luogu</a></p><p><a href="https://www.acwing.com/problem/content/240/">题目传送门 AcWing</a></p><p>如果没有询问距离，怎么办？</p><p>很简单，直接并查集即可。</p><p>可以发现，从 $x$ 到 $y$ 的距离，可以与 $x$,$y$ 到根节点的距离有关。</p><p>每当合并时，将被合并的点加一个前面的 $size[x]$。</p><p>前面讲到，因为是一个树形结构，所以它的子节点要路径压缩时，必定会经过被合并的点，并加上该点的 $d[x]$。</p><p>同时可以得到：<br>$$<br>dis(x,y)=abs(d(x)-d(y))-1<br>$$<br>注意特判 $x=y$ 的情况。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> p[N],n,d[N],s[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p[x]==x) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">int</span> rt=<span class="built_in">find</span>(p[x]);</span><br><span class="line">    d[x]+=d[p[x]];</span><br><span class="line">    <span class="keyword">return</span> p[x]=rt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i) p[i]=i,s[i]=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">char</span> op[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="keyword">while</span> (n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s%d%d&quot;</span>,op,&amp;a,&amp;b);</span><br><span class="line">        <span class="keyword">int</span> x=<span class="built_in">find</span>(a),y=<span class="built_in">find</span>(b);</span><br><span class="line">        <span class="keyword">if</span> (op[<span class="number">0</span>]==<span class="string">&#x27;M&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (x==y) <span class="keyword">continue</span>;</span><br><span class="line">            d[x]=s[y];</span><br><span class="line">            s[y]+=s[x];</span><br><span class="line">            p[x]=y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (x!=y) <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">max</span>(<span class="built_in">abs</span>(d[a]-d[b])<span class="number">-1</span>,<span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T5：奇偶游戏"><a href="#T5：奇偶游戏" class="headerlink" title="T5：奇偶游戏"></a>T5：奇偶游戏</h4><p><a href="https://www.acwing.com/problem/content/description/241/">题目传送门 AcWing</a></p><p>观察到 $N$ 很大，而 $M$ 相对小得多。</p><p>考虑离散化。</p><p>记录前缀和 $s[i]=\sum_{j=1}^{i}a[j]$</p><p>如果 $l-r$ 中有奇数个，等价于 $s(r)$ 与 $s(l-1)$ 奇偶性不同。</p><p>每次将其奇偶性得到，如果出现矛盾，则不行。</p><p>但是，如果没有矛盾，一定可以吗？( <del>雾</del> )</p><p>答案是肯定的。</p><p>直接使 $a[i]=|s[i]-s[i-1]|$ ，就一定满足条件。</p><p>现在，我们要维护有关联的点，作为一个并查集。</p><p>我们先用边带权做一次。</p><p>$d[x]$ 表示 $x$ 到根节点的奇偶性，则 $dis(x,y)=d[x]+d[y]$。</p><p>每当插入一个关系时，我们应该先判断是否合法。</p><p>如果不在一个集合，那么我们连接 $px$ 与 $py$，边权为 $d[px]=d[x]$ ^ $d[y]$ ^ $ans$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line">unordered_map &lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; S;</span><br><span class="line"><span class="keyword">int</span> n,m,tot,p[N],d[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S.<span class="built_in">count</span>(x)==<span class="number">0</span>) S[x]=++n;</span><br><span class="line">    <span class="keyword">return</span> S[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p[x]==x) <span class="keyword">return</span> p[x];</span><br><span class="line">    <span class="keyword">int</span> rt=<span class="built_in">find</span>(p[x]);</span><br><span class="line">    d[x]^=d[p[x]];</span><br><span class="line">    <span class="keyword">return</span> p[x]=rt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> op[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    cin&gt;&gt;tot&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i) p[i]=i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %s&quot;</span>,&amp;a,&amp;b,op);</span><br><span class="line">        a=<span class="built_in">get</span>(a<span class="number">-1</span>);b=<span class="built_in">get</span>(b);</span><br><span class="line">        <span class="keyword">int</span> x=<span class="built_in">find</span>(a),y=<span class="built_in">find</span>(b);</span><br><span class="line">        <span class="keyword">if</span> (op[<span class="number">0</span>]==<span class="string">&#x27;e&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (x!=y) p[x]=y,d[x]=d[a]^d[b];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (d[a]^d[b])</span><br><span class="line">                &#123;</span><br><span class="line">                    cout&lt;&lt;i<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op[<span class="number">0</span>]==<span class="string">&#x27;o&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (x!=y) p[x]=y,d[x]=d[a]^d[b]^<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (d[a]^d[b]==<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    cout&lt;&lt;i<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;m&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>扩展域先鸽着。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;简单的前置知识。&lt;/p&gt;</summary>
    
    
    
    
    <category term="数据结构" scheme="https://mydcwfy.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="并查集" scheme="https://mydcwfy.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>树状数组</title>
    <link href="https://mydcwfy.github.io/2021/12/17/Binary-indexed-tree/"/>
    <id>https://mydcwfy.github.io/2021/12/17/Binary-indexed-tree/</id>
    <published>2021-12-17T14:22:55.000Z</published>
    <updated>2021-12-17T14:26:01.706Z</updated>
    
    <content type="html"><![CDATA[<p>简单的前置知识。</p><span id="more"></span><h2 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h2><h3 id="1-基本功能"><a href="#1-基本功能" class="headerlink" title="1.基本功能"></a>1.基本功能</h3><p>树状数组可以在 $O(\log n)$ 的时间里，完成1.求前缀和或者2.修改某一个数。</p><p>最坏情况下，也只是 $O(m \log n)$ 的复杂度。</p><h3 id="2-基本原理"><a href="#2-基本原理" class="headerlink" title="2.基本原理"></a>2.基本原理</h3><p>基于二进制拆分思想。</p><p>$\forall x\in N^+, x=2^ {i_k}+2^{i_{k-1}}+…+2^{i_2}+2{i_1}$，</p><p>其中 $i_k\geq i_{k-1} \geq…\geq i_2\geq i_1$。</p><p>于是，我们将整个区间分为 $\log n$ 个区间。</p><p>分别为 $[x-2^{i_1}+1,x]$,$[x-2^{i_2}-2^{i_1}+1,x-2^{i_1}]$ … $[1,2^{i_{k}}]$。</p><p>每次，都可以取出 $2^i$，它是 x 的二进制表示的最后一位 1。</p><p>定义 $\operatorname{lowbit}(r)$ 表示 r 的最后一位 1 所表示的数。</p><p>那么，$\forall x$，第一个区间都可以表示为 $[x-\operatorname{lowbit}(x)+1,x]$</p><p>又发现，每一个 x，只有一个区间，而这个区间又很容易得到。</p><p>那么，让树状数组 $c[x]$ 表示区间$[x-\operatorname{lowbit}(x)+1,x]$</p><p>又二进制拆分最多只有 $\log n$ 位，所以每一个 x 的前缀和都可以拆分为 $\log n$ 个区间。</p><p>举个例子，13 的区间计算如下：</p><ol><li><p>$13=(1101)_2,\operatorname{lowbit}(13)=1:[13,13]$</p></li><li><p>$13-\operatorname{lowbit}(13)=12$</p></li><li><p>$12=(1100)_2,\operatorname{lowbit}(12)=4:[9,12]$</p></li><li><p>$12-\operatorname{lowbit}(12)=8$</p></li><li><p>$8=(1000)_2,\operatorname{lowbit}(8)=8:[1,8]$</p></li><li><p>$8-\operatorname{lowbit}(8)=0$</p></li></ol><p>结束。</p><p>讨论如何单点修改。</p><p>比如，我们需要在 13 加一个数。</p><p>可以发现，14 16 都要加上这个数。</p><p>相当于， $c[x]$ 代表的区间包含该数，那么该点需要修改。</p><p>将树状数组改为树的形式，也就是它的祖先都要修改。</p><p>当 13 加上 $\operatorname{lowbit}(13)$，则从低到高所有连续的 1 都会向前进位，直到碰到一个0。</p><p>这样得到的数，所包含的区间一定包含该数。</p><p>最后，我们还没讨论 $\operatorname{lowbit}(x)$。</p><p>如何计算 $\operatorname{lowbit}(x)$。</p><p>结论：$\operatorname{lowbit}(x)=x$ &amp; $(-x)$</p><p>$x=(…100…0)_2$（前面随意）。</p><p>又 $-x=\sim x+1$，所以所有的 0 都变成 1，接着加 1，所有最后的 1 都进位，直到原来的 1 不会进位，所以 &amp; 后，不会舍去，而其他位都被去掉。</p><h3 id="3-扩展"><a href="#3-扩展" class="headerlink" title="3.扩展"></a>3.扩展</h3><h4 id="1）差分"><a href="#1）差分" class="headerlink" title="1）差分"></a>1）差分</h4><p>支持区间修改和单点查询。</p><p>直接维护当前的差分数组即可（差分就是 $b[i]=a[i]-a[i-1]$ ）</p><h4 id="2）差分加区间和"><a href="#2）差分加区间和" class="headerlink" title="2）差分加区间和"></a>2）差分加区间和</h4><p>同样维护一个差分数组,也就是维护前缀和。</p><p>公式如下：<br>$$<br>ans=\sum_{x=1}^{i}\sum_{j=1}^{x}b[j]<br>$$<br>进一步推导可以得到：<br>$$<br>ans=\sum_{x=1}^{i}\sum_{j=1}^{x}b[j]=\sum_{x=1}^{i}b[x] * (i-x+1)<br>$$</p><p>分离 x 与 i：<br>$$<br>ans=\sum_{x=1}^{i}b[x] * (i+1)-\sum_{x=1}^{i}b[x] * x<br>$$<br>维护 b[x] 的前缀和和 $x * b[x]$ 的前缀和即可。</p><h3 id="4-例题"><a href="#4-例题" class="headerlink" title="4.例题"></a>4.例题</h3><h4 id="T1：楼兰图腾"><a href="#T1：楼兰图腾" class="headerlink" title="T1：楼兰图腾"></a>T1：楼兰图腾</h4><p><a href="https://www.acwing.com/problem/content/description/243/">题目传送门 AcWing</a></p><p>维护当前左端的数，即可。</p><p>先从左向右记录比当前数大的个数和小的个数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) x&amp;(-x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line">ll c[N],g[N],l[N];</span><br><span class="line"><span class="keyword">int</span> n,a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=x;i&lt;=n;i+=<span class="built_in">lowbit</span>(i))</span><br><span class="line">        c[i]+=(ll)r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=x;i;i-=<span class="built_in">lowbit</span>(i))</span><br><span class="line">        res+=c[i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,a+i);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        g[i]=<span class="built_in">sum</span>(n)-<span class="built_in">sum</span>(a[i]);</span><br><span class="line">        l[i]=<span class="built_in">sum</span>(a[i]<span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">add</span>(a[i],<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span> c);</span><br><span class="line">    ll res1=<span class="number">0</span>,res2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=n;i;--i)</span><br><span class="line">    &#123;</span><br><span class="line">        res1+=g[i]*(<span class="built_in">sum</span>(n)-<span class="built_in">sum</span>(a[i]));</span><br><span class="line">        res2+=l[i]*(<span class="built_in">sum</span>(a[i]<span class="number">-1</span>));</span><br><span class="line">        <span class="built_in">add</span>(a[i],<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld %lld&quot;</span>,res1,res2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T2：一个简单的整数问题"><a href="#T2：一个简单的整数问题" class="headerlink" title="T2：一个简单的整数问题"></a>T2：一个简单的整数问题</h4><p><a href="https://www.acwing.com/problem/content/248/">题目传送门 AcWing</a></p><p>刚才扩展 1 的模板题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) x&amp;-x</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line">ll c[N];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=x;i&lt;=n;i+=<span class="built_in">lowbit</span>(i))</span><br><span class="line">        c[i]+=(ll)r;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=x;i;i-=<span class="built_in">lowbit</span>(i))</span><br><span class="line">        res+=c[i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m,x,y,t,l=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> op[<span class="number">5</span>];</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">        <span class="built_in">add</span>(i,x-l);</span><br><span class="line">        l=x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s%d&quot;</span>,op,&amp;x);</span><br><span class="line">        <span class="keyword">if</span> (op[<span class="number">0</span>]==<span class="string">&#x27;Q&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="built_in">sum</span>(x)&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;y,&amp;t);</span><br><span class="line">            <span class="built_in">add</span>(y+<span class="number">1</span>,-t);<span class="built_in">add</span>(x,t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T3：一个简单的整数问题2"><a href="#T3：一个简单的整数问题2" class="headerlink" title="T3：一个简单的整数问题2"></a>T3：一个简单的整数问题2</h4><p><a href="https://www.acwing.com/problem/content/description/244/">题目传送门 AcWing</a></p><p>扩展 2 的模板题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) x&amp;(-x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line">ll c[<span class="number">2</span>][N],a[N],n,sum[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> x,ll d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (;x&lt;=n;x+=<span class="built_in">lowbit</span>(x)) c[k][x]+=d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (;x;x-=<span class="built_in">lowbit</span>(x)) ans+=(ll)c[k][x];</span><br><span class="line"><span class="keyword">return</span> ans; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m,b;ll d;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,a+i),sum[i]=sum[i<span class="number">-1</span>]+a[i];</span><br><span class="line"><span class="keyword">char</span> op[<span class="number">3</span>];<span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">while</span> (m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s%d%d&quot;</span>,op,&amp;a,&amp;b);</span><br><span class="line"><span class="keyword">if</span> (op[<span class="number">0</span>]==<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;d);</span><br><span class="line"><span class="built_in">add</span>(<span class="number">0</span>,a,d);<span class="built_in">add</span>(<span class="number">0</span>,b+<span class="number">1</span>,-d);</span><br><span class="line"><span class="built_in">add</span>(<span class="number">1</span>,a,a*d);<span class="built_in">add</span>(<span class="number">1</span>,b+<span class="number">1</span>,-(b+<span class="number">1</span>)*d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ll ans=sum[b]-sum[a<span class="number">-1</span>];</span><br><span class="line">ans+=(b+<span class="number">1</span>)*<span class="built_in">query</span>(<span class="number">0</span>,b)-<span class="built_in">query</span>(<span class="number">1</span>,b);</span><br><span class="line">ans-=(a)*<span class="built_in">query</span>(<span class="number">0</span>,a<span class="number">-1</span>)-<span class="built_in">query</span>(<span class="number">1</span>,a<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T4：谜一样的牛"><a href="#T4：谜一样的牛" class="headerlink" title="T4：谜一样的牛"></a>T4：谜一样的牛</h4><p><a href="https://www.acwing.com/problem/content/245/">题目传送门 ACWing</a></p><p>在线维护从前往后第 $a[i]+1$ 个1，就是本题答案。</p><p>考虑如何维护。</p><p>首先维护成前缀和。</p><p>一种比较简单的方法就是二分答案。</p><p>时间复杂度为 $O(n \log^2 n)$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) x&amp;-x</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> c[N],n,a[N],ans[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=x;i&lt;=n;i+=<span class="built_in">lowbit</span>(i)) c[i]+=r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=x;i;i-=<span class="built_in">lowbit</span>(i)) ans+=c[i];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,a+i);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">add</span>(i,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=n;i;--i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">1</span>,r=n;</span><br><span class="line">        <span class="keyword">while</span> (l&lt;r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">sum</span>(mid)&gt;=a[i]+<span class="number">1</span>) r=mid;</span><br><span class="line">            <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans[i]=l;</span><br><span class="line">        <span class="built_in">add</span>(l,<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一种是倍增算法。</p><p>我们发现，树状数组恰好为我们维护的 2 的整数幂。</p><p>考虑使用倍增，如果当前的和小于需要的结果，那么就加上。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) x&amp;-x</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>,L=<span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> c[N],n,a[N],ans[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=x;i&lt;=n;i+=<span class="built_in">lowbit</span>(i)) c[i]+=r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=x;i;i-=<span class="built_in">lowbit</span>(i)) ans+=c[i];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,a+i);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">add</span>(i,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=n;i;--i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> now=<span class="number">0</span>,nowsum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=L;j&gt;=<span class="number">0</span>;--j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (now+(<span class="number">1</span>&lt;&lt;j)&gt;n) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (nowsum+c[now+(<span class="number">1</span>&lt;&lt;j)]&lt;a[i]+<span class="number">1</span>) now+=(<span class="number">1</span>&lt;&lt;j),nowsum+=c[now];</span><br><span class="line">        &#125;</span><br><span class="line">        ans[i]=now+<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">add</span>(ans[i],<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>算法</th><th>时间</th><th>空间</th></tr></thead><tbody><tr><td>二分答案算法</td><td>267 ms</td><td>2514 KB</td></tr><tr><td>倍增算法</td><td>134 ms</td><td>2008 KB</td></tr></tbody></table><p>实测 AcWing。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;简单的前置知识。&lt;/p&gt;</summary>
    
    
    
    
    <category term="数据结构" scheme="https://mydcwfy.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>线段树</title>
    <link href="https://mydcwfy.github.io/2021/12/17/Segment-Tree/"/>
    <id>https://mydcwfy.github.io/2021/12/17/Segment-Tree/</id>
    <published>2021-12-17T13:51:05.000Z</published>
    <updated>2021-12-17T13:54:41.928Z</updated>
    
    <content type="html"><![CDATA[<p>非常重要的数据结构</p><span id="more"></span><h2 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h2><h3 id="1-基本操作"><a href="#1-基本操作" class="headerlink" title="1.基本操作"></a>1.基本操作</h3><p>pushup 和 pushdown</p><p>代码实现，有以下 5 种操作：</p><ol><li><p>$\operatorname{pushup}(u)$</p></li><li><p>$\operatorname{build}(u,l,r)$</p></li><li><p>$\operatorname{modify}(u,x,val)$ or $\operatorname{modify}(l,r,u,val)$（改为某一个值或加上某一个值）</p></li><li><p>$\operatorname{query}(u,l,r)$</p></li><li><p>$\operatorname{pushdown}(u,l,r)$</p></li></ol><h3 id="2-基本构造"><a href="#2-基本构造" class="headerlink" title="2.基本构造"></a>2.基本构造</h3><p>对于每一个节点，都代表一个区间，该节点如果不是叶节点（即区间只有一个数），都会从中间断开，左右的区间的节点。</p><p>大多数情况，一个节点的父节点和子节点分别为 $[x/2]$ 和 $x \times 2$、$x\times 2 + 1$</p><p>可以发现，该树是完全二叉树。</p><p>由于最后一层不满，所以空间开为 $4\times n$。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/m0s5m6cm.png" alt="一颗线段树"></p><h3 id="3-每个操作的具体实现"><a href="#3-每个操作的具体实现" class="headerlink" title="3.每个操作的具体实现"></a>3.每个操作的具体实现</h3><h4 id="1）query"><a href="#1）query" class="headerlink" title="1）query"></a>1）query</h4><p>现在讲 query。</p><p>当遇到 $\operatorname{query}(u,l,r)$ 时，有下列二种情况：</p><p>$[l,r]\subseteq [T_l,T_r]$，直接返回。</p><p>$[l,r]\cap [T_l,T_r] \not= \emptyset$，递归有的区间。</p><p>注意，不可能出现无交集的情况，因为根本不会进入。</p><p>看似简单并且复杂度高，其实复杂度仅为 $O(\log n)$。一般为 $O(4\times \log n)$。</p><p>证明略，请读者自行分类证明。    </p><h4 id="2）-modify"><a href="#2）-modify" class="headerlink" title="2） modify"></a>2） modify</h4><p>先讲单点。</p><p>比较简单，直接观察哪一边包含该点，进入即可。</p><p>再讲区间修改，即 $\operatorname{pushdown}(p,l,r)$。</p><h4 id="3）pushdown"><a href="#3）pushdown" class="headerlink" title="3）pushdown"></a>3）pushdown</h4><p>现在我们要区间修改。</p><p>与该区间有交集的节点最多有 $n$ 个，所以单次复杂度最坏为 $O(n)$。</p><p>所以有了 $lazytag$。</p><p>来自于 query，即完全包含时，就直接返回。</p><p>$lazytag$ 就记录当前对于整个区间的加，然后就不用继续向下递归。</p><p>注意，一般为了防止错误，一般该节点先加，到时候直接加儿子即可。</p><p>通过证明 query 的复杂度，可以发现 pushdown 整个复杂度为 $O(4\log n)$。</p><p>于是，在 query 时，如果需要递归该子区间时，直接将标记下传即可。</p><p>所以，此时就可以不需要记录 $lazytag$ 了。</p><p>以和为例：<br>$$<br>left.add+=p.add,left.sum+=p.add*(r-l+1);<br>$$<br>最后清空当前节点的 $lazytag$ 即可。</p><h3 id="4-例题"><a href="#4-例题" class="headerlink" title="4.例题"></a>4.例题</h3><h4 id="T1：-JSOI2008-最大数"><a href="#T1：-JSOI2008-最大数" class="headerlink" title="T1：[JSOI2008] 最大数"></a>T1：[JSOI2008] 最大数</h4><p><a href="https://www.luogu.com.cn/problem/P1198">题目传送门 Luogu</a></p><p><a href="https://www.acwing.com/problem/content/1277/">题目传送门 ACWing</a></p><p>将动态改为静态。</p><p>先将插入加入序列，每一次真正插入时，就相当于单点修改。</p><p>就变成了模板题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> p1 p&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> p2 p&lt;&lt;1|1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">10</span>,INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Segment</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,val;</span><br><span class="line">&#125;tr[<span class="number">4</span>*N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[p]=(Segment)&#123;l,r,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span> (l==r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(p1,l,mid);</span><br><span class="line">    <span class="built_in">build</span>(p2,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[p].val=<span class="built_in">max</span>(tr[p1].val,tr[p2].val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> x,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l=tr[p].l,r=tr[p].r;</span><br><span class="line">    <span class="keyword">if</span> (l==r) </span><br><span class="line">    &#123;</span><br><span class="line">        tr[p].val=val;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x&lt;=mid) <span class="built_in">modify</span>(p1,x,val);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">modify</span>(p2,x,val);</span><br><span class="line">    <span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[p].l&gt;=l&amp;&amp;tr[p].r&lt;=r) <span class="keyword">return</span> tr[p].val;</span><br><span class="line">    <span class="keyword">int</span> mid=tr[p].l+tr[p].r&gt;&gt;<span class="number">1</span>, ans=-INF;</span><br><span class="line">    <span class="keyword">if</span> (l&lt;=mid) ans=<span class="built_in">max</span>(ans,<span class="built_in">query</span>(p1,l,r));</span><br><span class="line">    <span class="keyword">if</span> (r&gt;mid) ans=<span class="built_in">max</span>(ans,<span class="built_in">query</span>(p2,l,r));</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> op[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> m,p,last=<span class="number">0</span>,x,n=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;m,&amp;p);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,m);</span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s%d&quot;</span>,op,&amp;x);</span><br><span class="line">        <span class="keyword">if</span> (op[<span class="number">0</span>]==<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            x=(x+last)%p;</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">1</span>,++n,x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            last=<span class="built_in">query</span>(<span class="number">1</span>,n-x+<span class="number">1</span>,n);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,last);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="T2-最大子段和"><a href="#T2-最大子段和" class="headerlink" title="T2:最大子段和"></a>T2:最大子段和</h4><p>考虑在一个节点维护哪些信息。</p><p>首先要维护 $tmax$（该区间的最大子段和）。</p><p>考虑怎样从儿子转移到父亲。</p><p>可以发现，有可能跨越两个区间，即儿子的最大前缀和最大后缀。</p><p>易得 $tmax[u]=\max(tmax[l],tmax[r], rmax[l]+lmax[r])$。</p><p>但是我们也要维护 $lmax[u]$ 和 $rmax[u]$。</p><p>易得：$lmax[u]=max(lmax[l],sum[l]+lmax[r])$。</p><p>右边同理。</p><p>也要维护 $sum$。</p><p>至此得到解决。</p><h4 id="T3：最大公约数"><a href="#T3：最大公约数" class="headerlink" title="T3：最大公约数"></a>T3：最大公约数</h4><p><a href="https://www.acwing.com/problem/content/247">题目传送门 AcWing</a></p><p>一共有 2 个操作：区间加和求最大公约数。</p><p>考虑需要存的信息：</p><p>最大公约数。</p><p>但是，由于 $(a,b,c)$ 与 $(a+x,b+x,c+x)$ 没有直接关系，所以不好维护。</p><p>但是，如果只修改一个数，那么就很简单。（直接跟新即可）</p><p>将区间加改为单点加，直接差分即可。</p><p>又由辗转相除法的扩展，可得：</p><p>$(a[1],a[2]…,a[n])=(a[1],a[2]-a[1] … ,a[n]-a[n-1])$</p><p>证明：</p><p>先证 $d=(a[1],a[2],…,a[n])|(a[1],a[2]-a[1],…, a[n]-a[n-1])$</p><p>易得，$d|a[1],d|a[2]…$，所以 $d|a[2]-a[1]$。同理，就可以证明。</p><p>再证$d=(a[1],a[2]-a[1],…, a[n]-a[n-1])|(a[1],a[2],…,a[n])$</p><p>易得，$d|a[1],d|(a[2]-a[1])$，所以 $d|(a[2]-a[1]+a[1])$，同理可证。</p><p>证毕。</p><p>又因为 $\operatorname{gcd}(a,b,…)$ 具有交换性与结合性，所以可以分开求。</p><p>让线段树维护差分后的值，并在每一个节点维护最大公约数。</p><p>对于每一个询问，都要维护原区间第一个点的值，否则会出问题。</p><p>可以使用树状数组维护前缀和，也可以直接和线段树一起维护。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> l(x) (x &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> r(x) (x &lt;&lt; 1 | 1)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">ll a[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BIT</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    ll tr[N];</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, ll c)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt;= n; i += <span class="built_in">lowbit</span>(i)) tr[i] += c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i; i -= <span class="built_in">lowbit</span>(i)) res += tr[i];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;bt;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">    ll val;</span><br><span class="line">&#125;tr[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">Gcd</span><span class="params">(ll a, ll b)</span></span>&#123;<span class="keyword">return</span> b ? <span class="built_in">Gcd</span>(b, a % b) : a;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[x].val = <span class="built_in">Gcd</span>(tr[<span class="built_in">l</span>(x)].val, tr[<span class="built_in">r</span>(x)].val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[x] = &#123;l, r, a[l]&#125;;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(<span class="built_in">l</span>(x), l, mid);</span><br><span class="line">    <span class="built_in">build</span>(<span class="built_in">r</span>(x), mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">pushup</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> pos, ll c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[x].r &lt; pos) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (tr[x].l == tr[x].r)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[x].val += c;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (tr[x].l + tr[x].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (pos &lt;= mid) <span class="built_in">modify</span>(<span class="built_in">l</span>(x), pos, c);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">modify</span>(<span class="built_in">r</span>(x), pos, c);</span><br><span class="line">    <span class="built_in">pushup</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt; r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (tr[x].l &gt;= l &amp;&amp; tr[x].r &lt;= r) <span class="keyword">return</span> tr[x].val;</span><br><span class="line">    <span class="keyword">int</span> mid = (tr[x].l + tr[x].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (r &lt;= mid) <span class="keyword">return</span> <span class="built_in">query</span>(<span class="built_in">l</span>(x), l, r);</span><br><span class="line">    <span class="keyword">if</span> (l &gt; mid) <span class="keyword">return</span> <span class="built_in">query</span>(<span class="built_in">r</span>(x), l, r);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Gcd</span>(<span class="built_in">query</span>(<span class="built_in">l</span>(x), l, r), <span class="built_in">query</span>(<span class="built_in">r</span>(x), l, r));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt; <span class="number">1</span>; -- i) a[i] -= a[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) bt.<span class="built_in">add</span>(i, a[i]);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">    ll d;</span><br><span class="line">    <span class="keyword">char</span> op[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">while</span> (m --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s %d %d&quot;</span>, op + <span class="number">1</span>, &amp;l, &amp;r);</span><br><span class="line">        <span class="keyword">if</span> (op[<span class="number">1</span>] == <span class="string">&#x27;Q&#x27;</span>) <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">abs</span>(<span class="built_in">Gcd</span>(bt.<span class="built_in">query</span>(l), <span class="built_in">query</span>(<span class="number">1</span>, l + <span class="number">1</span>, r))));</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;d);</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">1</span>, l, d), <span class="built_in">modify</span>(<span class="number">1</span>, r + <span class="number">1</span>, -d);</span><br><span class="line">            bt.<span class="built_in">add</span>(l, d), bt.<span class="built_in">add</span>(r + <span class="number">1</span>, -d);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T4：一个简单的整数问题2-【模板】线段树1"><a href="#T4：一个简单的整数问题2-【模板】线段树1" class="headerlink" title="T4：一个简单的整数问题2/【模板】线段树1"></a>T4：一个简单的整数问题2/【模板】线段树1</h4><p><a href="https://www.luogu.com.cn/problem/P3372">题目传送门 Luogu</a></p><p><a href="https://www.acwing.com/problem/content/244/">题目传送门 AcWing</a></p><p>上一次，我们使用了树状数组解决了本题。</p><p>这次，我们把他当做线段树的模板题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> p1 p&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> p2 p&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    ll sum,add;</span><br><span class="line">&#125;tr[<span class="number">4</span>*N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[N],n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[p].sum=tr[p1].sum+tr[p2].sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node &amp;root=tr[p],&amp;left=tr[p1],&amp;right=tr[p2];</span><br><span class="line">    <span class="keyword">if</span> (root.add==<span class="number">0</span>) <span class="keyword">return</span> ;</span><br><span class="line">    left.add+=root.add,right.add+=root.add;</span><br><span class="line">    left.sum+=root.add*(left.r-left.l+<span class="number">1</span>),right.sum+=root.add*(right.r-right.l+<span class="number">1</span>);</span><br><span class="line">    root.add=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[p].l=l,tr[p].r=r;</span><br><span class="line">    <span class="keyword">if</span> (l==r) tr[p].sum=(ll)a[l],tr[p].add=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(p1,l,mid);</span><br><span class="line">        <span class="built_in">build</span>(p2,mid+<span class="number">1</span>,r);</span><br><span class="line">        <span class="built_in">pushup</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[p].l&gt;=l&amp;&amp;tr[p].r&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[p].sum+=(ll)(tr[p].r-tr[p].l+<span class="number">1</span>)*x;</span><br><span class="line">        tr[p].add+=(ll)x;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(p);</span><br><span class="line">    <span class="keyword">int</span> mid=tr[p].l+tr[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (l&lt;=mid) <span class="built_in">modify</span>(p1,l,r,x);</span><br><span class="line">    <span class="keyword">if</span> (r&gt;mid) <span class="built_in">modify</span>(p2,l,r,x);</span><br><span class="line">    <span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[p].l&gt;=l&amp;&amp;tr[p].r&lt;=r) <span class="keyword">return</span> tr[p].sum;</span><br><span class="line">    <span class="built_in">pushdown</span>(p);</span><br><span class="line">    <span class="keyword">int</span> mid=tr[p].l+tr[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    ll sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (l&lt;=mid) sum+=<span class="built_in">query</span>(p1,l,r);</span><br><span class="line">    <span class="keyword">if</span> (r&gt;mid) sum+=<span class="built_in">query</span>(p2,l,r);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,a+i);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">char</span> op[<span class="number">5</span>];<span class="keyword">int</span> l,r;</span><br><span class="line">    ll x;</span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s%d%d&quot;</span>,op,&amp;l,&amp;r);</span><br><span class="line">        <span class="keyword">if</span> (op[<span class="number">0</span>]==<span class="string">&#x27;1&#x27;</span>) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;x),<span class="built_in">modify</span>(<span class="number">1</span>,l,r,x);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">query</span>(<span class="number">1</span>,l,r));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T5-亚特兰蒂斯"><a href="#T5-亚特兰蒂斯" class="headerlink" title="T5:亚特兰蒂斯"></a>T5:亚特兰蒂斯</h4><p><a href="https://www.acwing.com/problem/content/249/">题目传送门 AcWing</a></p><p>这道题，我们讲另外一个线段树的重要应用：<strong>扫描线</strong></p><p>扫描线的实质就是离散化加线段树（ <del>洛谷的标签</del> ）。</p><p>借助了积分的思想（不要被吓到了）。</p><p>将所有的 x 坐标离散化。</p><p>对于每一个相邻的 x 坐标，都有一些被覆盖，而且不是部分覆盖（即 x 坐标是被完全覆盖的，但 y 不一定）。</p><p>假设每个区间在 y 坐标上覆盖的长度为 $h[i]$，则答案为</p><p>$$ans=\sum_{i=1}^{tot}{h[i]*(x[i+1]-x[i])}$$</p><p>考虑如何求 $h[i]$。</p><p>再次利用差分的思想，将整个矩形覆盖就相当于左边的线段所覆盖的 y 坐标加 1，右边的线段覆盖的 y 坐标减 1。</p><p>也就是每一个点被覆盖的次数，如果不为 0，就算上该节    点。</p><p>原题目转化为，怎样计算在同一线段上，被覆盖的长度。</p><p>所以，将纵坐标再维护成线段树。</p><p>又因为是差分思想，所以直接计算前缀和即可吗，每计算一条边就加入当前的线段树。</p><p>维护以下信息：</p><ul><li><p>$cnt$ 记录当前区间的覆盖次数。</p></li><li><p>$len$ 不考虑当前节点的情况下，$cnt&gt;0$ 的区间长度。</p></li></ul><p>再根据它的特殊性质：在 query 的时候，只询问根节点，那么 query 一定不会使用 pushdown。</p><p>如果在 modify 时也不用使用 pushdown，那么就不需要 $lazytag$。</p><p>考虑该问题的特殊性质，对于同一区间，一定会先加一次，在减一次。</p><p>并且当前的节点，无论是多少，只要$x\geq 1$，就不会影响答案。</p><p>如果当前节点减完有为 0，就根据两个儿子的正确信息，就一定能维护当前节点的正确信息（儿子中没有被更改，是正确的）。</p><p>如果是加法，因为只会查询根节点，就不会用到儿子节点，所以无需管 psushdown。</p><p>并且，只要加大于 0 的节点，就不会影响答案。</p><p>如果等于 0 , pushdown 就不会执行。</p><p>这个题目的做法十分特殊，所以特意讲出来。</p><p>但是没有结束（ <del>雾</del> ）。</p><p>记得开头的标签吗？</p><p>我们还应该首先离散化，预处理相邻的距离。</p><p>还有一个细节，就是因为维护的是区间，所以应该是 $x[l]-x[r-1]$。</p><p>上代码（因为没有 $lazytag$，所以代码较短）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> l(p) (p&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> r(p) (p&lt;&lt;1|1)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Seg</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,l,r;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> Seg &amp;e) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x&lt;e.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;seg[<span class="number">2</span>*N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    <span class="keyword">double</span> len;</span><br><span class="line">    <span class="keyword">int</span> cnt;</span><br><span class="line">&#125;tr[N&lt;&lt;<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"></span><br><span class="line">vector &lt;<span class="keyword">double</span>&gt; t;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[p].cnt)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[p].len=t[tr[p].r+<span class="number">1</span>]-t[tr[p].l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tr[p].l==tr[p].r)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[p].len=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    tr[p].len=tr[<span class="built_in">l</span>(p)].len+tr[<span class="built_in">r</span>(p)].len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[p]=(Node)&#123;l,r,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span> (l==r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(<span class="built_in">l</span>(p),l,mid);</span><br><span class="line">    <span class="built_in">build</span>(<span class="built_in">r</span>(p),mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// printf(&quot;%d %d %d %d %d\n&quot;,p,tr[p].l,tr[p].r,l,r);</span></span><br><span class="line">    <span class="keyword">if</span> (tr[p].l&gt;=l&amp;&amp;tr[p].r&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[p].cnt+=k;</span><br><span class="line">        <span class="built_in">pushup</span>(p);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=tr[p].l+tr[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (l&lt;=mid) <span class="built_in">modify</span>(<span class="built_in">l</span>(p),l,r,k);</span><br><span class="line">    <span class="keyword">if</span> (r&gt;mid) <span class="built_in">modify</span>(<span class="built_in">r</span>(p),l,r,k);</span><br><span class="line">    <span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">lower_bound</span>(t.<span class="built_in">begin</span>(),t.<span class="built_in">end</span>(),x)-t.<span class="built_in">begin</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n),n)</span><br><span class="line">    &#123;</span><br><span class="line">        t.<span class="built_in">clear</span>();<span class="keyword">double</span> a,b,c,d;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf%lf%lf&quot;</span>,&amp;a,&amp;b,&amp;c,&amp;d);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Test case #%d\n&quot;</span>,++T);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Total explored area: %.2lf\n\n&quot;</span>,(c-a)*(d-b));</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,j=<span class="number">0</span>;i&lt;=n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            cin&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d;</span><br><span class="line">            seg[j++]=(Seg)&#123;a,b,d,<span class="number">1</span>&#125;;</span><br><span class="line">            seg[j++]=(Seg)&#123;c,b,d,<span class="number">-1</span>&#125;;</span><br><span class="line">            t.<span class="built_in">push_back</span>(b);t.<span class="built_in">push_back</span>(d);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(t.<span class="built_in">begin</span>(),t.<span class="built_in">end</span>());</span><br><span class="line">        t.<span class="built_in">erase</span>(<span class="built_in">unique</span>(t.<span class="built_in">begin</span>(),t.<span class="built_in">end</span>()),t.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">if</span> (t.<span class="built_in">size</span>()==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Test case #%d\n&quot;</span>,++T);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Total explored area: 0.00\n\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">0</span>,t.<span class="built_in">size</span>()<span class="number">-2</span>);</span><br><span class="line">        <span class="built_in">sort</span>(seg,seg+<span class="number">2</span>*n);</span><br><span class="line">        <span class="keyword">double</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>*n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i&gt;<span class="number">0</span>) ans+=tr[<span class="number">1</span>].len*(seg[i].x-seg[i<span class="number">-1</span>].x);</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">1</span>,<span class="built_in">find</span>(seg[i].l),<span class="built_in">find</span>(seg[i].r)<span class="number">-1</span>,seg[i].k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Test case #%d\n&quot;</span>,++T);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Total explored area: %.2lf\n\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;非常重要的数据结构&lt;/p&gt;</summary>
    
    
    
    
    <category term="数据结构" scheme="https://mydcwfy.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="线段树" scheme="https://mydcwfy.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>Treap</title>
    <link href="https://mydcwfy.github.io/2021/12/17/Treap/"/>
    <id>https://mydcwfy.github.io/2021/12/17/Treap/</id>
    <published>2021-12-17T13:09:05.000Z</published>
    <updated>2021-12-17T13:09:48.734Z</updated>
    
    <content type="html"><![CDATA[<p>比较基础的平衡树。</p><span id="more"></span><h2 id="Treap"><a href="#Treap" class="headerlink" title="Treap"></a>Treap</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h3><p>Tree + Heap = Treap</p><p>前置知识：BST + Heap</p><p><a href="https://www.luogu.com.cn/blog/mydcwfy-342891/binary-search-tree">BST 的链接</a></p><h3 id="2-原理"><a href="#2-原理" class="headerlink" title="2. 原理"></a>2. 原理</h3><p>由于 BST 的复杂度与高度相关，而 BST 容易退化。（如插入一条链）</p><p>而可以发现，随机数据下，期望高度为 $O(\log n)$。</p><p>Treap 恰好利用了这一点。</p><p>对于每一个节点，都额外赋予一个 $val$，并实时维护一个堆（小根或大根均可）。</p><p>可以发现，只要 $val$ 确定，树的形态就唯一确定（$val$ 都不同）</p><h4 id="3-基本操作"><a href="#3-基本操作" class="headerlink" title="3. 基本操作"></a>3. 基本操作</h4><h4 id="1）右旋-zig"><a href="#1）右旋-zig" class="headerlink" title="1）右旋 (zig)"></a>1）右旋 (zig)</h4><p>1 和 2 都是交换儿子与父亲的操作，前提是不会影响中序遍历。</p><p>是将左儿子换到父亲的位置。</p><p>先将左儿子换到父亲，将父亲换到右儿子。</p><p>将左儿子的左子树换到父亲的左子树，左儿子的右子树换到右儿子的左子树。</p><p>画个图理解一下。</p><p>看代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">zig</span><span class="params">(<span class="keyword">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> q=tr[p].l;</span><br><span class="line">tr[p].l=tr[q].r,tr[q].r=p,p=q;</span><br><span class="line"><span class="built_in">pushup</span>(tr[p].r);<span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2）左旋-zag"><a href="#2）左旋-zag" class="headerlink" title="2）左旋 (zag)"></a>2）左旋 (zag)</h4><p>是将右儿子换到父亲为位置。</p><p>先将右儿子换到父亲，将父亲换到左儿子。</p><p>将右儿子的左子树换到左儿子的右子树，父亲的左子树换到左儿子的左子树。</p><p>可以发现，左旋与右旋是互逆操作。</p><p>画个图理解下。</p><p>看代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">zag</span><span class="params">(<span class="keyword">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> q=tr[p].r;</span><br><span class="line">tr[p].r=tr[q].l,tr[q].l=p,p=q;</span><br><span class="line"><span class="built_in">pushup</span>(tr[p].l);<span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3）插入"><a href="#3）插入" class="headerlink" title="3）插入"></a>3）插入</h4><p>首先回溯插入（见 BST），在回溯过程中如果儿子与父亲不满足堆性质，则交换。</p><h4 id="4）删除"><a href="#4）删除" class="headerlink" title="4）删除"></a>4）删除</h4><p>可以发现，左旋和右旋都可以使一个节点高度降低。</p><p>所以将该节点旋转至叶节点，直接删除即可。</p><p>请注意，在维护过程中同时注意堆性质，防止旋反。</p><p>如果是大根堆，就应该将大的 $val$ 旋到父节点。</p><h3 id="3-例题"><a href="#3-例题" class="headerlink" title="3.例题"></a>3.例题</h3><h4 id="T1：普通平衡树"><a href="#T1：普通平衡树" class="headerlink" title="T1：普通平衡树"></a>T1：普通平衡树</h4><p><a href="https://www.luogu.com.cn/problem/P3369">题目传送门 Luogu</a></p><p><a href="https://www.acwing.com/problem/content/255/">题目传送门 AcWing</a></p><p>模板题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>,INF=<span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line"><span class="keyword">int</span> key,val,s,cnt;</span><br><span class="line">&#125;tr[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,idx,rt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tr[p].s=tr[tr[p].l].s+tr[tr[p].r].s+tr[p].cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">zig</span><span class="params">(<span class="keyword">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> q=tr[p].l;</span><br><span class="line">tr[p].l=tr[q].r,tr[q].r=p,p=q;</span><br><span class="line"><span class="built_in">pushup</span>(tr[p].r);<span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">zag</span><span class="params">(<span class="keyword">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> q=tr[p].r;</span><br><span class="line">tr[p].r=tr[q].l,tr[q].l=p,p=q;</span><br><span class="line"><span class="built_in">pushup</span>(tr[p].l);<span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_node</span><span class="params">(<span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tr[++idx].key=key;</span><br><span class="line">tr[idx].val=<span class="built_in">rand</span>();</span><br><span class="line">tr[idx].s=tr[idx].cnt=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> idx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">get_node</span>(-INF),<span class="built_in">get_node</span>(INF);</span><br><span class="line">rt=<span class="number">1</span>,tr[<span class="number">1</span>].r=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> &amp;p,<span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!p) </span><br><span class="line">&#123;</span><br><span class="line">p=<span class="built_in">get_node</span>(key);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tr[p].key==key) tr[p].cnt++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (tr[p].key&gt;key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">insert</span>(tr[p].l,key);</span><br><span class="line"><span class="keyword">if</span> (tr[p].val&lt;tr[tr[p].l].val) <span class="built_in">zig</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">insert</span>(tr[p].r,key);</span><br><span class="line"><span class="keyword">if</span> (tr[tr[p].r].val&gt;tr[p].val) <span class="built_in">zag</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> &amp;p,<span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!p) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (tr[p].key==key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (tr[p].cnt&gt;<span class="number">1</span>) tr[p].cnt--;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (tr[p].l||tr[p].r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!tr[p].r||tr[tr[p].l].val&gt;tr[tr[p].r].val) <span class="built_in">zig</span>(p),<span class="built_in">remove</span>(tr[p].r,key);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">zag</span>(p),<span class="built_in">remove</span>(tr[p].l,key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> p=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (tr[p].key&lt;key) <span class="built_in">remove</span>(tr[p].r,key);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">remove</span>(tr[p].l,key);</span><br><span class="line"><span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_rank_by_key</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!p) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (tr[p].key==key) <span class="keyword">return</span> tr[tr[p].l].s+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (tr[p].key&gt;key) <span class="keyword">return</span> <span class="built_in">get_rank_by_key</span>(tr[p].l,key);</span><br><span class="line"><span class="keyword">return</span> tr[tr[p].l].s+tr[p].cnt+<span class="built_in">get_rank_by_key</span>(tr[p].r,key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_key_by_rank</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> rank)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!p) <span class="keyword">return</span> INF;</span><br><span class="line"><span class="keyword">if</span> (tr[tr[p].l].s&gt;=rank) <span class="keyword">return</span> <span class="built_in">get_key_by_rank</span>(tr[p].l,rank);</span><br><span class="line"><span class="keyword">if</span> (tr[tr[p].l].s+tr[p].cnt&gt;=rank) <span class="keyword">return</span> tr[p].key;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">get_key_by_rank</span>(tr[p].r,rank-tr[tr[p].l].s-tr[p].cnt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_prev</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!p) <span class="keyword">return</span> -INF;</span><br><span class="line"><span class="keyword">if</span> (tr[p].key&gt;=key) <span class="keyword">return</span> <span class="built_in">get_prev</span>(tr[p].l,key);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">max</span>(tr[p].key,<span class="built_in">get_prev</span>(tr[p].r,key));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_next</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!p) <span class="keyword">return</span> INF;</span><br><span class="line"><span class="keyword">if</span> (tr[p].key&lt;=key) <span class="keyword">return</span> <span class="built_in">get_next</span>(tr[p].r,key);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">min</span>(tr[p].key,<span class="built_in">get_next</span>(tr[p].l,key));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line"><span class="built_in">build</span>();</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">int</span> op,x;</span><br><span class="line"><span class="keyword">while</span> (n--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;op,&amp;x);</span><br><span class="line"><span class="built_in"><span class="keyword">switch</span></span> (op)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:<span class="built_in">insert</span>(rt,x);<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:<span class="built_in">remove</span>(rt,x);<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">get_rank_by_key</span>(rt,x)<span class="number">-1</span>);<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">get_key_by_rank</span>(rt,x+<span class="number">1</span>));<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">get_prev</span>(rt,x));<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">get_next</span>(rt,x));<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T2：-HNOI-2002-营业额统计"><a href="#T2：-HNOI-2002-营业额统计" class="headerlink" title="T2：[HNOI 2002]营业额统计"></a>T2：[HNOI 2002]营业额统计</h4><p><a href="https://www.luogu.com.cn/problem/P2234">题目传送门 Luogu</a></p><p><a href="https://www.acwing.com/problem/content/267/">题目传送门 AcWing</a></p><p>找$min(|a[i]-a[j]|)(1&lt;=j&lt;i)$，直接维护在当前数之前的序列。</p><p>直接维护 Treap 即可。</p><p>但是我用的是 set 乱搞。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">set&lt;<span class="keyword">int</span>&gt; ta;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">ll ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; ans;</span><br><span class="line">    ta.<span class="built_in">insert</span>(-INF), ta.<span class="built_in">insert</span>(ans), ta.<span class="built_in">insert</span>(INF);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>, x; i &lt;= n; ++ i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        <span class="keyword">if</span> (ta.<span class="built_in">find</span>(x) != ta.<span class="built_in">end</span>()) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">auto</span> iter = ta.<span class="built_in">insert</span>(x).first;</span><br><span class="line">        <span class="keyword">auto</span> ne = iter, pre = iter;</span><br><span class="line">        ne ++, pre --;</span><br><span class="line">        ans += <span class="built_in">min</span>(*ne - *iter, *iter - *pre);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;比较基础的平衡树。&lt;/p&gt;</summary>
    
    
    
    
    <category term="数据结构" scheme="https://mydcwfy.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="平衡树" scheme="https://mydcwfy.github.io/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>二叉搜索树</title>
    <link href="https://mydcwfy.github.io/2021/12/17/Binary-search-tree/"/>
    <id>https://mydcwfy.github.io/2021/12/17/Binary-search-tree/</id>
    <published>2021-12-17T12:46:46.000Z</published>
    <updated>2021-12-17T12:49:38.570Z</updated>
    
    <content type="html"><![CDATA[<p>简单的前置知识。</p><span id="more"></span><h2 id="BST"><a href="#BST" class="headerlink" title="BST"></a>BST</h2><p>BST 是所有平衡树的基础，请看 Treap 和 Splay 等之前先看本文。</p><h3 id="1）定义"><a href="#1）定义" class="headerlink" title="1）定义"></a>1）定义</h3><p>一般是递归定义。</p><p>对于根节点，都有它的左子树的数都小于它，右边的数都大于它。</p><p>并且，左右子树也都是二叉查找树。</p><p>它的本质就是动态维护一个有序序列。</p><p>请注意，我们一般认为是不存在重复元素的。</p><p>如果有，在每一个节点上加一个计数器 $cnt$。</p><h3 id="2）基本性质"><a href="#2）基本性质" class="headerlink" title="2）基本性质"></a>2）基本性质</h3><p>首先，我们按照中序遍历后，一定是有序且递增的序列。</p><h3 id="3）支持操作"><a href="#3）支持操作" class="headerlink" title="3）支持操作"></a>3）支持操作</h3><p>前 6 个操作都可以使用 set 解决。</p><h4 id="a-插入"><a href="#a-插入" class="headerlink" title="a. 插入"></a>a. 插入</h4><p>递归当前节点，如果就等于当前节点，那么计数器 $cnt$ 加1；如果比该节点小，则向左子树递归；如果比该节点大，则向有递归。</p><p>直到遇到一个空节点，就插入并结束。</p><h4 id="b-删除"><a href="#b-删除" class="headerlink" title="b. 删除"></a>b. 删除</h4><p>由于常用的平衡树（ Treap,Splay ）都有自己的独特方法且较为简单，所以先不讲。</p><h4 id="c-查找最小值或最大值"><a href="#c-查找最小值或最大值" class="headerlink" title="c. 查找最小值或最大值"></a>c. 查找最小值或最大值</h4><p>直接一直向左 / 右一直寻找，直到为空，返回当前节点。</p><h4 id="d-查找前驱或后继"><a href="#d-查找前驱或后继" class="headerlink" title="d. 查找前驱或后继"></a>d. 查找前驱或后继</h4><p>以前驱为例。</p><p>假设一定有该节点。</p><p>先找到该节点。</p><p>分为两种情况：</p><ol><li>有左子树：先进入，然后找最大值。</li><li>没有左子树：找到最后一次向右递归的点，也是维护比当前值大的最小的点。</li></ol><h4 id="g-求某个值的排名"><a href="#g-求某个值的排名" class="headerlink" title="g. 求某个值的排名"></a>g. 求某个值的排名</h4><h4 id="h-求排名是-k-的值"><a href="#h-求排名是-k-的值" class="headerlink" title="h. 求排名是 k 的值"></a>h. 求排名是 k 的值</h4><p>g.h. 将在 Treap 中讲解。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;简单的前置知识。&lt;/p&gt;</summary>
    
    
    
    
    <category term="数据结构" scheme="https://mydcwfy.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>树套树</title>
    <link href="https://mydcwfy.github.io/2021/12/17/%E6%A0%91%E5%A5%97%E6%A0%91/"/>
    <id>https://mydcwfy.github.io/2021/12/17/%E6%A0%91%E5%A5%97%E6%A0%91/</id>
    <published>2021-12-17T12:40:15.000Z</published>
    <updated>2021-12-17T12:46:56.637Z</updated>
    
    <content type="html"><![CDATA[<p>本质是一个区间通过线段树划分为 $\log n$ 个区间，每一个区间在分别维护，一般用 $O(\log n)$ 的数据结构，所以时间复杂度为 $O(n\log ^ 2 n)$，空间复杂度为 $O(n\log n)$，使用时注意空间。</p><span id="more"></span><h2 id="树套树"><a href="#树套树" class="headerlink" title="树套树"></a>树套树</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h3><p>顾名思义，就是一棵树套着另一棵树。</p><p>例如，对于每一个线段树的节点所维护的区间，都用 Splay 维护成有序序列。</p><p>一般外层是线段树或者树状数组，内层是一个平衡树或者线段树。</p><p>一般内层使用 STL。</p><p>请注意，如果你没有学过以上知识，请看我的其他博客。</p><p>我们通过例题来理解。</p><h3 id="2-例题"><a href="#2-例题" class="headerlink" title="2. 例题"></a>2. 例题</h3><h4 id="T1：树套树-简单版"><a href="#T1：树套树-简单版" class="headerlink" title="T1：树套树-简单版"></a>T1：树套树-简单版</h4><p><a href="https://www.acwing.com/problem/content/2490/">题目传送门 AcWing</a></p><p>假设没有区间的限制，那么我们就可以直接使用 lower_bound 等函数即可（使用 set）。</p><p>如何加上区间的限制呢？</p><p>那么，我们用一个线段树维护区间，并对每一个节点都建立一个 set，存放整个区间的有序序列。</p><p>回顾线段树，相当于是讲一个区间维护成 $\log n$ 个区间。</p><p>对于每一个区间，都返回前驱即可。</p><p>单次复杂度为 $O(\log^2 n)$。</p><p>如果单次修改，我们也像线段树一样，删除在该区间的数，插入新的树即可。</p><p>时间复杂度为 $O(m\log^2n)$，空间复杂度为 $O(n\log n)$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> l(p) (p&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> r(p) (p&lt;&lt;1|1)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e4</span>+<span class="number">10</span>,INF=<span class="number">1e9</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    multiset &lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">&#125;tr[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> a[N],n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[p]=(Node)&#123;l,r&#125;;</span><br><span class="line">    tr[p].s.<span class="built_in">clear</span>();</span><br><span class="line">    tr[p].s.<span class="built_in">insert</span>(-INF),tr[p].s.<span class="built_in">insert</span>(INF);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=l;i&lt;=r;++i) tr[p].s.<span class="built_in">insert</span>(a[i]);</span><br><span class="line">    <span class="keyword">if</span> (l==r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(<span class="built_in">l</span>(p),l,mid);</span><br><span class="line">    <span class="built_in">build</span>(<span class="built_in">r</span>(p),mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> x,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[p].s.<span class="built_in">erase</span>(tr[p].s.<span class="built_in">find</span>(a[x]));</span><br><span class="line">    tr[p].s.<span class="built_in">insert</span>(val);+</span><br><span class="line">    <span class="keyword">if</span> (tr[p].l==tr[p].r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=tr[p].l+tr[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x&lt;=mid) <span class="built_in">modify</span>(<span class="built_in">l</span>(p),x,val);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">modify</span>(<span class="built_in">r</span>(p),x,val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[p].l&gt;=l&amp;&amp;tr[p].r&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> it=tr[p].s.<span class="built_in">lower_bound</span>(x);</span><br><span class="line">        --it;<span class="keyword">return</span> *it;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=tr[p].l+tr[p].r&gt;&gt;<span class="number">1</span>,ans=-INF;</span><br><span class="line">    <span class="keyword">if</span> (l&lt;=mid) ans=<span class="built_in">max</span>(ans,<span class="built_in">query</span>(<span class="built_in">l</span>(p),l,r,x));</span><br><span class="line">    <span class="keyword">if</span> (r&gt;mid) ans=<span class="built_in">max</span>(ans,<span class="built_in">query</span>(<span class="built_in">r</span>(p),l,r,x));</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> op,l,r,x,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,a+i);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;op);</span><br><span class="line">        <span class="keyword">if</span> (op==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;l,&amp;x);</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">1</span>,l,x);</span><br><span class="line">            a[l]=x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;l,&amp;r,&amp;x);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">query</span>(<span class="number">1</span>,l,r,x));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T2：树套树"><a href="#T2：树套树" class="headerlink" title="T2：树套树"></a>T2：树套树</h4><p><a href="https://www.luogu.com.cn/problem/P3380">题目传送门 Luogu</a></p><p><a href="https://www.acwing.com/problem/content/2478/">题目传送门 AcWing</a></p><p>像上道题一样，我们使用树套树，线段树加 BST。</p><p>由于 set 不能维护当前子树的大小，我们就不能使用 STL。</p><p>手写 Splay/Treap 等平衡树，外面套一个线段树。</p><p>代码很长，至少 200 行。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> l(p) (p&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> r(p) (p&lt;&lt;1|1)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>,INF=<span class="number">0x7fffffff</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,key,val;</span><br><span class="line">    <span class="keyword">int</span> size,cnt;</span><br><span class="line">&#125;tr[<span class="number">20</span>*N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Seg</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    <span class="keyword">int</span> rt;</span><br><span class="line">&#125;seg[<span class="number">4</span>*N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tot=<span class="number">0</span>,pos,a[N],n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_node</span><span class="params">(<span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[++tot]=(Node)&#123;<span class="number">0</span>,<span class="number">0</span>,key,<span class="built_in">rand</span>(),<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">return</span> tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[p].size=tr[tr[p].l].size+tr[tr[p].r].size+tr[p].cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">zig</span><span class="params">(<span class="keyword">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q=tr[p].l;</span><br><span class="line">    tr[p].l=tr[q].r,tr[q].r=p,p=q;</span><br><span class="line">    <span class="built_in">pushup</span>(tr[p].r);<span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">zag</span><span class="params">(<span class="keyword">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q=tr[p].r;</span><br><span class="line">    tr[p].r=tr[q].l;tr[q].l=p,p=q;</span><br><span class="line">    <span class="built_in">pushup</span>(tr[p].l);<span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">get_node</span>(-INF),<span class="built_in">get_node</span>(INF);</span><br><span class="line">    tr[tot<span class="number">-1</span>].r=tot,seg[pos].rt=tot<span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">pushup</span>(tot<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> &amp;p,<span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!p)</span><br><span class="line">    &#123;</span><br><span class="line">        p=<span class="built_in">get_node</span>(key);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tr[p].key==key)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[p].cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (tr[p].key&gt;key)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">insert</span>(tr[p].l,key);</span><br><span class="line">        <span class="keyword">if</span> (tr[p].val&lt;tr[tr[p].l].val) <span class="built_in">zig</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">insert</span>(tr[p].r,key);</span><br><span class="line">        <span class="keyword">if</span> (tr[p].val&lt;tr[tr[p].r].val) <span class="built_in">zag</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> &amp;p,<span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[p].key==key)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (tr[p].cnt&gt;<span class="number">1</span>) tr[p].cnt--;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (tr[p].l||tr[p].r)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!tr[p].r||tr[tr[p].l].val&gt;tr[tr[p].r].val) <span class="built_in">zig</span>(p),<span class="built_in">remove</span>(tr[p].r,key);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">zag</span>(p),<span class="built_in">remove</span>(tr[p].l,key);</span><br><span class="line">                <span class="built_in">pushup</span>(p);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> p=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">pushup</span>(p);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tr[p].key&gt;key) <span class="built_in">remove</span>(tr[p].l,key);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">remove</span>(tr[p].r,key);</span><br><span class="line">    <span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_rank_by_key</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!p) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (tr[p].key==key) <span class="keyword">return</span> tr[tr[p].l].size;</span><br><span class="line">    <span class="keyword">if</span> (tr[p].key&gt;key) <span class="keyword">return</span> <span class="built_in">get_rank_by_key</span>(tr[p].l,key);</span><br><span class="line">    <span class="keyword">return</span> tr[tr[p].l].size+tr[p].cnt+<span class="built_in">get_rank_by_key</span>(tr[p].r,key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_key_by_rank</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> rank)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!p) <span class="keyword">return</span> INF;</span><br><span class="line">    <span class="keyword">if</span> (tr[tr[p].l].size&gt;=rank) <span class="keyword">return</span> <span class="built_in">get_key_by_rank</span>(tr[p].l,rank);</span><br><span class="line">    <span class="keyword">if</span> (tr[tr[p].l].size+tr[p].cnt&gt;=rank) <span class="keyword">return</span> tr[p].key;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">get_key_by_rank</span>(tr[p].r,rank-tr[p].cnt-tr[tr[p].l].size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_prev</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!p) <span class="keyword">return</span> -INF;</span><br><span class="line">    <span class="keyword">if</span> (tr[p].key&gt;=key) <span class="keyword">return</span> <span class="built_in">get_prev</span>(tr[p].l,key);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(tr[p].key,<span class="built_in">get_prev</span>(tr[p].r,key));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_next</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!p) <span class="keyword">return</span> INF;</span><br><span class="line">    <span class="keyword">if</span> (tr[p].key&lt;=key) <span class="keyword">return</span> <span class="built_in">get_next</span>(tr[p].r,key);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(tr[p].key,<span class="built_in">get_next</span>(tr[p].l,key));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 以上为 Treap 的模板</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">make_tree</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">build</span>(p);</span><br><span class="line">    seg[p].l=l,seg[p].r=r;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=l;i&lt;=r;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">insert</span>(seg[p].rt,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l==r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">make_tree</span>(<span class="built_in">l</span>(p),l,mid);</span><br><span class="line">    <span class="built_in">make_tree</span>(<span class="built_in">r</span>(p),mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">seg_change</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> pos,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">remove</span>(seg[p].rt,a[pos]);</span><br><span class="line">    <span class="built_in">insert</span>(seg[p].rt,k);</span><br><span class="line">    <span class="keyword">if</span> (seg[p].l==seg[p].r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=seg[p].l+seg[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (pos&lt;=mid) <span class="built_in">seg_change</span>(<span class="built_in">l</span>(p),pos,k);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">seg_change</span>(<span class="built_in">r</span>(p),pos,k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">seg_get_prev</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (seg[p].l&gt;=l&amp;&amp;seg[p].r&lt;=r) <span class="keyword">return</span> <span class="built_in">get_prev</span>(seg[p].rt,x);</span><br><span class="line">    <span class="keyword">int</span> mid=seg[p].l+seg[p].r&gt;&gt;<span class="number">1</span>,ans=-INF;</span><br><span class="line">    <span class="keyword">if</span> (l&lt;=mid) ans=<span class="built_in">max</span>(ans,<span class="built_in">seg_get_prev</span>(<span class="built_in">l</span>(p),l,r,x));</span><br><span class="line">    <span class="keyword">if</span> (r&gt;mid) ans=<span class="built_in">max</span>(ans,<span class="built_in">seg_get_prev</span>(<span class="built_in">r</span>(p),l,r,x));</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">seg_get_next</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (seg[p].l&gt;=l&amp;&amp;seg[p].r&lt;=r) <span class="keyword">return</span> <span class="built_in">get_next</span>(seg[p].rt,x);</span><br><span class="line">    <span class="keyword">int</span> mid=seg[p].l+seg[p].r&gt;&gt;<span class="number">1</span>,ans=INF;</span><br><span class="line">    <span class="keyword">if</span> (l&lt;=mid) ans=<span class="built_in">min</span>(ans,<span class="built_in">seg_get_next</span>(<span class="built_in">l</span>(p),l,r,x));</span><br><span class="line">    <span class="keyword">if</span> (r&gt;mid) ans=<span class="built_in">min</span>(ans,<span class="built_in">seg_get_next</span>(<span class="built_in">r</span>(p),l,r,x));</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">seg_get_rank_by_key</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (seg[p].l&gt;=l&amp;&amp;seg[p].r&lt;=r) <span class="keyword">return</span> <span class="built_in">get_rank_by_key</span>(seg[p].rt,key)<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=seg[p].l+seg[p].r&gt;&gt;<span class="number">1</span>,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (l&lt;=mid) ans+=<span class="built_in">seg_get_rank_by_key</span>(<span class="built_in">l</span>(p),l,r,key);</span><br><span class="line">    <span class="keyword">if</span> (r&gt;mid) ans+=<span class="built_in">seg_get_rank_by_key</span>(<span class="built_in">r</span>(p),l,r,key);</span><br><span class="line">    <span class="comment">// printf(&quot;%d %d %d key=%d ans=%d\n&quot;,p,seg[p].l,seg[p].r,key,ans);</span></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//以上为线段树的模板</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,a+i);</span><br><span class="line">    <span class="built_in">make_tree</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="comment">/*remove(seg[2].rt,2);</span></span><br><span class="line"><span class="comment">    printf(&quot;%d\n&quot;,get_rank_by_key(seg[2].rt,4)-1);*/</span></span><br><span class="line">    <span class="comment">// printf(&quot;%d\n&quot;,seg_get_rank_by_key(1,1,4,INF/2));</span></span><br><span class="line">    <span class="keyword">int</span> op,l,r,pos,x;</span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;op);</span><br><span class="line">        <span class="keyword">if</span> (op==<span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;pos,&amp;x);</span><br><span class="line">            <span class="built_in">seg_change</span>(<span class="number">1</span>,pos,x);</span><br><span class="line">            a[pos]=x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;l,&amp;r,&amp;x);</span><br><span class="line">            <span class="keyword">if</span> (op==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">seg_get_rank_by_key</span>(<span class="number">1</span>,l,r,x)+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (op==<span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> lval=-INF,rval=INF,tot=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (lval&lt;rval)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">int</span> mid=(<span class="keyword">long</span> <span class="keyword">long</span>)lval+rval+<span class="number">1</span>&gt;&gt;<span class="number">1</span>;</span><br><span class="line">                    <span class="comment">// cout&lt;&lt;lval&lt;&lt;&#x27; &#x27;&lt;&lt;mid&lt;&lt;&#x27; &#x27;&lt;&lt;rval&lt;&lt;&#x27;\t&#x27;&lt;&lt;seg_get_rank_by_key(1,l,r,mid)&lt;&lt;endl;</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">seg_get_rank_by_key</span>(<span class="number">1</span>,l,r,mid)&gt;=x) rval=mid<span class="number">-1</span>;</span><br><span class="line">                    <span class="keyword">else</span> lval=mid;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,lval);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (op==<span class="number">4</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">seg_get_prev</span>(<span class="number">1</span>,l,r,x));</span><br><span class="line">            <span class="keyword">if</span> (op==<span class="number">5</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">seg_get_next</span>(<span class="number">1</span>,l,r,x));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T3：K大数查询"><a href="#T3：K大数查询" class="headerlink" title="T3：K大数查询"></a>T3：K大数查询</h4><p><a href="https://www.luogu.com.cn/problem/P3332">题目传送门 Luogu</a></p><p><a href="https://www.acwing.com/problem/content/2308/">题目传送门 AcWing</a></p><p>首先，由于范围过大，我们需要离散化。</p><p>然后，我们要使用树套树，可以完成。但是有其他办法，所以没有写代码。</p><p>到时再贴树套树的做法吧。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本质是一个区间通过线段树划分为 $\log n$ 个区间，每一个区间在分别维护，一般用 $O(\log n)$ 的数据结构，所以时间复杂度为 $O(n\log ^ 2 n)$，空间复杂度为 $O(n\log n)$，使用时注意空间。&lt;/p&gt;</summary>
    
    
    
    
    <category term="数据结构" scheme="https://mydcwfy.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="树套树" scheme="https://mydcwfy.github.io/tags/%E6%A0%91%E5%A5%97%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>AC 自动机</title>
    <link href="https://mydcwfy.github.io/2021/12/17/Aho-corasick-automaton/"/>
    <id>https://mydcwfy.github.io/2021/12/17/Aho-corasick-automaton/</id>
    <published>2021-12-17T12:36:12.000Z</published>
    <updated>2021-12-17T12:38:53.879Z</updated>
    
    <content type="html"><![CDATA[<p>字符串中相对比较难的知识点。</p><span id="more"></span><h2 id="AC自动机"><a href="#AC自动机" class="headerlink" title="AC自动机"></a>AC自动机</h2><h3 id="1-前置知识"><a href="#1-前置知识" class="headerlink" title="1. 前置知识"></a>1. 前置知识</h3><p>Trie &amp; KMP.</p><p><a href="https://mydcwfy.github.io/2021/12/17/KMP-algorithm/#more">KMP位置</a></p><p>但是，没看懂 KMP 不代表看不懂本博客。</p><h3 id="2-解决的问题"><a href="#2-解决的问题" class="headerlink" title="2.解决的问题"></a>2.解决的问题</h3><p>多模问题，即一个字符串与多个模式串相匹配的问题。</p><p>如果不能匹配，找出最大的（模式串前缀）和（字符串的子串）相同。</p><h3 id="3-核心思想"><a href="#3-核心思想" class="headerlink" title="3.核心思想"></a>3.核心思想</h3><h4 id="1）定义"><a href="#1）定义" class="headerlink" title="1）定义"></a>1）定义</h4><p>在 Trie 上对每一个节点建立 $fail[i]$,是指的是对于所有模式串来说，当前所到节点的字符串的后缀与所有模式串的前缀的最大长度。</p><p>（ <del>令人难懂的定义</del>）</p><p>对比 KMP，我们发现还是有一定的相似性的。</p><p>可以画一个 Trie，自行匹配。</p><h4 id="2）求法"><a href="#2）求法" class="headerlink" title="2）求法"></a>2）求法</h4><p>由于当前的 $fail$ 一定小于整个串的长度，所以我们跳到父节点。</p><p>然后模仿 KMP,一直向前 fail，直到当前的儿子节点与该节点所代表的相同。</p><p>我们搜索时，也和 KMP 相似，如果匹配失败，就一直 fail 直到可以。</p><p>举个例子。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/vdyn9ho3.png"></p><p>首先，根的所有儿子的 $fail$ 都是指向根节点（没有可以和他匹配的了）。</p><p>对于其他节点 $u$，我们首先跳到父亲 $fa$。</p><p>以 $fa$ 为节点的字符串已经处理好了 $fail$，我们一直往上跳 $fail$，$fa$ 的后缀一定是包含当前节点。</p><p>再定义 $c$ 为 $u$ 是 $fa$ 的哪一个儿子。</p><p>如果碰到跳到的 $fail$ 有 $c$ 儿子，那么 $u$ 的 $fail$ 就指向 $c$ 儿子。</p><p>因为，$fa$ 的后缀与 $fail$ 的字符串一定相同。</p><p>所以，$u$ 的后缀一定与 $fail$ 的 $c$ 儿子相同。</p><h4 id="3）一个小小的优化"><a href="#3）一个小小的优化" class="headerlink" title="3）一个小小的优化"></a>3）一个小小的优化</h4><p>Trie 图。</p><p>你可以先看后面的代码。</p><p>假设当前节点的儿子没有的话，我们可以直接指向 $fail[x]$ 的当前的儿子。</p><p>因为向下走的话，前面匹配的仍然匹配。</p><p>虽然一定程度上破坏了 Trie，但常数会小一些。</p><h3 id="4-例题"><a href="#4-例题" class="headerlink" title="4.例题"></a>4.例题</h3><h4 id="T1：AC自动机"><a href="#T1：AC自动机" class="headerlink" title="T1：AC自动机"></a>T1：AC自动机</h4><p><a href="https://www.luogu.com.cn/problem/P3808">题目传送门 Luogu</a></p><p><a href="https://www.acwing.com/problem/content/1284/">题目传送门 AcWing</a></p><p>模板题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>,M=<span class="number">5e6</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tr[N][<span class="number">26</span>],ne[N],tot,cnt[N];</span><br><span class="line"><span class="keyword">int</span> q[N];</span><br><span class="line"><span class="keyword">char</span> str[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;str[i];++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t=str[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (!tr[u][t]) tr[u][t]=++tot;</span><br><span class="line">        u=tr[u][t];</span><br><span class="line">    &#125;</span><br><span class="line">    cnt[u]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> hh=<span class="number">0</span>,tt=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;++i)</span><br><span class="line">        <span class="keyword">if</span> (tr[<span class="number">0</span>][i]) q[++tt]=tr[<span class="number">0</span>][i];</span><br><span class="line">    <span class="keyword">while</span> (hh&lt;=tt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x=q[hh++];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> h=<span class="number">0</span>;h&lt;<span class="number">26</span>;++h)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> &amp;t=tr[x][h];</span><br><span class="line">            <span class="keyword">if</span> (!t) t=tr[ne[x]][h];</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                ne[t]=tr[ne[x]][h];</span><br><span class="line">                q[++tt]=t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Calcans</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;str[i];++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t=str[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        j=tr[j][t];</span><br><span class="line">        <span class="keyword">int</span> p=j;</span><br><span class="line">        <span class="keyword">while</span> (p&amp;&amp;~cnt[p])</span><br><span class="line">        &#123;</span><br><span class="line">            ans+=cnt[p];</span><br><span class="line">            cnt[p]=<span class="number">-1</span>;</span><br><span class="line">            p=ne[p];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">while</span> (n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str);</span><br><span class="line">        <span class="built_in">insert</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">build</span>();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">Calcans</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T2：-TJOI2013-单词"><a href="#T2：-TJOI2013-单词" class="headerlink" title="T2：[TJOI2013]单词"></a>T2：[TJOI2013]单词</h4><p><a href="https://www.luogu.com.cn/problem/P3966">题目传送门 Luogu</a></p><p><a href="https://www.acwing.com/problem/content/1287/">题目传送门 AcWing</a></p><p>这道题略有不同，需要我们首先统计每一个节点属于那些字符串，然后使用 ne 的转移，就可以统计了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> tr[N][<span class="number">26</span>],ne[N],cnt[N],id[<span class="number">250</span>],tot,q[N],hh,tt=<span class="number">-1</span>,n;</span><br><span class="line"><span class="keyword">char</span> str[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;str[i];i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t=str[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (!tr[u][t]) tr[u][t]=++tot;</span><br><span class="line">        u=tr[u][t];</span><br><span class="line">        cnt[u]++;</span><br><span class="line">    &#125;</span><br><span class="line">    id[x]=u;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;++i)</span><br><span class="line">        <span class="keyword">if</span> (tr[<span class="number">0</span>][i]) q[++tt]=tr[<span class="number">0</span>][i];</span><br><span class="line">    <span class="keyword">while</span> (hh&lt;=tt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x=q[hh++];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> &amp;t=tr[x][i];</span><br><span class="line">            <span class="keyword">if</span> (!t) t=tr[ne[x]][i];</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                ne[t]=tr[ne[x]][i];</span><br><span class="line">                q[++tt]=t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str);</span><br><span class="line">        <span class="built_in">insert</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">build</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=tt;i&gt;=<span class="number">0</span>;--i) cnt[ne[q[i]]]+=cnt[q[i]];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,cnt[id[i]]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;字符串中相对比较难的知识点。&lt;/p&gt;</summary>
    
    
    
    
    <category term="字符串" scheme="https://mydcwfy.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="AC 自动机" scheme="https://mydcwfy.github.io/tags/AC-%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>KMP algorithm</title>
    <link href="https://mydcwfy.github.io/2021/12/17/KMP-algorithm/"/>
    <id>https://mydcwfy.github.io/2021/12/17/KMP-algorithm/</id>
    <published>2021-12-17T12:35:46.000Z</published>
    <updated>2021-12-17T12:36:13.969Z</updated>
    
    <content type="html"><![CDATA[<p>比较简单的前置知识。</p><span id="more"></span><h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><h3 id="1-所解决的问题"><a href="#1-所解决的问题" class="headerlink" title="1. 所解决的问题"></a>1. 所解决的问题</h3><p>匹配一个字符串 $s[]$ 与模式字符串 $p[]$，计算有哪些点 $s[]$ 结尾的字符串与模式串（或前缀）完全相同。</p><p>通俗地讲，就是 $s[]$ 每一个起点（或终点）开始的字符串与 $p[]$ 前面相同的长度。</p><p>朴素算法是枚举起点（或终点），发现匹配即可。</p><p>枚举起点，一直匹配直到不相同为止。</p><h3 id="2-优化（核心思想）"><a href="#2-优化（核心思想）" class="headerlink" title="2. 优化（核心思想）"></a>2. 优化（核心思想）</h3><p>定义 $next[i]$ 为以 i 结尾的模式串的前缀与后缀的相同最大长度（非自己）。</p><p>（ <del>大雾</del> ）</p><p>我们仔细想一想这句话，这句话是什么意思？</p><p>自己画个图，可以发现，当与字符串匹配时，如果当前匹配失败的话，我们需要倒退一定距离。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/aqcp4l3g.png"></p><p>为了使之继续匹配（而不是从头开始），我们需要当前的后缀要与原来的前缀相同，就可以继续尝试匹配。</p><p>也就是 (2) 处的后缀和 (1) 处相同。</p><p>但又因为 (1) 是 (2) 的前缀。</p><p>所以，我们要预处理当前的前缀和后缀相同的最大距离。</p><p>这个的最大距离，就是 $next[i]$。</p><p>这是 KMP 的核心，请务必理解。</p><p>怎样求 next 数组呢？</p><p>其实，求 next 数组时，就是自己与自己匹配的过程。</p><p>s[] 和 p[] 的匹配就是寻找 s[i] 的后缀和 p[] 的前缀的匹配的最大距离。</p><p>将 s[] 也换成 p[]，就是自我匹配。</p><p>上代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>,j=<span class="number">0</span>;i&lt;=len;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (j!=<span class="number">0</span>&amp;&amp;p[j+<span class="number">1</span>]!=p[i]) j=ne[j];</span><br><span class="line"><span class="keyword">if</span> (p[j+<span class="number">1</span>]==p[i]) j++;</span><br><span class="line">ne[i]=j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要匹配的话，照搬上面的即可，但注意如果匹配的话，要倒退一步，防止重复匹配。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>,j=<span class="number">0</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (j&amp;&amp;s[i]!=p[j+<span class="number">1</span>]) j=ne[j];</span><br><span class="line"><span class="keyword">if</span> (p[j+<span class="number">1</span>]==s[i]) j++;</span><br><span class="line"><span class="keyword">if</span> (j==m) j=ne[j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;比较简单的前置知识。&lt;/p&gt;</summary>
    
    
    
    
    <category term="字符串" scheme="https://mydcwfy.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="KMP" scheme="https://mydcwfy.github.io/tags/KMP/"/>
    
  </entry>
  
  <entry>
    <title>Sqrt algorithm</title>
    <link href="https://mydcwfy.github.io/2021/12/17/Sqrt-algorithm/"/>
    <id>https://mydcwfy.github.io/2021/12/17/Sqrt-algorithm/</id>
    <published>2021-12-17T12:31:39.000Z</published>
    <updated>2021-12-17T12:32:47.154Z</updated>
    
    <content type="html"><![CDATA[<p>优雅的暴力，注意可以在线。</p><span id="more"></span><h2 id="分块"><a href="#分块" class="headerlink" title="分块"></a>分块</h2><h3 id="1-主要思想"><a href="#1-主要思想" class="headerlink" title="1. 主要思想"></a>1. 主要思想</h3><p>分块其实是一个很好的 “暴力”，在 oi 赛制中性价比很高。</p><p>很好写，且实际得分也不低。</p><p>首先，分块本身就是一种思想。</p><p>我们可以回忆一下这道题：</p><h4 id="T1：线段树1-你能回答这些问题吗2"><a href="#T1：线段树1-你能回答这些问题吗2" class="headerlink" title="T1：线段树1/你能回答这些问题吗2"></a>T1：线段树1/你能回答这些问题吗2</h4><p><a href="https://www.luogu.com.cn/problem/P3372">题目传送门 Luogu</a></p><p><a href="https://www.acwing.com/problem/content/244/">题目传送门 AcWing</a></p><p>前面，我们使用了树状数组和线段树维护了本题。</p><p>现在，我们使用分块。</p><p>分块就是将整个序列分为若干个段（一般为 $\sqrt{n}$），然后每一段维护整段信息。</p><p>比如，我们现在要从 l 到 r 每个数加 d。</p><p>一类是整段直接加，另一类是朴素加。</p><p>整段的个数 $\leq \sqrt{n}$，首尾朴素个数 $\leq \sqrt{n}$。</p><p>询问也类似。</p><p>然后，怎样区间直接加呢？</p><p>其实，我们可以类比于线段树的 lazytag，对于整段维护一个 add，代表整段加了多少。</p><p>同时，我们要询问整段的总和，所以要维护 sum。</p><p>注意，一定要弄清 sum 与 add 的关系。</p><p>我的思想与代码，都是 sum 已经加过了 add，你也可以设为没有加过。</p><p>下面，我们以此题为例，具体分析怎样操作。</p><h3 id="2-操作"><a href="#2-操作" class="headerlink" title="2. 操作"></a>2. 操作</h3><h4 id="1）修改"><a href="#1）修改" class="headerlink" title="1）修改"></a>1）修改</h4><p>首先，维护整段。<br>$$<br>add=add+x,sum=sum+(now.r-now.l+1)\times d<br>$$<br>然后，朴素两边。<br>$$<br>a[i]=a[i]+x,sum[bel[i]]=sum[bel[i]]+d<br>$$<br>单次复杂度为 $O(\sqrt{n})$</p><h4 id="2）查询"><a href="#2）查询" class="headerlink" title="2）查询"></a>2）查询</h4><p>首先，直接加整段。<br>$$<br>ans=ans+sum[i]<br>$$<br>然后，朴素加。<br>$$<br>ans=ans+a[i]+add[bel[i]]<br>$$</p><h3 id="3-例题"><a href="#3-例题" class="headerlink" title="3. 例题"></a>3. 例题</h3><h4 id="T1：线段树1-你能回答这些问题吗2-1"><a href="#T1：线段树1-你能回答这些问题吗2-1" class="headerlink" title="T1：线段树1/你能回答这些问题吗2"></a>T1：线段树1/你能回答这些问题吗2</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> get(i) (i/len)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>,M=<span class="number">400</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,len;</span><br><span class="line">ll add[M],sum[M],a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">get</span>(l)==<span class="built_in">get</span>(r))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=l;i&lt;=r;++i) a[i]+=x,sum[<span class="built_in">get</span>(i)]+=x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i=l,j=r;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">get</span>(i)==<span class="built_in">get</span>(l)) sum[<span class="built_in">get</span>(i)]+=x,a[i]+=x,i++;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">get</span>(j)==<span class="built_in">get</span>(r)) sum[<span class="built_in">get</span>(j)]+=x,a[j]+=x,j--;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="built_in">get</span>(i);k&lt;=<span class="built_in">get</span>(j);++k) sum[k]+=len*x,add[k]+=x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">get</span>(l)==<span class="built_in">get</span>(r))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=l;i&lt;=r;++i) ans+=a[i]+add[<span class="built_in">get</span>(i)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i=l,j=r;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">get</span>(i)==<span class="built_in">get</span>(l)) ans+=a[i]+add[<span class="built_in">get</span>(i)],i++;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">get</span>(j)==<span class="built_in">get</span>(r)) ans+=a[j]+add[<span class="built_in">get</span>(j)],j--;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="built_in">get</span>(i);k&lt;=<span class="built_in">get</span>(j);++k) ans+=sum[k];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    len=<span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,a+i);</span><br><span class="line">        sum[<span class="built_in">get</span>(i)]+=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> l,r,x;</span><br><span class="line">    <span class="keyword">char</span> op[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s %d %d&quot;</span>,op,&amp;l,&amp;r);</span><br><span class="line">        <span class="keyword">if</span> (op[<span class="number">0</span>]==<span class="string">&#x27;Q&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">query</span>(l,r));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">            <span class="built_in">change</span>(l,r,x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AcWing,Luogu 实测数据。</p><table><thead><tr><th>算法</th><th>Luogu 时间</th><th>AcWing 时间</th><th>理论复杂度</th><th>空间</th></tr></thead><tbody><tr><td>树状数组</td><td>131 ms</td><td>144 ms</td><td>$O(n\log n)$</td><td>5.71MB</td></tr><tr><td>线段树</td><td>246 ms</td><td>364 ms</td><td>$O(n\log n)$</td><td>7.49MB</td></tr><tr><td>分块</td><td>391 ms</td><td>891 ms</td><td>$O(n\sqrt n)$</td><td>1.34MB</td></tr></tbody></table><h2 id="块状链表"><a href="#块状链表" class="headerlink" title="块状链表"></a>块状链表</h2><h3 id="1-主要思想-1"><a href="#1-主要思想-1" class="headerlink" title="1. 主要思想"></a>1. 主要思想</h3><p>在上一题，我们使用了数组进行分块。</p><p>但是，如果是需要插入的话，我们就不得不换用另外的数据结构——链表。</p><p>加上分块，就有了一个高大上的名字：“块状链表”。</p><p>每两个块间，都有一个双向指针。</p><p>但是，又有不同的是，由于要支持插入，每一段的长度不是固定的。</p><h3 id="2-支持操作"><a href="#2-支持操作" class="headerlink" title="2. 支持操作"></a>2. 支持操作</h3><h4 id="a-插入"><a href="#a-插入" class="headerlink" title="a. 插入"></a>a. 插入</h4><p>首先，我们将要插入的节点所在块分裂开来，然后将插入的序列改为块状链表，插入即可。</p><h4 id="b-删除"><a href="#b-删除" class="headerlink" title="b. 删除"></a>b. 删除</h4><p>首先将前面节点的后面部分删除，然后删除中间完整节点，最后删除后面节点的前面部分。</p><p>删除前面部分时，我们可以将剩下元素直接复制到前面，更新长度即可。</p><h4 id="c-合并"><a href="#c-合并" class="headerlink" title="c. 合并"></a>c. 合并</h4><p>由于不停地分裂，可能导致节点很多而每一段很少，所以需要定期合并。</p><p>直接遍历整个块状链表，若下一个节点可以合并到当前节点，就合并。</p><p>合并结束后，每一个节点长度 $\geq \dfrac{\sqrt{n}}{2}$，总节点 $\leq 2\sqrt{n}$。</p><p>说实话，这可算是十分毒瘤的数据结构了。</p><p>主要是比较少写，而且没有固定的写法。</p><p>加油吧！</p><h3 id="3-例题-1"><a href="#3-例题-1" class="headerlink" title="3. 例题"></a>3. 例题</h3><h4 id="T2：-NOI2004-文本编辑器"><a href="#T2：-NOI2004-文本编辑器" class="headerlink" title="T2：[NOI2004]文本编辑器"></a>T2：[NOI2004]文本编辑器</h4><p><a href="https://www.luogu.com.cn/problem/P4008">题目传送门 Luogu</a></p><p><a href="https://www.acwing.com/problem/content/949/">题目传送门 AcWing</a></p><p>可以用 Splay,也可以使用块状链表。</p><p>调了 2 个多小时后，AC 代码出炉了！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2005</span>,M=<span class="number">2005</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> s[N+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> c,l,r;</span><br><span class="line">&#125;p[M];</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> str[<span class="number">2000005</span>];</span><br><span class="line"><span class="keyword">int</span> q[M],tt,x,y;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p[p[k].l].r=p[k].r;</span><br><span class="line">    p[p[k].r].l=p[k].l;</span><br><span class="line">    p[k].l=p[k].r=p[k].c=<span class="number">0</span>;</span><br><span class="line">    q[++tt]=k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p[k].r=p[x].r,p[p[x].r].l=k;</span><br><span class="line">    p[k].l=x,p[x].r=k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prev</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!y)</span><br><span class="line">    &#123;</span><br><span class="line">        x=p[x].l;</span><br><span class="line">        y=p[x].c<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> y--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">next</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (y!=p[x].c<span class="number">-1</span>) y++;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        x=p[x].r;</span><br><span class="line">        y=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u=p[<span class="number">0</span>].r;</span><br><span class="line">    <span class="keyword">while</span> (k&gt;p[u].c) k-=p[u].c,u=p[u].r;</span><br><span class="line">    x=u,y=k<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (y!=p[x].c<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=q[tt--];</span><br><span class="line">        <span class="built_in">add</span>(x,u);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=y+<span class="number">1</span>;j&lt;p[x].c;++j) p[u].s[p[u].c++]=p[x].s[j];</span><br><span class="line">        p[x].c=y+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cur=x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=q[tt--];</span><br><span class="line">        <span class="built_in">add</span>(cur,u);</span><br><span class="line">        <span class="keyword">while</span> (p[u].c&lt;N&amp;&amp;i&lt;k) p[u].s[p[u].c++]=str[i++];</span><br><span class="line">        cur=u;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k=p[<span class="number">0</span>].r;k;k=p[k].r)</span><br><span class="line">        <span class="keyword">while</span> (p[k].r&amp;&amp;p[k].c+p[p[k].r].c&lt;N)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=p[k].c,i=<span class="number">0</span>;i&lt;p[p[k].r].c;++i,++j) p[k].s[j]=p[p[k].r].s[i];</span><br><span class="line">            <span class="keyword">if</span> (x==p[k].r) x=k,y+=p[k].c;</span><br><span class="line">            p[k].c+=p[p[k].r].c;</span><br><span class="line">            <span class="built_in">del</span>(p[k].r);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p[x].c-y<span class="number">-1</span>&gt;=k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=y+<span class="number">1</span>,j=y+k+<span class="number">1</span>;j&lt;p[x].c;++i,++j) p[x].s[i]=p[x].s[j];</span><br><span class="line">        p[x].c-=k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        k-=p[x].c-y<span class="number">-1</span>;</span><br><span class="line">        p[x].c=y+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (p[x].r&amp;&amp;k&gt;p[p[x].r].c)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> cur=p[x].r;</span><br><span class="line">            k-=p[cur].c;</span><br><span class="line">            <span class="built_in">del</span>(cur);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> cur=p[x].r;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>,j=k;j&lt;p[cur].c;++i,++j) p[cur].s[i]=p[cur].s[j];</span><br><span class="line">        p[cur].c-=k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p[x].c-y<span class="number">-1</span>&gt;=k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;++i) <span class="built_in">putchar</span>(p[x].s[y+i+<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        k-=p[x].c-y<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=y+<span class="number">1</span>;i&lt;p[x].c;++i) <span class="built_in">putchar</span>(p[x].s[i]);</span><br><span class="line">        <span class="keyword">int</span> cur=x;</span><br><span class="line">        <span class="keyword">while</span> (p[cur].r&amp;&amp;k&gt;=p[p[cur].r].c)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> r=p[cur].r;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;p[r].c;++i) <span class="built_in">putchar</span>(p[r].s[i]);</span><br><span class="line">            k-=p[r].c;</span><br><span class="line">            cur=r;</span><br><span class="line">        &#125;</span><br><span class="line">        cur=p[cur].r;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;++i) <span class="built_in">putchar</span>(p[cur].s[i]);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;AcWing947_1.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;myans.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;M;++i) q[++tt]=i;</span><br><span class="line">    <span class="keyword">int</span> n,l;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">char</span> op[<span class="number">10</span>],c;</span><br><span class="line">    str[<span class="number">0</span>]=<span class="string">&#x27;&gt;&#x27;</span>;</span><br><span class="line">    <span class="built_in">insert</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">move</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,op);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(op,<span class="string">&quot;Insert&quot;</span>)==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;l);</span><br><span class="line">            <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (i&lt;l)</span><br><span class="line">                <span class="keyword">if</span> ((c=<span class="built_in">getchar</span>())&gt;=<span class="number">32</span>&amp;&amp;c&lt;=<span class="number">126</span>) str[i++]=c;</span><br><span class="line">            <span class="built_in">insert</span>(l);</span><br><span class="line">            <span class="built_in">merge</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(op,<span class="string">&quot;Move&quot;</span>)==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;l);</span><br><span class="line">            <span class="built_in">move</span>(l+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(op,<span class="string">&quot;Delete&quot;</span>)==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;l);</span><br><span class="line">            <span class="built_in">remove</span>(l);</span><br><span class="line">            <span class="built_in">merge</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(op,<span class="string">&quot;Get&quot;</span>)==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;l);</span><br><span class="line">            <span class="built_in">get</span>(l);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(op,<span class="string">&quot;Prev&quot;</span>)==<span class="number">0</span>) <span class="built_in">prev</span>();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(op,<span class="string">&quot;Next&quot;</span>)==<span class="number">0</span>) <span class="built_in">next</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;优雅的暴力，注意可以在线。&lt;/p&gt;</summary>
    
    
    
    
    <category term="数据结构" scheme="https://mydcwfy.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="分块" scheme="https://mydcwfy.github.io/tags/%E5%88%86%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>莫队</title>
    <link href="https://mydcwfy.github.io/2021/12/17/%E8%8E%AB%E9%98%9F/"/>
    <id>https://mydcwfy.github.io/2021/12/17/%E8%8E%AB%E9%98%9F/</id>
    <published>2021-12-17T12:25:54.000Z</published>
    <updated>2021-12-17T12:30:38.281Z</updated>
    
    <content type="html"><![CDATA[<p>离线的区间统计一类问题的利器。</p><span id="more"></span><h2 id="莫队"><a href="#莫队" class="headerlink" title="莫队"></a>莫队</h2><h3 id="1-朴素莫队"><a href="#1-朴素莫队" class="headerlink" title="1. 朴素莫队"></a>1. 朴素莫队</h3><p>就是优化暴力，当你不知道怎么做时，就可以考虑莫队了。</p><h3 id="2-例题"><a href="#2-例题" class="headerlink" title="2. 例题"></a>2. 例题</h3><p>我们从例题中学习。</p><h4 id="T1：HH的项链"><a href="#T1：HH的项链" class="headerlink" title="T1：HH的项链"></a>T1：HH的项链</h4><p><a href="https://www.acwing.com/problem/content/2494/">题目传送门 AcWing</a></p><p><a href="https://www.luogu.com.cn/problem/P1972">题目传送门 Luogu</a></p><p>这道题是模板莫队题。</p><p>首先考虑朴素（暴力），就是直接用 Hash 统计出现次数，并且输出即可。</p><p>时间复杂度为 $O(mn+ms)$ （s 表示颜色的总数）。</p><p>当然可以不用扫描整个数组，如果没统计过的话，就 ans 加一。</p><p>时间复杂度为 $O(mn)$。</p><p>继续考虑优化。</p><p>我们还没有充分利用以前的信息。</p><p>比如从 $[i_1\sim j_1]$ 到 $[i_2\sim j_2]$，我们可以使用指针，从 $i_1$ 移动到 $i_2$，并统计，从 $j_1$ 移动到 $j_2$，统计后，在扫描（也可以实时统计）。</p><p>于是现在我们关心的就是 $|i_1-i_2|$ 和 $|j_1-j_2|$，但是最坏情况仍然为 $O(n)$，没有得到优化。</p><p>现在就要搬出我们的大法——莫队算法！</p><p>莫队算法是一种离线算法，它通过对询问进行适当的排序降低复杂度。</p><p>我们既要使左边走的小，又要使右边走的小，要平衡两个距离，</p><p>就是分块算法！</p><p>回忆分块算法，我们要平衡块的长度和块的个数，于是就有了分块。</p><p>所以说，莫队实质就是一种分块。</p><p>排序需要有两个关键字，第一关键字是左端点所在块编号，第二是右端点。</p><p>注意，我们是用左端点分块排序！</p><p>设块的长度为 T，则单次左端点移动的复杂度为 $O(T)$，在同一块中，右端点移动的复杂度为 $O(n)$。</p><p>总时间复杂度为 $O(Tm+\dfrac{n^2}{T})$.</p><p>在 $T=\sqrt{\dfrac{n^2}{m}}$ 时取得最小值，即为 $O(n\sqrt m)$。</p><p>另外，还有一个 <del>玄学</del> 优化，就是奇数块递增排序，偶数块递减排序，就可以使右端点走的距离少一些。</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,id;</span><br><span class="line">&#125;q[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,len,ans[N],cnt[N],a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(re <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x/len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Query &amp;a,<span class="keyword">const</span> Query &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="built_in">get</span>(a.l),j=<span class="built_in">get</span>(b.l);</span><br><span class="line">    <span class="keyword">if</span> (i!=j) <span class="keyword">return</span> i&lt;j;</span><br><span class="line">    <span class="keyword">return</span> (a.r&lt;b.r)^(i&amp;<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(re <span class="keyword">int</span> x,<span class="keyword">int</span> &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!cnt[a[x]]) res++;</span><br><span class="line">    cnt[a[x]]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(re <span class="keyword">int</span> x,<span class="keyword">int</span> &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt[a[x]]--;</span><br><span class="line">    <span class="keyword">if</span> (!cnt[a[x]]) res--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(re <span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span> ((c=<span class="built_in">getchar</span>())&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>) ;</span><br><span class="line">    x=c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">while</span> ((c=<span class="built_in">getchar</span>())&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">read</span>(a[i]);</span><br><span class="line">    <span class="built_in">read</span>(m);</span><br><span class="line">    len=<span class="number">1620</span>;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(q[i].l),<span class="built_in">read</span>(q[i].r);</span><br><span class="line">        q[i].id=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(q+<span class="number">1</span>,q+m+<span class="number">1</span>,cmp);</span><br><span class="line">    re <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i=<span class="number">1</span>,l=<span class="number">1</span>,r=<span class="number">0</span>;i&lt;=m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (l&gt;q[i].l) <span class="built_in">add</span>(--l,res);</span><br><span class="line">        <span class="keyword">while</span> (l&lt;q[i].l) <span class="built_in">del</span>(l++,res);</span><br><span class="line">        <span class="keyword">while</span> (r&lt;q[i].r) <span class="built_in">add</span>(++r,res);</span><br><span class="line">        <span class="keyword">while</span> (r&gt;q[i].r) <span class="built_in">del</span>(r--,res);</span><br><span class="line">        ans[q[i].id]=res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>洛谷上数据有点强，莫队现在过不了。</p><h3 id="3-带修改的莫队"><a href="#3-带修改的莫队" class="headerlink" title="3. 带修改的莫队"></a>3. 带修改的莫队</h3><p>将一维转化为二维，另一维是时间轴。</p><p>l 到 r 的维护仍然简单，现在我们来讨论当 t 变化时的维护：</p><p>如果是不在该区间内的话，我们就直接不管。</p><p>如果在的话，就直接加。</p><p>但是这里有个问题：怎样修改而不覆盖原来的数？</p><p>有一个比较取巧的方法：经过该操作时，直接将原数组的数与修改的数交换。</p><p>这样以便于我们回来时可以覆盖回来。</p><p>下面一个问题是：怎样排序？</p><p>显而易见的方法是：按三个关键字排序，分别为 l 所在编号，r 所在编号，t。</p><p>t 表示走到了第几次修改操作，设总修改操作为 t.</p><p>设块的大小为 T,则下面三种的复杂度为：</p><p>l:$O(Tm)$,r:$O(Tm+\dfrac{n^2}{T})$,t:$O(\dfrac{n^2t}{T^2})$</p><p>其中，l 单次移动复杂度为 $O(T)$，r 在同一块单次复杂度为 $O(T)$,区间内移动为 $O(n)$，有 $\dfrac{n}{T}$ 个，t 每一小块为 $O(t)$。</p><p>一般 n 和 m 同级别，当 $Tm+\dfrac{n^2}{T}=\dfrac{n^2t}{T}$，即 $Tn=\dfrac{n^2t}{T},T=\sqrt[3]{nt}$，总复杂度最小，为 $O(\sqrt[3]{n^4t})$。</p><h3 id="4-例题"><a href="#4-例题" class="headerlink" title="4. 例题"></a>4. 例题</h3><h4 id="T2：-国家集训队-数颜色-维护队列"><a href="#T2：-国家集训队-数颜色-维护队列" class="headerlink" title="T2：[国家集训队]数颜色 / 维护队列"></a>T2：[国家集训队]数颜色 / 维护队列</h4><p><a href="https://www.luogu.com.cn/problem/P1903">题目传送门 Luogu</a></p><p><a href="https://www.acwing.com/problem/content/2523/">题目传送门 AcWing</a></p><p>上面的模板题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1.5e5</span>+<span class="number">10</span>,M=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id,l,r,t;</span><br><span class="line">&#125;q[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Modify</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> pos,t;</span><br><span class="line">&#125;c[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans[N],cnt[M],n,m,cm,qm,len,a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(re <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x/len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Query &amp;a,<span class="keyword">const</span> Query &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    re <span class="keyword">int</span> i1=<span class="built_in">get</span>(a.l),i2=<span class="built_in">get</span>(b.l);</span><br><span class="line">    re <span class="keyword">int</span> j1=<span class="built_in">get</span>(a.r),j2=<span class="built_in">get</span>(b.r);</span><br><span class="line">    <span class="keyword">if</span> (i1!=i2) <span class="keyword">return</span> i1&lt;i2;</span><br><span class="line">    <span class="keyword">if</span> (j1!=j2) <span class="keyword">return</span> j1&lt;j2;</span><br><span class="line">    <span class="keyword">return</span> a.t&lt;b.t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(re <span class="keyword">int</span> a,<span class="keyword">int</span> &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!cnt[a]) res++;</span><br><span class="line">    cnt[a]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(re <span class="keyword">int</span> a,<span class="keyword">int</span> &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt[a]--;</span><br><span class="line">    <span class="keyword">if</span> (!cnt[a]) res--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(re <span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span> ((c=<span class="built_in">getchar</span>())&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>) ;</span><br><span class="line">    x=c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">while</span> ((c=<span class="built_in">getchar</span>())&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);<span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">read</span>(a[i]);</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        re <span class="keyword">char</span> op[<span class="number">2</span>];re <span class="keyword">int</span> a,b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,op);</span><br><span class="line">        <span class="built_in">read</span>(a);<span class="built_in">read</span>(b);</span><br><span class="line">        <span class="keyword">if</span> (op[<span class="number">0</span>]==<span class="string">&#x27;Q&#x27;</span>) ++qm,q[qm]=(Query)&#123;qm,a,b,cm&#125;;</span><br><span class="line">        <span class="keyword">else</span> ++cm,c[cm]=(Modify)&#123;a,b&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    len=<span class="built_in">pow</span>((<span class="keyword">double</span>)n*cm,<span class="number">1.0</span>/<span class="number">3.0</span>);<span class="comment">//pow((double)n*n,1.0/3.0)</span></span><br><span class="line">    <span class="built_in">sort</span>(q+<span class="number">1</span>,q+qm+<span class="number">1</span>,cmp);</span><br><span class="line">    re <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> k=<span class="number">1</span>,i=<span class="number">1</span>,j=<span class="number">0</span>,tnow=<span class="number">0</span>;k&lt;=qm;++k)</span><br><span class="line">    &#123;</span><br><span class="line">        re <span class="keyword">int</span> id=q[k].id,l=q[k].l,r=q[k].r,t=q[k].t;</span><br><span class="line">        <span class="keyword">while</span> (i&gt;l) <span class="built_in">add</span>(a[--i],res);</span><br><span class="line">        <span class="keyword">while</span> (i&lt;l) <span class="built_in">del</span>(a[i++],res);</span><br><span class="line">        <span class="keyword">while</span> (j&lt;r) <span class="built_in">add</span>(a[++j],res);</span><br><span class="line">        <span class="keyword">while</span> (j&gt;r) <span class="built_in">del</span>(a[j--],res);</span><br><span class="line">        <span class="keyword">while</span> (tnow&lt;t)</span><br><span class="line">        &#123;</span><br><span class="line">            ++tnow;</span><br><span class="line">            <span class="keyword">if</span> (c[tnow].pos&gt;=i&amp;&amp;c[tnow].pos&lt;=j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">del</span>(a[c[tnow].pos],res);</span><br><span class="line">                <span class="built_in">add</span>(c[tnow].t,res);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">swap</span>(a[c[tnow].pos],c[tnow].t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (tnow&gt;t)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (c[tnow].pos&gt;=i&amp;&amp;c[tnow].pos&lt;=j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">del</span>(a[c[tnow].pos],res);</span><br><span class="line">                <span class="built_in">add</span>(c[tnow].t,res);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">swap</span>(a[c[tnow].pos],c[tnow].t);</span><br><span class="line">            tnow--;</span><br><span class="line">        &#125;</span><br><span class="line">        ans[id]=res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=qm;++i) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-回滚莫队"><a href="#5-回滚莫队" class="headerlink" title="5. 回滚莫队"></a>5. 回滚莫队</h3><p>可以发现，有一些莫队，加入操作很好操作，但是删除却不是，所以我们要使用回滚莫队。</p><p>我们还是以一道题来看：</p><h4 id="T2：-JOI2013-历史研究"><a href="#T2：-JOI2013-历史研究" class="headerlink" title="T2：[JOI2013]历史研究"></a>T2：[JOI2013]历史研究</h4><p><a href="https://www.luogu.com.cn/problem/AT1219">题目传送门 Luogu(AtCoder-RemoteJudge)</a></p><p><a href="https://www.acwing.com/problem/content/2525/">题目传送门 AcWing</a></p><p>这道题要维护重要度的最大值，由于如果删除，不好维护最大值。</p><p>处理当前块的询问。</p><p>如果右端点在该块里，直接暴力即可，复杂度为 $O(\sqrt n)$。</p><p>如果不在的话，维护下一块开始节点开始的 cnt，的由于右端点是递增，走到每一个询问时直接再暴力加入块内的长度暴力即可。</p><p>画个图，其实就是同一块内的每个询问单独处理，块外的一起处理。</p><p>可以看代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id,l,r;</span><br><span class="line">&#125;q[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[N],n,len,m,cnt[N];</span><br><span class="line">ll ans[N];</span><br><span class="line">vector &lt;<span class="keyword">int</span>&gt; nums;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x/len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Query &amp;a,<span class="keyword">const</span> Query &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="built_in">get</span>(a.l),j=<span class="built_in">get</span>(b.l);</span><br><span class="line">    <span class="keyword">if</span> (i!=j) <span class="keyword">return</span> i&lt;j;</span><br><span class="line">    <span class="keyword">return</span> a.r&lt;b.r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,ll &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt[a]++;</span><br><span class="line">    res=<span class="built_in">max</span>(res,(ll)nums[a]*cnt[a]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,a+i),nums.<span class="built_in">push_back</span>(a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;q[i].l,&amp;q[i].r);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) q[i].id=i;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>());</span><br><span class="line">    nums.<span class="built_in">erase</span>(<span class="built_in">unique</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>()),nums.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) a[i]=<span class="built_in">lower_bound</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>(),a[i])-nums.<span class="built_in">begin</span>();</span><br><span class="line">    </span><br><span class="line">    len=<span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="built_in">sort</span>(q+<span class="number">1</span>,q+m+<span class="number">1</span>,cmp);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x=<span class="number">1</span>;x&lt;=m;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> y=x;</span><br><span class="line">        <span class="keyword">while</span> (y&lt;=m&amp;&amp;<span class="built_in">get</span>(q[y].l)==<span class="built_in">get</span>(q[x].l)) y++;</span><br><span class="line">        <span class="keyword">int</span> node=<span class="built_in">get</span>(q[x].l)*len+len<span class="number">-1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (x&lt;=m&amp;&amp;q[x].r&lt;=node)</span><br><span class="line">        &#123;</span><br><span class="line">            ll res=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=q[x].l;i&lt;=q[x].r;++i) <span class="built_in">add</span>(a[i],res);</span><br><span class="line">            ans[q[x].id]=res;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=q[x].l;i&lt;=q[x].r;++i) cnt[a[i]]--;</span><br><span class="line">            x++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ll res=<span class="number">0</span>;<span class="keyword">int</span> j=node;</span><br><span class="line">        <span class="keyword">while</span> (x&lt;y)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> l=node+<span class="number">1</span>,r=q[x].r;</span><br><span class="line">            <span class="keyword">while</span> (j&lt;r) <span class="built_in">add</span>(a[++j],res);</span><br><span class="line">            ll bac=res;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k=q[x].l;k&lt;=node;++k) <span class="built_in">add</span>(a[k],res);</span><br><span class="line">            ans[q[x].id]=res;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k=q[x].l;k&lt;=node;++k) cnt[a[k]]--;</span><br><span class="line">            res=bac;</span><br><span class="line">            x++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span> cnt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-树上莫队"><a href="#6-树上莫队" class="headerlink" title="6. 树上莫队"></a>6. 树上莫队</h3><h4 id="T3：树上计数2"><a href="#T3：树上计数2" class="headerlink" title="T3：树上计数2"></a>T3：树上计数2</h4><p><a href="https://www.acwing.com/problem/content/2536/">题目传送门 AcWing</a></p><p>和 <a href="https://www.acwing.com/problem/content/2494/">HH 的项链</a> 类似，这也是统计当前不同的个数。</p><p>主要区别是怎样在树上操作？</p><p>这里我们要使用一种序列：欧拉序列。</p><p>欧拉序列实现过程就是先写当前节点，遍历完子树后，写一遍当前序列。</p><p>很明显的性质是：每一个点都写了两遍。</p><p>怎样将树上的序列转化为欧拉序列呢？</p><p>对于每一个节点，我们记录两个：$first[u]$ 表示第一次出现的位置，$last[u]$ 表示最后一次出现的位置。</p><p>现在要找 $(x,y)(first[x]&lt;fisrt[y])$ 的路径，分为以下两种情况：</p><ol><li>$\operatorname{lca}(x,y)=x$ ，则 $[first[x],first[y]]$ 序列中出现一次的点。</li><li>$\operatorname{lca}(x,y)\not=x$，则 $[last[x],first[y]]$ 中出现一次的点加上 $\operatorname{lca}(x,y)$ 就是该点。</li></ol><p>于是，我们就变成的统计在一个序列中，只出现一次的点不同颜色的点的个数。</p><p>在原来的莫队上，我们可以再加一个数组，表示出现了几次。</p><p>还有，不论是 add 还是 del，都是对出现次数异或 1。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>,M=<span class="number">2e5</span>+<span class="number">10</span>,L=<span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id,l,r,L;</span><br><span class="line">&#125;q[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[N],n,m,len,fi[N],la[N],top,dep[N];</span><br><span class="line"><span class="keyword">int</span> euler[M],ans[N];</span><br><span class="line"><span class="keyword">int</span> cnt[N],tim[N];</span><br><span class="line"><span class="keyword">int</span> h[N],e[M],ne[M],idx,f[N][L+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">vector &lt;<span class="keyword">int</span>&gt; nums;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x/len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Query &amp;a,<span class="keyword">const</span> Query &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="built_in">get</span>(a.l),j=<span class="built_in">get</span>(b.l);</span><br><span class="line">    <span class="keyword">if</span> (i!=j) <span class="keyword">return</span> i&lt;j;</span><br><span class="line">    <span class="keyword">return</span> a.r&lt;b.r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx]=b,ne[idx]=h[a],h[a]=idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    f[x][<span class="number">0</span>]=fa;</span><br><span class="line">    fi[x]=++top;euler[top]=x;</span><br><span class="line">    dep[x]=dep[fa]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=L;++i) f[x][i]=f[f[x][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=h[x];~i;i=ne[i])</span><br><span class="line">        <span class="keyword">if</span> (!f[e[i]][<span class="number">0</span>]) <span class="built_in">dfs</span>(e[i],x);</span><br><span class="line">    la[x]=++top;euler[top]=x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dep[x]&lt;dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=L;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">        <span class="keyword">if</span> (dep[f[x][i]]&gt;=dep[y]) x=f[x][i];</span><br><span class="line">    <span class="keyword">if</span> (x==y) <span class="keyword">return</span> x;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=L;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">        <span class="keyword">if</span> (f[x][i]!=f[y][i]) x=f[x][i],y=f[y][i];</span><br><span class="line">    <span class="keyword">return</span> f[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tim[pos]^=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (tim[pos])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!cnt[a[pos]]) res++;</span><br><span class="line">        cnt[a[pos]]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cnt[a[pos]]--;</span><br><span class="line">        <span class="keyword">if</span> (!cnt[a[pos]]) res--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) nums.<span class="built_in">push_back</span>(a[i]);</span><br><span class="line">    <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>());</span><br><span class="line">    nums.<span class="built_in">erase</span>(<span class="built_in">unique</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>()),nums.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) a[i]=<span class="built_in">lower_bound</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>(),a[i])-nums.<span class="built_in">begin</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,a,b;i&lt;n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">        <span class="built_in">add_edge</span>(a,b);<span class="built_in">add_edge</span>(b,a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    len=<span class="built_in">sqrt</span>(top);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,a,b;i&lt;=m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">        <span class="keyword">if</span> (fi[a]&gt;fi[b]) <span class="built_in">swap</span>(a,b);</span><br><span class="line">        <span class="keyword">int</span> l=<span class="built_in">lca</span>(a,b);</span><br><span class="line">        <span class="keyword">if</span> (l==a) q[i]=(Query)&#123;i,fi[a],fi[b]&#125;;</span><br><span class="line">        <span class="keyword">else</span> q[i]=(Query)&#123;i,la[a],fi[b],l&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(q,q+m,cmp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>,i=<span class="number">1</span>,j=<span class="number">0</span>,res=<span class="number">0</span>;k&lt;=m;++k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> l=q[k].l,r=q[k].r,id=q[k].id,p=q[k].L;</span><br><span class="line">        <span class="keyword">while</span> (i&gt;l) <span class="built_in">add</span>(euler[--i],res);</span><br><span class="line">        <span class="keyword">while</span> (i&lt;l) <span class="built_in">add</span>(euler[i++],res);</span><br><span class="line">        <span class="keyword">while</span> (j&lt;r) <span class="built_in">add</span>(euler[++j],res);</span><br><span class="line">        <span class="keyword">while</span> (j&gt;r) <span class="built_in">add</span>(euler[j--],res);</span><br><span class="line">        <span class="keyword">if</span> (p) <span class="built_in">add</span>(p,res);</span><br><span class="line">        ans[id]=res;</span><br><span class="line">        <span class="keyword">if</span> (p) <span class="built_in">add</span>(p,res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-二次离线莫队"><a href="#7-二次离线莫队" class="headerlink" title="7. 二次离线莫队"></a>7. 二次离线莫队</h3><h4 id="T4：二次离线莫队"><a href="#T4：二次离线莫队" class="headerlink" title="T4：二次离线莫队"></a>T4：二次离线莫队</h4><p><a href="https://www.luogu.com.cn/problem/P4887">题目传送门 Luogu</a></p><p><a href="https://www.acwing.com/problem/content/2537/">题目传送门 AcWing</a></p><p>二次离线，顾名思义，就是一次后再离线一次。</p><p>假设要从 $[L,R]$ 到 $[l,r]$，且 $r&gt;R$。</p><p>我们要将 $[L,R]$ 扩展到 $[L,R+1]$，需要知道 $[L,R]$ 与 R+1 的配对数。</p><p>又可以改为前缀和 $ans{[L,R]}=s[R]-s[L-1]$。</p><p>首先考虑第一种询问。</p><p>其中 $s[R]$ 表示与 R+1 的配对个数，可以改为 $f(R)$。</p><p>可以改写为 $g(x)$，表示前 i 个数与 x 配对的数（注意，i 一直在变化）。</p><p>现在考虑如何计算，可以发现其实就是开始有 k 个 1 的数与当前数进行异或，得到的数就是需要更新的数。</p><p>具体的，如果用 $a_i$ 表示所有是 k 个一的数，x 是当前数，那么 $a_i$^x 就是我们要找的 $b_i$，因为 $b_i$^x=$a_i$。</p><p>现在我们就维护好了 $g(x)$，而且可以一直更新。</p><p>下面，我们考虑维护 $s[L-1]$。</p><p>问题转化为 $[1,L-1]$ 与 $[R+1,r]$ 的配对数。</p><p>进行第二次离线，我们首先将所有的询问存起来。</p><p>观察到 $[1,L-1]$ 只有一个参量，我们考虑枚举该参量并暴力求。</p><p>像上面一样，我们也同时维护 $g(x)$，表示前 i 个数与 x 的配对数。</p><p>该询问的复杂度就是 $O(r-R)$，是区间长度的线性复杂度。总时间复杂度为 $O(n\sqrt n)$。</p><p>至此，得到解决！</p><p>其他的变化，请读者自行推导。</p><p>当然也可以看代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>,M=(<span class="number">1</span>&lt;&lt;<span class="number">14</span>)+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f[N],g[M];</span><br><span class="line"><span class="keyword">int</span> a[N],n,m,k,len;</span><br><span class="line">ll ans[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id,l,r;</span><br><span class="line">    ll res;</span><br><span class="line">&#125;q[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Range</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id,l,r,t;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">vector &lt;Range&gt; rg[N];</span><br><span class="line">vector &lt;<span class="keyword">int</span>&gt; nums;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x/len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Query &amp;a,<span class="keyword">const</span> Query &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="built_in">get</span>(a.l),j=<span class="built_in">get</span>(b.l);</span><br><span class="line">    <span class="keyword">if</span> (i!=j) <span class="keyword">return</span> i&lt;j;</span><br><span class="line">    <span class="keyword">return</span> a.r&lt;b.r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_count</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x)</span><br><span class="line">    &#123;</span><br><span class="line">        res++;</span><br><span class="line">        x-=<span class="built_in">lowbit</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,a+i);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) q[i].id=i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;q[i].l,&amp;q[i].r);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="number">1</span>&lt;&lt;<span class="number">14</span>);++i)</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">get_count</span>(i)==k) nums.<span class="built_in">push_back</span>(i);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;nums.<span class="built_in">size</span>();++j) g[nums[j]^a[i]]++;</span><br><span class="line">        f[i]=g[a[i+<span class="number">1</span>]];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    len=<span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="built_in">sort</span>(q+<span class="number">1</span>,q+m+<span class="number">1</span>,cmp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,L=<span class="number">1</span>,R=<span class="number">0</span>;i&lt;=m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> l=q[i].l,r=q[i].r;</span><br><span class="line">        ll &amp;res=q[i].res;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (R&gt;r) rg[L<span class="number">-1</span>].<span class="built_in">push_back</span>((Range)&#123;i,r+<span class="number">1</span>,R,<span class="number">1</span>&#125;);</span><br><span class="line">        <span class="keyword">while</span> (R&gt;r) res-=f[--R];</span><br><span class="line">        <span class="keyword">if</span> (R&lt;r) rg[L<span class="number">-1</span>].<span class="built_in">push_back</span>((Range)&#123;i,R+<span class="number">1</span>,r,<span class="number">-1</span>&#125;);</span><br><span class="line">        <span class="keyword">while</span> (R&lt;r) res+=f[R++];</span><br><span class="line">        <span class="keyword">if</span> (L&gt;l) rg[R].<span class="built_in">push_back</span>((Range)&#123;i,l,L<span class="number">-1</span>,<span class="number">1</span>&#125;);</span><br><span class="line">        <span class="keyword">while</span> (L&gt;l) res-=f[L<span class="number">-2</span>]+!k,L--;</span><br><span class="line">        <span class="keyword">if</span> (L&lt;l) rg[R].<span class="built_in">push_back</span>((Range)&#123;i,L,l<span class="number">-1</span>,<span class="number">-1</span>&#125;);</span><br><span class="line">        <span class="keyword">while</span> (L&lt;l) res+=f[L<span class="number">-1</span>]+!k,L++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(g,<span class="number">0</span>,<span class="keyword">sizeof</span> g);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;nums.<span class="built_in">size</span>();++j) g[nums[j]^a[i]]++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;rg[i].<span class="built_in">size</span>();++j)</span><br><span class="line">        &#123;</span><br><span class="line">            Range &amp;tmp=rg[i][j];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x=tmp.l;x&lt;=tmp.r;++x) q[tmp.id].res+=g[a[x]]*tmp.t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=m;++i) q[i].res+=q[i<span class="number">-1</span>].res;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) ans[q[i].id]=q[i].res;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;离线的区间统计一类问题的利器。&lt;/p&gt;</summary>
    
    
    
    
    <category term="数据结构" scheme="https://mydcwfy.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="莫队" scheme="https://mydcwfy.github.io/tags/%E8%8E%AB%E9%98%9F/"/>
    
  </entry>
  
  <entry>
    <title>树链剖分</title>
    <link href="https://mydcwfy.github.io/2021/12/17/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
    <id>https://mydcwfy.github.io/2021/12/17/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/</id>
    <published>2021-12-17T12:24:08.000Z</published>
    <updated>2021-12-17T12:25:04.580Z</updated>
    
    <content type="html"><![CDATA[<p>可以将树上操作转化为区间操作。</p><span id="more"></span><h2 id="树链剖分"><a href="#树链剖分" class="headerlink" title="树链剖分"></a>树链剖分</h2><h3 id="1-主要思想"><a href="#1-主要思想" class="headerlink" title="1. 主要思想"></a>1. 主要思想</h3><p>通过给每一个节点一个重新的编号，使任意一条路径都变为不超过 $\log n$ 个连续区间。</p><p>于是，就可以<strong>将树上操作转化为区间操作</strong>。</p><p>并且是维护每一个点。</p><p>然后，一般使用线段树 or 树状数组实现。</p><h3 id="2-核心"><a href="#2-核心" class="headerlink" title="2. 核心"></a>2. 核心</h3><p>一般来说，使用轻重链剖分。</p><p>将一个节点的儿子分为重儿子与轻儿子。</p><p>重儿子是指儿子所在子树最大的儿子，其余的为轻儿子。</p><p>如果有相同的话，任取一个即可。</p><p>重边就是指节点到重儿子的边。</p><p>重链是指极大的重边组成的路径。特别的，单个节点也可以做一条重链。</p><p>这样操作之后，每一个节点都在一条重链中。</p><p>我们在建立线段树时（即剖分时），要优先遍历重儿子。</p><p>这样就可以保证重链所在的线段树是连续的区间。</p><p>于是，任意一条路径都可以分为 $\log n$ 个区间。</p><p>这里先不证明了，可以自行理解。</p><h3 id="3-具体流程"><a href="#3-具体流程" class="headerlink" title="3. 具体流程"></a>3. 具体流程</h3><h4 id="1）预处理"><a href="#1）预处理" class="headerlink" title="1）预处理"></a>1）预处理</h4><p>首先遍历一遍，记录 size，并计算重儿子。</p><p>第二次，将树上节点按照重儿子优先的次序遍历，并转化到线段树上。</p><h4 id="2）询问-更改"><a href="#2）询问-更改" class="headerlink" title="2）询问/更改"></a>2）询问/更改</h4><p>对于两个节点，如果他们不在同一重链，那么选择 $top$ 深度较大的点向上跳（即到 $x$ 到 $top$ 进行区间修改，在同一重链），直到在同一重链，直接区间修改。</p><p>如果还有不懂的，可以再看一下前面的解释结合后面的代码进行理解。</p><h3 id="4-例题"><a href="#4-例题" class="headerlink" title="4. 例题"></a>4. 例题</h3><h4 id="T1：树链剖分"><a href="#T1：树链剖分" class="headerlink" title="T1：树链剖分"></a>T1：树链剖分</h4><p><a href="https://www.luogu.com.cn/problem/P3384">题目传送门 Luogu</a></p><p><a href="https://www.acwing.com/problem/content/2570/">题目传送门 AcWing</a></p><p>模板题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> l(p) (p&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> r(p) (p&lt;&lt;1|1)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>,M=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> h[N],e[M],ne[M],idx;</span><br><span class="line"><span class="keyword">int</span> sz[N],dep[N],son[N],f[N],top[N];</span><br><span class="line"><span class="keyword">int</span> id[N],nw[N],cnt,a[N];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    ll lt,sum;</span><br><span class="line">&#125;tr[<span class="number">4</span>*N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx]=b,ne[idx]=h[a],h[a]=idx++;</span><br><span class="line">    e[idx]=a,ne[idx]=h[b],h[b]=idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa,<span class="keyword">int</span> depth)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    f[x]=fa;</span><br><span class="line">    vis[x]=<span class="number">1</span>;sz[x]=<span class="number">1</span>;dep[x]=depth; </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=h[x];~i;i=ne[i])</span><br><span class="line">        <span class="keyword">if</span> (!vis[e[i]])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">dfs1</span>(e[i],x,depth+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (sz[e[i]]&gt;sz[son[x]]) son[x]=e[i];</span><br><span class="line">            sz[x]+=sz[e[i]];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    id[x]=++cnt,nw[cnt]=x,top[x]=t;</span><br><span class="line">    <span class="keyword">if</span> (!son[x]) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">dfs2</span>(son[x],t);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=h[x];~i;i=ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (e[i]==f[x]||e[i]==son[x]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs2</span>(e[i],e[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//PreWork</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[p].sum=tr[<span class="built_in">l</span>(p)].sum+tr[<span class="built_in">r</span>(p)].sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[p].lt==<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    Node &amp;rt=tr[p],&amp;le=tr[<span class="built_in">l</span>(p)],&amp;ri=tr[<span class="built_in">r</span>(p)];</span><br><span class="line">    le.sum+=(le.r-le.l+<span class="number">1</span>)*rt.lt;le.lt+=rt.lt;</span><br><span class="line">    ri.sum+=(ri.r-ri.l+<span class="number">1</span>)*rt.lt;ri.lt+=rt.lt;</span><br><span class="line">    rt.lt=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[p]=(Node)&#123;l,r&#125;;</span><br><span class="line">    <span class="keyword">if</span> (l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[p].sum=a[nw[l]];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(<span class="built_in">l</span>(p),l,mid);</span><br><span class="line">    <span class="built_in">build</span>(<span class="built_in">r</span>(p),mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[p].l&gt;=l&amp;&amp;tr[p].r&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[p].lt+=x;</span><br><span class="line">        tr[p].sum+=x*(tr[p].r-tr[p].l+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(p);</span><br><span class="line">    <span class="keyword">int</span> mid=tr[p].l+tr[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (l&lt;=mid) <span class="built_in">modify</span>(<span class="built_in">l</span>(p),l,r,x);</span><br><span class="line">    <span class="keyword">if</span> (r&gt;mid) <span class="built_in">modify</span>(<span class="built_in">r</span>(p),l,r,x);</span><br><span class="line">    <span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[p].l&gt;=l&amp;&amp;tr[p].r&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> tr[p].sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(p);</span><br><span class="line">    <span class="keyword">int</span> mid=tr[p].l+tr[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (l&lt;=mid) ans+=<span class="built_in">query</span>(<span class="built_in">l</span>(p),l,r);</span><br><span class="line">    <span class="keyword">if</span> (r&gt;mid) ans+=<span class="built_in">query</span>(<span class="built_in">r</span>(p),l,r);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//SegmentTree</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update_path</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (top[u]!=top[v])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[top[u]]&lt;dep[top[v]]) <span class="built_in">swap</span>(u,v);</span><br><span class="line">        <span class="built_in">modify</span>(<span class="number">1</span>,id[top[u]],id[u],x);</span><br><span class="line">        u=f[top[u]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">modify</span>(<span class="number">1</span>,<span class="built_in">min</span>(id[u],id[v]),<span class="built_in">max</span>(id[u],id[v]),x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update_tree</span><span class="params">(<span class="keyword">int</span> u,ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">modify</span>(<span class="number">1</span>,id[u],id[u]+sz[u]<span class="number">-1</span>,x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">query_path</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (top[u]!=top[v])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[top[u]]&lt;dep[top[v]]) <span class="built_in">swap</span>(u,v);</span><br><span class="line">        ans+=<span class="built_in">query</span>(<span class="number">1</span>,id[top[u]],id[u]);</span><br><span class="line">        u=f[top[u]];</span><br><span class="line">    &#125;</span><br><span class="line">    ans+=<span class="built_in">query</span>(<span class="number">1</span>,<span class="built_in">min</span>(id[u],id[v]),<span class="built_in">max</span>(id[u],id[v]));</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">query_tree</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">query</span>(<span class="number">1</span>,id[u],id[u]+sz[u]<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">    ll p;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %lld&quot;</span>,&amp;n,&amp;m,&amp;r,&amp;p);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,a,b;i&lt;n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">        <span class="built_in">add</span>(a,b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs1</span>(r,<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">dfs2</span>(r,r);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">int</span> op,u,v;</span><br><span class="line">    ll k;</span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;op,&amp;u);</span><br><span class="line">        <span class="keyword">if</span> (op==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %lld&quot;</span>,&amp;v,&amp;k);</span><br><span class="line">            <span class="built_in">update_path</span>(u,v,k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op==<span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;k);</span><br><span class="line">            <span class="built_in">update_tree</span>(u,k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op==<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;v);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">query_path</span>(u,v)%p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op==<span class="number">4</span>) <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">query_tree</span>(u)%p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T2：-NOI2015-软件包管理器"><a href="#T2：-NOI2015-软件包管理器" class="headerlink" title="T2：[NOI2015]软件包管理器"></a>T2：[NOI2015]软件包管理器</h4><p><a href="https://www.luogu.com.cn/problem/P2146">题目传送门 Luogu</a></p><p><a href="https://www.acwing.com/problem/content/920/">题目传送门 AcWing</a></p><p>首先，经过冗长的描述，我们可以知道该依赖关系构成一棵树。</p><p>当要卸载一个软件时，就是将该子树的所有节点状态改为 0。</p><p>如果要安装某个节点 x，等价于将根节点到 x 的路径上的节点状态改为 1。</p><p>输出就是所维护线段树的根节点的信息。</p><p>几乎就是模板题了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> l(p) (p&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> r(p) (p&lt;&lt;1|1)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>,M=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> h[N],e[M],ne[M],idx;</span><br><span class="line"><span class="keyword">int</span> sz[N],son[N],dep[N],f[N];</span><br><span class="line"><span class="keyword">int</span> id[N],nw[N],cnt,top[N];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    <span class="keyword">int</span> sum,flag;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _l,<span class="keyword">int</span> _r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        l=_l;r=_r;</span><br><span class="line">        sum=<span class="number">0</span>;flag=<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;tr[<span class="number">4</span>*N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx]=b,ne[idx]=h[a],h[a]=idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa,<span class="keyword">int</span> depth)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    f[x]=fa;dep[x]=depth;sz[x]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=h[x];~i;i=ne[i])</span><br><span class="line">        <span class="keyword">if</span> (e[i]!=fa)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">dfs1</span>(e[i],x,depth+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (sz[e[i]]&gt;sz[son[x]]) son[x]=e[i];</span><br><span class="line">            sz[x]+=sz[e[i]];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    id[x]=++cnt,nw[cnt]=x,top[x]=t;</span><br><span class="line">    <span class="keyword">if</span> (!son[x]) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">dfs2</span>(son[x],t);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=h[x];~i;i=ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (e[i]==son[x]||e[i]==f[x]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs2</span>(e[i],e[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Prework</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[p].sum=tr[<span class="built_in">l</span>(p)].sum+tr[<span class="built_in">r</span>(p)].sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (~tr[p].flag)</span><br><span class="line">    &#123;</span><br><span class="line">        Node &amp;rt=tr[p],&amp;le=tr[<span class="built_in">l</span>(p)],&amp;ri=tr[<span class="built_in">r</span>(p)];</span><br><span class="line">        le.flag=rt.flag,le.sum=(le.r-le.l+<span class="number">1</span>)*rt.flag;</span><br><span class="line">        ri.flag=rt.flag,ri.sum=(ri.r-ri.l+<span class="number">1</span>)*rt.flag;</span><br><span class="line">        rt.flag=<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[p].<span class="built_in">init</span>(l,r);</span><br><span class="line">    <span class="keyword">if</span> (l==r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(<span class="built_in">l</span>(p),l,mid);</span><br><span class="line">    <span class="built_in">build</span>(<span class="built_in">r</span>(p),mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[p].l&gt;=l&amp;&amp;tr[p].r&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[p].flag=x;</span><br><span class="line">        tr[p].sum=x*(tr[p].r-tr[p].l+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(p);</span><br><span class="line">    <span class="keyword">int</span> mid=tr[p].l+tr[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (l&lt;=mid) <span class="built_in">modify</span>(<span class="built_in">l</span>(p),l,r,x);</span><br><span class="line">    <span class="keyword">if</span> (r&gt;mid) <span class="built_in">modify</span>(<span class="built_in">r</span>(p),l,r,x);</span><br><span class="line">    <span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Segment Tree</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify_path</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (top[u]!=top[v])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[top[u]]&lt;dep[top[v]]) <span class="built_in">swap</span>(u,v);</span><br><span class="line">        <span class="built_in">modify</span>(<span class="number">1</span>,id[top[u]],id[u],x);</span><br><span class="line">        u=f[top[u]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (id[u]&gt;id[v]) <span class="built_in">swap</span>(u,v);</span><br><span class="line">    <span class="built_in">modify</span>(<span class="number">1</span>,id[u],id[v],x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>,f;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;f);f++;</span><br><span class="line">        <span class="built_in">add</span>(f,i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line">    <span class="keyword">char</span> op[<span class="number">15</span>];<span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s%d&quot;</span>,op,&amp;x);x++;</span><br><span class="line">        <span class="keyword">int</span> last=tr[<span class="number">1</span>].sum;</span><br><span class="line">        <span class="keyword">if</span> (op[<span class="number">0</span>]==<span class="string">&#x27;u&#x27;</span>) <span class="built_in">modify</span>(<span class="number">1</span>,id[x],id[x]+sz[x]<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">modify_path</span>(<span class="number">1</span>,x,<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">abs</span>(tr[<span class="number">1</span>].sum-last));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;可以将树上操作转化为区间操作。&lt;/p&gt;</summary>
    
    
    
    
    <category term="数据结构" scheme="https://mydcwfy.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="树链剖分" scheme="https://mydcwfy.github.io/tags/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>左偏树</title>
    <link href="https://mydcwfy.github.io/2021/12/17/%E5%B7%A6%E5%81%8F%E6%A0%91/"/>
    <id>https://mydcwfy.github.io/2021/12/17/%E5%B7%A6%E5%81%8F%E6%A0%91/</id>
    <published>2021-12-17T12:21:27.000Z</published>
    <updated>2021-12-19T08:18:47.874Z</updated>
    
    <content type="html"><![CDATA[<p>又叫可合并堆。</p><span id="more"></span><h2 id="左偏树"><a href="#左偏树" class="headerlink" title="左偏树"></a>左偏树</h2><h3 id="1-本质与基本功能"><a href="#1-本质与基本功能" class="headerlink" title="1. 本质与基本功能"></a>1. 本质与基本功能</h3><p>左偏树本质是堆。</p><p>支持功能：</p><ol><li>插入一个数 $O(\log n)$</li><li>求最小值 $O(1)$</li><li>删除最小值 $O(\log n)$</li><li>合并两棵左偏树 $O(\log n)$</li></ol><h3 id="2-维护信息"><a href="#2-维护信息" class="headerlink" title="2. 维护信息"></a>2. 维护信息</h3><ol><li>值 val</li><li>到最近空节点的距离 dis</li></ol><p>左偏树必须满足：$dis(leftchild) \geq dis(rightchild)$</p><p>下面我们证明这样一个性质：<br>$$<br>dis(root)\leq \log n<br>$$<br>这个等价于 $f(k)=2^k-1$，其中 $f(k)$ 表示当根节点的距离为 k 时，包含的最少节点个数。</p><p>可以使用数学归纳法。</p><p>对于 $k=1,f(k)-2^k-1$。</p><p>$f(k)=f(k’)+(2^{k-1}+1)(k’\geq k-1)$，其中 $f (k’)$ 是左子树的最少节点个数。</p><p>可以发现 f 函数是单调递增的，则 $f(k’)\geq f(k-1)=2^{k-1}+1$，带入原式即可。</p><h3 id="3-特殊函数——merge"><a href="#3-特殊函数——merge" class="headerlink" title="3. 特殊函数——merge"></a>3. 特殊函数——merge</h3><p>由于前 3 个操作都比较简单，且是堆的基本操作，所以只讲最后一个。</p><p>$\operatorname{merge}(x,y)$ 直接进入较大 $dis$ 的节点的右子树，直到为空，然后并上去即可。</p><p>注意回溯时要注意维护左偏树。</p><h3 id="4-例题"><a href="#4-例题" class="headerlink" title="4. 例题"></a>4. 例题</h3><h4 id="T1：左偏树（可并堆）"><a href="#T1：左偏树（可并堆）" class="headerlink" title="T1：左偏树（可并堆）"></a>T1：左偏树（可并堆）</h4><p><a href="https://www.luogu.com.cn/problem/P3377">题目传送门 Luogu</a></p><p><a href="https://www.acwing.com/problem/content/2716/">题目传送门 AcWing</a></p><p>可以使用并查集来维护数之间的合并关系。</p><p>AcWing 不需讨论已被删除的操作。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">10</span>,INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,v,p,dis;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> l(x) tr[x].l</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> r(x) tr[x].r</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> v(x) tr[x].v</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> p(x) tr[x].p</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> d(x) tr[x].dis</span></span><br><span class="line">&#125;tr[N];</span><br><span class="line"><span class="keyword">int</span> idx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">v</span>(a)!=<span class="built_in">v</span>(b)) <span class="keyword">return</span> <span class="built_in">v</span>(a)&lt;<span class="built_in">v</span>(b);</span><br><span class="line">    <span class="keyword">return</span> a&lt;b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!a) <span class="keyword">return</span> b;</span><br><span class="line">    <span class="keyword">if</span> (!b) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">cmp</span>(b,a)) <span class="built_in">swap</span>(a,b);</span><br><span class="line">    <span class="built_in">r</span>(a)=<span class="built_in">merge</span>(<span class="built_in">r</span>(a),b);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">d</span>(<span class="built_in">r</span>(a))&gt;<span class="built_in">d</span>(<span class="built_in">l</span>(a))) <span class="built_in">swap</span>(<span class="built_in">r</span>(a),<span class="built_in">l</span>(a));</span><br><span class="line">    <span class="built_in">d</span>(a)=<span class="built_in">d</span>(<span class="built_in">r</span>(a))+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">p</span>(x)!=x) <span class="built_in">p</span>(x)=<span class="built_in">find</span>(<span class="built_in">p</span>(x));</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">p</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="built_in">v</span>(<span class="number">0</span>)=INF;</span><br><span class="line">    <span class="keyword">while</span> (n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t,x,y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;t,&amp;x);</span><br><span class="line">        <span class="keyword">if</span> (t==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">v</span>(++idx)=x;</span><br><span class="line">            <span class="built_in">d</span>(idx)=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">p</span>(idx)=idx;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (t==<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;y);</span><br><span class="line">            x=<span class="built_in">find</span>(x);y=<span class="built_in">find</span>(y);</span><br><span class="line">            <span class="keyword">if</span> (x!=y)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">cmp</span>(y,x)) <span class="built_in">swap</span>(x,y);</span><br><span class="line">                <span class="built_in">p</span>(y)=x;</span><br><span class="line">                <span class="built_in">merge</span>(x,y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (t==<span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">v</span>(<span class="built_in">find</span>(x)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (t==<span class="number">4</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            x=<span class="built_in">find</span>(x);</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">cmp</span>(<span class="built_in">r</span>(x),<span class="built_in">l</span>(x))) <span class="built_in">swap</span>(<span class="built_in">l</span>(x),<span class="built_in">r</span>(x));</span><br><span class="line">            <span class="built_in">p</span>(x)=<span class="built_in">l</span>(x),<span class="built_in">p</span>(<span class="built_in">l</span>(x))=<span class="built_in">l</span>(x);</span><br><span class="line">            <span class="built_in">merge</span>(<span class="built_in">l</span>(x),<span class="built_in">r</span>(x));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而 Luogu 不同，处理起来略显麻烦。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">10</span>,INF=<span class="number">0x7fffffff</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,v,p,dis;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> l(x) tr[x].l</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> r(x) tr[x].r</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> v(x) tr[x].v</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> p(x) tr[x].p</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> d(x) tr[x].dis</span></span><br><span class="line">&#125;tr[N];</span><br><span class="line"><span class="keyword">int</span> idx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">v</span>(a)!=<span class="built_in">v</span>(b)) <span class="keyword">return</span> <span class="built_in">v</span>(a)&lt;<span class="built_in">v</span>(b);</span><br><span class="line">    <span class="keyword">return</span> a&lt;b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!a) <span class="keyword">return</span> b;</span><br><span class="line">    <span class="keyword">if</span> (!b) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">cmp</span>(b,a)) <span class="built_in">swap</span>(a,b);</span><br><span class="line">    <span class="built_in">r</span>(a)=<span class="built_in">merge</span>(<span class="built_in">r</span>(a),b);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">d</span>(<span class="built_in">r</span>(a))&gt;<span class="built_in">d</span>(<span class="built_in">l</span>(a))) <span class="built_in">swap</span>(<span class="built_in">r</span>(a),<span class="built_in">l</span>(a));</span><br><span class="line">    <span class="built_in">d</span>(a)=<span class="built_in">d</span>(<span class="built_in">r</span>(a))+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">p</span>(x)!=x) <span class="built_in">p</span>(x)=<span class="built_in">find</span>(<span class="built_in">p</span>(x));</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">p</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>,x;i&lt;n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">        <span class="built_in">v</span>(++idx)=x;</span><br><span class="line">        <span class="built_in">d</span>(idx)=<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">p</span>(idx)=idx;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">v</span>(<span class="number">0</span>)=INF;</span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t,x,y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;t,&amp;x);</span><br><span class="line">        <span class="keyword">if</span> (t==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;y);</span><br><span class="line">            <span class="keyword">if</span> (x!=y&amp;&amp;<span class="built_in">v</span>(x)!=INF&amp;&amp;<span class="built_in">v</span>(y)!=INF)</span><br><span class="line">            &#123;</span><br><span class="line">                x=<span class="built_in">find</span>(x);y=<span class="built_in">find</span>(y);</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">cmp</span>(y,x)) <span class="built_in">swap</span>(x,y);</span><br><span class="line">                <span class="built_in">p</span>(y)=x;</span><br><span class="line">                <span class="built_in">merge</span>(x,y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (t==<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">v</span>(x)==INF)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">v</span>(<span class="built_in">find</span>(x)));</span><br><span class="line">            x=<span class="built_in">find</span>(x);</span><br><span class="line">            <span class="built_in">v</span>(x)=INF;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">cmp</span>(<span class="built_in">r</span>(x),<span class="built_in">l</span>(x))) <span class="built_in">swap</span>(<span class="built_in">l</span>(x),<span class="built_in">r</span>(x));</span><br><span class="line">            <span class="built_in">p</span>(x)=<span class="built_in">l</span>(x),<span class="built_in">p</span>(<span class="built_in">l</span>(x))=<span class="built_in">l</span>(x);</span><br><span class="line">            <span class="built_in">merge</span>(<span class="built_in">l</span>(x),<span class="built_in">r</span>(x));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T2：数字序列"><a href="#T2：数字序列" class="headerlink" title="T2：数字序列"></a>T2：数字序列</h4><p><a href="https://www.luogu.com.cn/problem/P4331">题目传送门 Luogu</a></p><p><a href="https://www.acwing.com/problem/content/2727/">题目传送门 AcWing</a></p><p>首先，把每个数都减一个 $i$，即 $a[i]\leftarrow a[i]-i,b[i]\leftarrow b[i]-i$。</p><p>所以 $b[1]\leq b[2]\leq…\leq b[n]$。</p><p>计算处理后的答案，答案不变。</p><p>我们假设所有的 $b[i]$ 都相等，那么问题转化为“货仓选址”问题。</p><p>假设可以划为两段，前后各自取自己 $b[i]$ 相同的最小值。</p><p>再设前面一段取最小值时 $b[i]=u$，后一段 $b[i]=v$。</p><p>第一种情况时 $u\leq v$，则直接保留，即是整段的最优解。</p><p>那第二种情况 $u&gt;v$ 怎么办呢？</p><p><strong>证明：答案 $ans$ 是 $a$ 中位数 ，表示新的 $b[i]$。</strong></p><p>假设前一段是 $b[1…n]$，后一段是 $b[n + 1…m]$。</p><p>首先，证明，$b[n]\leq u,b[n+1]\geq v$。</p><p>证明一个：假设 $b[n] &gt; u$，我们可以将 $b[1…n]$ 全部替换为 $u$，很明显前面的答案不会变大，而且留给后面的空间是越大的，答案不会变差。</p><p>那么，我们接着证明 $b[1…n]$ 变成相同的 $b[1] &gt; u$，是不会变差的。</p><p>首先，可以得到 $a[1…n]$ 的中位数 $s$ 一定是 $\leq u$。如果 $s &gt; u$ 的话，我们可以将 $u$ 向上移动，变为 $s$。因为有 $\dfrac{n}{2}$ 个数大于 $s$，那么答案是一定会变小的。</p><p>我们可以将 $b[2…n]$ 都减去一个 $b[2] - b[1]$，那么此时 $b[1] = b[2]$。看到有 $\dfrac n2$ 个数小于 $u$，于是向下移动的话，会导致答案变小。我们对于每一个都这么操作，最后一定会得到 $b[1..n] = b[1]$。</p><p>然后，我们再证明 $b[1]$ 向下移动一定会使答案变小。这个<del>显然。</del></p><p>现在，我们已经得到 $b[n]\leq u,b[n+1]\geq v$，且两段都是一样的。</p><p>接着就是根据中位数，我们可以将他们调整为 $a[1…n + m]$ 的中位数。<del>肯定说的不清楚，只好先鸽着了。</del></p><p>最后直接维护每一段的大小和长度，如果遇到递减，则合并为中位数，就可以了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;又叫可合并堆。&lt;/p&gt;</summary>
    
    
    
    
    <category term="数据结构" scheme="https://mydcwfy.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="左偏树" scheme="https://mydcwfy.github.io/tags/%E5%B7%A6%E5%81%8F%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>Extended-BSGS</title>
    <link href="https://mydcwfy.github.io/2021/12/17/Extended-baby-step-giant-step/"/>
    <id>https://mydcwfy.github.io/2021/12/17/Extended-baby-step-giant-step/</id>
    <published>2021-12-17T12:19:34.000Z</published>
    <updated>2021-12-17T12:20:15.504Z</updated>
    
    <content type="html"><![CDATA[<p>同步发表于 P4195 题解。</p><span id="more"></span><p><strong>Update on 2021-11-01：</strong> 更新了代码，可能会提升阅读效果吧。</p><h2 id="0-前置知识-amp-废话"><a href="#0-前置知识-amp-废话" class="headerlink" title="0. 前置知识 &amp; 废话"></a>0. 前置知识 &amp; 废话</h2><p>逆元。</p><p><a href="https://www.luogu.com.cn/blog/mydcwfy-342891/inverse-element">我的逆元 Blog</a></p><h2 id="1-普通版-BSGS"><a href="#1-普通版-BSGS" class="headerlink" title="1. 普通版 BSGS"></a>1. 普通版 BSGS</h2><p>要求 $\gcd(a,p)=1$。</p><p>其实就是一个分块的思想。</p><p>设 $t=\lceil\sqrt p\rceil$，我们可以将每一个答案 $x=i\times t-m$，其中 $i,m\leq t$。</p><p>$a^{i\cdot t-m}=b\pmod p\Leftrightarrow a^{i\cdot t}=b\times a^{m}\pmod p$。</p><p>我们枚举每一个 $i$，怎么找到右边的呢？</p><p>其实，我们可以先将 $b\times a^m$ 全部用 Hash 存下来。</p><p>这样就可以直接查找了。</p><h2 id="2-扩展版-BSGS"><a href="#2-扩展版-BSGS" class="headerlink" title="2. 扩展版 BSGS"></a>2. 扩展版 BSGS</h2><p>想办法解决问题，我们应该实现 $\gcd(a,p)=1$。</p><p>首先，同余具有一条性质：<br>$$<br>a=b\pmod c (\gcd(a,c)=1)\Leftrightarrow a\times d=b\times d\pmod {c\times d}<br>$$<br>可以感性的理解一下 （<del>主要是不会证</del>）。</p><p>那么，我们就可以执行消除因子。</p><p>每次在两边除以 $d=\gcd(a,p)$。<br>$$<br>a^x=b\pmod p\Rightarrow \dfrac{a}{d}\times a^{x-1}=\dfrac{b}{d}\pmod {\dfrac{p}{d}}<br>$$<br>重复执行该语段，直到 $\gcd(a,p)=1$ 为止。</p><p>将所有的 $\dfrac{a}{d}$ 都乘起来，记为 $tot$。</p><p>假设执行了 $cnt$ 次，则原问题转化为 $tot\times a^{x-cnt}=b\pmod p\Leftrightarrow a^{x-cnt}=b\times tot^{-1}\pmod p$</p><p>注意，这里有一些细节：</p><ol><li>如果 $b$ 不被 $d$ 整除，则直接返回无解。</li><li>答案可能小于 $cnt$，我们必须枚举 $[0,cnt-1]$ 的解，看有没有。</li></ol><p>于是就转化为了普通的 BSGS 了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll a, b, Mod;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">Gcd</span><span class="params">(ll a, ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!b) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Gcd</span>(b, a % b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">ExGcd</span><span class="params">(ll a, ll b, ll &amp;x, ll &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!b)</span><br><span class="line">    &#123;</span><br><span class="line">        x = <span class="number">1</span>, y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    ll d = <span class="built_in">ExGcd</span>(b, a % b, y, x);</span><br><span class="line">    y -= a / b * x;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a, ll k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (k &amp; <span class="number">1</span>) res = res * a % Mod;</span><br><span class="line">        a = a * a % Mod;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">ExBSGS</span><span class="params">(ll a, ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    b %= Mod, a %= Mod;<span class="comment">//注意开始的时候要先模一下。</span></span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">1</span> || Mod == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> g = <span class="number">0</span>;</span><br><span class="line">    ll now = <span class="number">1</span>, t;</span><br><span class="line">    <span class="keyword">while</span> ((t = <span class="built_in">Gcd</span>(a, Mod)) != <span class="number">1</span>)<span class="comment">//消除因子</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b % t) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        b /= t, Mod /= t, now = now * (a / t) % Mod;</span><br><span class="line">        g ++;</span><br><span class="line">        <span class="keyword">if</span> (now == b) <span class="keyword">return</span> g;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> K = <span class="built_in">sqrt</span>(Mod * <span class="number">1.0</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">static</span> map&lt;ll, <span class="keyword">int</span>&gt; mp;</span><br><span class="line">    mp.<span class="built_in">clear</span>();</span><br><span class="line">    ll x, y;</span><br><span class="line">    <span class="built_in">ExGcd</span>(now, Mod, x, y);<span class="comment">//逆元（因为 p 不一定是质数）</span></span><br><span class="line">    x = (x % Mod + Mod) % Mod;</span><br><span class="line">    now = x * b % Mod;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= K; ++ i)</span><br><span class="line">    &#123;</span><br><span class="line">        now = now * a % Mod;</span><br><span class="line">        mp[now] = i;<span class="comment">//小块存入 Hash</span></span><br><span class="line">    &#125;</span><br><span class="line">    ll pw = <span class="built_in">qpow</span>(a, K);</span><br><span class="line">    now = pw;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= K; ++ i)</span><br><span class="line">    &#123;<span class="comment">//大块直接枚举</span></span><br><span class="line">        <span class="keyword">if</span> (mp.<span class="built_in">find</span>(now) != mp.<span class="built_in">end</span>()) <span class="keyword">return</span> i * K - mp[now] + g;</span><br><span class="line">        now = now * pw % Mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll a, b;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld %lld&quot;</span>, &amp;a, &amp;Mod, &amp;b), a || b || Mod)</span><br><span class="line">    &#123;</span><br><span class="line">        ll res = <span class="built_in">ExBSGS</span>(a, b);</span><br><span class="line">        <span class="keyword">if</span> (~res) cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;No Solution&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;同步发表于 P4195 题解。&lt;/p&gt;</summary>
    
    
    
    
    <category term="数论" scheme="https://mydcwfy.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
    <category term="题解" scheme="https://mydcwfy.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>逆元</title>
    <link href="https://mydcwfy.github.io/2021/12/17/Inverse-element/"/>
    <id>https://mydcwfy.github.io/2021/12/17/Inverse-element/</id>
    <published>2021-12-17T12:17:48.000Z</published>
    <updated>2021-12-17T12:18:32.619Z</updated>
    
    <content type="html"><![CDATA[<p>比较简单的前置知识。</p><span id="more"></span><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>$a*x =1\pmod b$，且 $\gcd(a,b)=1$，则我们称 $x$ 为 $a$ 的逆元，简称 $a^{-1}$。</p><p>然后我们在处理 $d/a\pmod b$，可以转化为 $d * a^{-1}\pmod p$。</p><h2 id="2-求法"><a href="#2-求法" class="headerlink" title="2. 求法"></a>2. 求法</h2><h3 id="1）-扩展欧几里得算法"><a href="#1）-扩展欧几里得算法" class="headerlink" title="1） 扩展欧几里得算法"></a>1） 扩展欧几里得算法</h3><p>可以转化为 $a<em>x+b</em>y=1$，直接扩展欧几里得即可。</p><p>值得注意的是，我们要将 $x$ 变成 $[0,p-1]$ 的数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function">ll <span class="title">ExGCD</span><span class="params">(ll a,ll b,ll &amp;x,ll &amp;y)</span></span>&#123;</span><br><span class="line">ll d;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>) x=<span class="number">1</span>,y=<span class="number">0</span>,d=a;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">d=<span class="built_in">ExGCD</span>(b,a%b,y,x),y-=a/b*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">inv</span><span class="params">(ll a,ll p)</span><span class="comment">// 求逆元的函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll x,y;</span><br><span class="line">    <span class="built_in">ExGCD</span>(a,p,x,y);</span><br><span class="line">    x=(x%p+p)%p;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2）线性算法"><a href="#2）线性算法" class="headerlink" title="2）线性算法"></a>2）线性算法</h3><p>首先，$1^{-1}=1$。</p><p>$[\dfrac{p}{i}]*i+r=p\Leftrightarrow [\dfrac{p}{i}]*i+r=0\pmod p$。</p><p>同时乘以 $i^{-1}*r^{-1}$，就可以得到 $[\dfrac{p}{i}]*r^{-1}+i^{-1}=0\pmod p$。</p><p>于是，$i^{-1}=-[\dfrac{p}{i}]*r^{-1}\pmod p$。</p><p>当然，这个也可以计算单个的逆元。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> inv[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,p;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;p;</span><br><span class="line">    inv[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i) inv[i]=(p-(p/i))*inv[p%i]%p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,(inv[i]%p+p)%p);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3）快速幂"><a href="#3）快速幂" class="headerlink" title="3）快速幂"></a>3）快速幂</h3><p>因为有费马小定理：$a^{p-1}=1\pmod p$，其中 p 为质数。</p><p>所以 $a*a^{p-2}=1\pmod p$。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;比较简单的前置知识。&lt;/p&gt;</summary>
    
    
    
    
    <category term="数论" scheme="https://mydcwfy.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
</feed>
