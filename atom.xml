<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>mydcwfy&#39;s Blog</title>
  
  
  <link href="https://mydcwfy.github.io/atom.xml" rel="self"/>
  
  <link href="https://mydcwfy.github.io/"/>
  <updated>2022-06-30T10:26:10.590Z</updated>
  <id>https://mydcwfy.github.io/</id>
  
  <author>
    <name>mydcwfy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CF1109D Sasha and Interesting Fact from Graph Theory</title>
    <link href="https://mydcwfy.github.io/2022/06/30/CF1109D/"/>
    <id>https://mydcwfy.github.io/2022/06/30/CF1109D/</id>
    <published>2022-06-30T10:07:22.000Z</published>
    <updated>2022-06-30T10:26:10.590Z</updated>
    
    <content type="html"><![CDATA[<p>神秘 prufer 序列 + 组合数学。</p><span id="more"></span><p>题意：有多少棵 $n$ 个点的树，满足每一条边的边权在 $[1, m]$ 中，且满足 $a, b$ 的距离为 $m$。$n, m\leq 10 ^ 6$。</p><p>直接考虑 prufer 序列计算，首先枚举 $a, b$ 之间一共有多少点，设为 $d$，此时我们需要枚举 $a, b$ 之间的点分别是哪些，贡献为 $(n - 2) ^ \underline{d - 2}$。然后考虑中间的边权，容易得到 $d - 1$ 个的和为 $m$，那么就是 $\binom{m - 1}{d - 1}$。然后考虑剩下的贡献。注意到其实 $d$ 个点可以看作缩成了一个点，还剩 $n - d + 1$ 个点，只不过每次他的出现，可以有 $d$ 个可连。</p><p><strong>和度数相关，考虑 prufer 序列</strong>。先不管复杂度，考虑枚举 prufer 序列，枚举缩的大点在 prufer 序列中出现了 $j$ 次，那么贡献需要选 $j$ 个位置，为 $\binom{n - d - 1}{j}$，然后每个 $d$ 个点都可以连，为 $d ^ {j + 1}$（注意是出现次数 +1 为度数），剩下的点随便选，为 $(n - d)$ 种，总贡献为 $(n - d) ^ {n - d - j - 1}$。还有边权没有算，容易得到就是 $m ^ {n - d}$。</p><p>于是总贡献可以写作：<br>$$<br>\sum_{d = 2} ^ n (n - 2) ^ \underline{d - 2} \binom{m - 1}{d - 1}m ^ {n - d} \sum_{j = 0} ^ {n - d - 1} \binom{n - d - 1}j d ^ {j + 1} (n - d) ^ {n - d - j - 1}<br>$$<br>注意到后面的 $d ^ {j + 1}$ 去掉一个 $d$ 移到前面，后面就是一个二项式定理。可以写作：<br>$$<br>\sum_{d = 2} ^ n (n - 2) ^ \underline{d - 2} \binom{m - 1}{d - 1} m ^ {n - d} n ^ {n - d - 1}<br>$$<br>但是注意 $d = n$ 时会出锅，于是对 $d = n$，单独计算，为 $(n - 2)!\binom{m - 1}{n - 2}$。直接计算即可，时间复杂度 $O(n\log n)$ 或 $O(n)$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d %*d %*d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">int</span> res = (LL) <span class="built_in">C</span>(m - <span class="number">1</span>, n - <span class="number">2</span>) * fact[n - <span class="number">2</span>] % Mod;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; ++ i)</span><br><span class="line">res = (res + (LL) <span class="built_in">qpow</span>(m, n - i) * <span class="built_in">C</span>(m - <span class="number">1</span>, i - <span class="number">2</span>) % Mod * fact[n - <span class="number">2</span>] % Mod</span><br><span class="line">* infact[n - i] % Mod * i % Mod * <span class="built_in">qpow</span>(n, n - i - <span class="number">1</span>)) % Mod;</span><br><span class="line">std::cout &lt;&lt; res &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;神秘 prufer 序列 + 组合数学。&lt;/p&gt;</summary>
    
    
    
    
    <category term="组合数学" scheme="https://mydcwfy.github.io/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
    <category term="prufer 序列" scheme="https://mydcwfy.github.io/tags/prufer-%E5%BA%8F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Luogu P5219 无聊的水题 I</title>
    <link href="https://mydcwfy.github.io/2022/06/30/Luogu-P5219/"/>
    <id>https://mydcwfy.github.io/2022/06/30/Luogu-P5219/</id>
    <published>2022-06-30T08:37:33.000Z</published>
    <updated>2022-06-30T09:23:10.517Z</updated>
    
    <content type="html"><![CDATA[<p>prufer 序列 + 多项式重工业。</p><span id="more"></span><p>题意：求有多少棵大小为 $n$ 的有根树满足最大度数为 $m$。$n\leq 5\times 10 ^ 4$，$m\leq n$。</p><p>最大点度数为 $m$，显然可以转化为最大点度数 $\geq m$ 减去最大点度数 $\leq m - 1$ 的方案数。下面仅计算 $\leq m$ 的情况。</p><p><strong>树的计数的常用两个手段是 Matrix-Tree 矩阵树定理和 prufer 序列</strong>。考虑使用 prufer 序列计算。由于度数等于出现次数 +1，于是我们只需要限定每一个点的出现次数 $&lt;m$ 即可。</p><p>由于是同一个点出现多次只算一种方案，考虑使用 EGF，然后直接计算他的 $n$ 次方即可。直接使用倍增快速幂即可通过，似乎没必要使用什么 $\ln/\exp$ 的方法。</p><p>时间复杂度 $O(n\log ^ 2n)$ 或 $O(n\log n)$。并不卡常。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> lim)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (lim &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="function">poly <span class="title">bs</span><span class="params">(lim + <span class="number">1</span>, <span class="number">1</span>)</span>, <span class="title">res</span><span class="params">(<span class="number">1</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= lim; ++ i) bs[i] = (LL) bs[i] * infact[i] % Mod;</span><br><span class="line"><span class="keyword">int</span> k = n;</span><br><span class="line"><span class="keyword">for</span> (; k; k &gt;&gt;= <span class="number">1</span>, bs = bs * bs, bs.<span class="built_in">resize</span>(std::<span class="built_in">min</span>((<span class="keyword">int</span>) bs.<span class="built_in">size</span>(), n - <span class="number">1</span>)))</span><br><span class="line"><span class="keyword">if</span> (k &amp; <span class="number">1</span>) res = res * bs, res.<span class="built_in">resize</span>(std::<span class="built_in">min</span>((<span class="keyword">int</span>) res.<span class="built_in">size</span>(), n - <span class="number">1</span>));</span><br><span class="line"><span class="keyword">return</span> res[n - <span class="number">2</span>] * (LL) fact[n - <span class="number">2</span>] % Mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line"><span class="keyword">int</span> m, res;</span><br><span class="line">std::cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">adj</span>(res = <span class="built_in">solve</span>(m - <span class="number">1</span>) - <span class="built_in">solve</span>(m - <span class="number">2</span>)));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;prufer 序列 + 多项式重工业。&lt;/p&gt;</summary>
    
    
    
    
    <category term="多项式" scheme="https://mydcwfy.github.io/tags/%E5%A4%9A%E9%A1%B9%E5%BC%8F/"/>
    
    <category term="prufer 序列" scheme="https://mydcwfy.github.io/tags/prufer-%E5%BA%8F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>LOJ2106 [JLOI2015]有意义的字符串</title>
    <link href="https://mydcwfy.github.io/2022/06/30/LOJ2106/"/>
    <id>https://mydcwfy.github.io/2022/06/30/LOJ2106/</id>
    <published>2022-06-30T07:44:09.000Z</published>
    <updated>2022-06-30T08:32:40.932Z</updated>
    
    <content type="html"><![CDATA[<p>经典矩阵乘法计算无理数幂题目。</p><span id="more"></span><p>题意：求<br>$$<br>\lfloor (\dfrac{b + \sqrt d}2) ^ n \rfloor \bmod 7528443412579576937<br>$$<br>$b ^ 2\leq d &lt; (b + 1) ^ 2\leq 10 ^ {18}$，$b\bmod 2 = 1$，$d\bmod 4 = 1$。</p><p>首先样例给出了一个 $\dfrac{1 + \sqrt 5}{2}$（这个怎么不符合数据范围啊）的例子，我们很容易联想到计算 $(\dfrac {1 + \sqrt 5} 2) ^ n + (\dfrac {1 - \sqrt 5} 2) ^ n$，因为这是斐波那契数列的通项公式。</p><p>同样的，我们可以考虑计算 $(\dfrac{b + \sqrt d}2) ^ n + (\dfrac {b - \sqrt d}{2}) ^ n$ 的答案。容易发现这两个无理数其实是 $x ^ 2 - bx + \dfrac{b ^ 2 - d}{4} = 0$ 的两根。</p><p>然后给出一个经典结论：</p><blockquote><p>马上可以得到递推式为 $f_n = bf_{n - 1} + \dfrac{d - b ^ 2}4 f_{n - 2}$。</p></blockquote><p>证明可以考虑展开该式子。</p><blockquote><p>设 $a_1 = \dfrac{b + \sqrt d}2$，$a_2 = \dfrac{b - \sqrt d}2$，那么我们的答案就是 $a_1 ^ n + a_2 ^ n$。考虑化出 $a_1 ^ {n - 1} + a_2 ^ {n - 1}$，那么容易发现需要乘上一个 $a_1 + a_2$，但是还是会多一些项，我们整理一下，可以得到：<br>$$<br>a_1 ^ n - a_2 ^ n = (a_1 + a_2) (a_1 ^ {n - 1} + a_2 ^ {n - 1}) - a_1a_2(a_1 ^ {n - 2} + a_2 ^ {n - 2})<br>$$<br>于是代换为 $f_n$ 就可以得到上面的式子。至于为什么要扯到一元二次方程，是因为其实这个就是韦达定理（</p></blockquote><p>这样剩下的，我们只需要求出 $f_0, f_1$ 即可用矩阵乘法得到 $f_n$。</p><p>但是原问题还没完：怎么求得下取整的答案？</p><p>容易发现由于题目限制，我们很容易得到 $b - \sqrt d \in(-1, 0]$，那么显然 $(\dfrac{b - \sqrt d}2) ^ n$ 的绝对值 $&lt;1$。如果 $n$ 是偶数，并且 $b\not = \sqrt d$，那么加了一部分才得到 $f_n$，所以答案应 -1，否则不变。</p><p>注意模数很大，需要用龟速乘或者 <code>__int128</code> 计算乘法。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LL b, d, n;</span><br><span class="line">std::cin &gt;&gt; b &gt;&gt; d &gt;&gt; n;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;1&quot;</span>), <span class="number">0</span>;</span><br><span class="line">Matrix st;</span><br><span class="line">st[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>, st[<span class="number">1</span>][<span class="number">1</span>] = b, st[<span class="number">0</span>][<span class="number">1</span>] = (d - b * b) / <span class="number">4</span>;</span><br><span class="line">st = <span class="built_in">qpow</span>(st, n);</span><br><span class="line">LL res = ((s128) st[<span class="number">1</span>][<span class="number">0</span>] * b + (s128) <span class="number">2</span> * st[<span class="number">0</span>][<span class="number">0</span>]) % Mod;</span><br><span class="line"><span class="keyword">if</span> (!(n &amp; <span class="number">1</span>) &amp;&amp; d != b * b) res --;</span><br><span class="line">std::cout &lt;&lt; res &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;经典矩阵乘法计算无理数幂题目。&lt;/p&gt;</summary>
    
    
    
    
    <category term="矩阵乘法" scheme="https://mydcwfy.github.io/tags/%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LOJ2320 「清华集训 2017」生成树计数</title>
    <link href="https://mydcwfy.github.io/2022/06/30/LOJ2320/"/>
    <id>https://mydcwfy.github.io/2022/06/30/LOJ2320/</id>
    <published>2022-06-30T02:12:58.000Z</published>
    <updated>2022-06-30T06:44:22.926Z</updated>
    
    <content type="html"><![CDATA[<p>有难度的树上计数 + 多项式重工业。</p><span id="more"></span><p>题意：给定 $n$ 棵树，每棵树有 $a_i$ 个节点，随意连接 $n - 1$ 条边使得 $n$ 棵树联通，设连边后第 $i$ 棵树连边度数为 $d_i$，定义其权值为：<br>$$<br>(\prod_{i = 1} ^ n d_i ^ m) (\sum_{i = 1} ^ n d_i ^ m)<br>$$<br>求权值之和。$n\leq 3\times 10 ^ 4$，$m\leq 30$。</p><p>对 LOJ 讨论区题解的详细阐述，$m$ 可以 $10 ^ 9$。</p><p>首先不考虑 $\sum_{i = 1} ^ n d_i ^ m$ 怎么做。</p><p>直接考虑 prufer 序列，转化为序列问题，假设 $c_i$ 为 $i$ 出现的次数：<br>$$<br>\begin{aligned}<br>ans =&amp; (n - 2)! \prod_{i = 1} ^ n \dfrac{(c_i + 1) ^ m a_i ^ {c_i + 1}} {c_i!}\\<br>=&amp; (n - 2)!\prod_{i = 1} ^ n a_i \prod_{i = 1} ^ n \dfrac{(c_i + 1) ^ m a_i ^ {c_i}} {c_i!}<br>\end{aligned}<br>$$<br>考虑使用生成函数，设 $F_i(x)$ 表示 $i$ 树的生成函数，使用 EGF 即可得到：<br>$$<br>F_i(x) = \sum_{j = 0} \dfrac{(j + 1) ^ m (a_ix) ^ j}{j!}<br>$$<br>那么答案就是 $(n - 2)!\prod_{i = 1} ^ n a_i [x ^ {n - 2}] \prod_{i = 1} ^ n F_i(x)$。但是注意到有 $n$ 个生成函数，无法计算。</p><p>但是本题的生成函数有一个特殊的性质：$i$ 相关的只有 $(a_ix) ^ i$。这给我们一启示：按照 $a_ix$ 为一个整体先计算。</p><p>另外，所有都是乘法，不好做，<strong>乘转加使用 $\ln/\exp$，</strong>于是答案的生成函数可以写作：<br>$$<br>ans = (n - 2)!\prod_{i = 1} ^ n a_i [x ^ {n - 2}]\exp\sum_{i = 1} ^ n \ln F(a_i x)<br>$$<br>先计算出 $\ln F(a_i x)$，那么 $\ln$ 的和就可以写作：<br>$$<br>\sum_{i = 1} ^ n \ln F(a_ix) = \sum_{j = 0} x ^ j (\sum_{i = 1} ^ n a_i ^ j) [x ^ j]\ln F(a_ix)<br>$$<br>注意到有一个等幂和计算，于是可以套用 <a href="/2022/06/18/Luogu-P4705/">Luogu P4705 玩游戏</a> 的套路计算即可，于是我们可以在 $O(n\log ^ 2 n)$ 的时间内得出答案的生成函数。</p><p>然后考虑加上 $\sum_{i = 1} ^ n d_i ^ m$ 如何计算。分开考虑 $i$ 的贡献，那么其实是我们把 $F_i(x)$ 的生成函数相应部分去掉，然后加上 $G_i(x)$ 的贡献。$G_i(x)$ 的生成函数比较好表达，为：<br>$$<br>G_i(x) = \sum_{j = 0} \dfrac{(j + 1) ^ {2m} a_i ^ j x ^ j}{j!}<br>$$<br>那么整个的生成函数可以写作：<br>$$<br>(\sum_{i = 1} ^ n \dfrac{G_i(x)} {F_i(x)}) (\prod_{i = 1} ^ nF_i(x))<br>$$<br>容易发现这个 $G(x)$ 也可以使用类似于 $a_ix$ 绑定一起的方式计算，那么我们可以把 $\sum_{i = 1} ^ n\dfrac{G_i(x)}{F_i(x)}$ 用刚才求等幂和的算法求出来，最后把两个生成函数乘起来，就可以得到答案了。时间复杂度 $O(n\log ^ 2 n)$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> solve = [&amp;](<span class="keyword">auto</span> &amp;self, poly &amp;a, <span class="keyword">int</span> l, <span class="keyword">int</span> r) -&gt; poly &#123;</span><br><span class="line"><span class="keyword">if</span> (l == r) <span class="keyword">return</span> &#123;<span class="number">1</span>, a[l]&#125;;</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">self</span>(self, a, l, mid) * <span class="built_in">self</span>(self, a, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">std::cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="function">poly <span class="title">a</span><span class="params">(n)</span>, <span class="title">f</span><span class="params">(n - <span class="number">1</span>)</span>, <span class="title">g</span><span class="params">(n - <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> &amp;x : a) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">p1</span><span class="params">(solve(solve, a, <span class="number">0</span>, n - <span class="number">1</span>))</span></span>;</span><br><span class="line"><span class="keyword">int</span> res = p1.<span class="built_in">back</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n - <span class="number">1</span>; ++ i) res = (LL) res * i % Mod;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++ i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mul = <span class="built_in">qpow</span>(i + <span class="number">1</span>, m);</span><br><span class="line">f[i] = (LL) infact[i] * mul % Mod;</span><br><span class="line">g[i] = (LL) infact[i] * mul % Mod * mul % Mod;</span><br><span class="line">&#125;</span><br><span class="line">g = g * <span class="built_in">Inv</span>(f), g.<span class="built_in">resize</span>(n - <span class="number">1</span>), p1 = <span class="built_in">Ln</span>(p1), f = <span class="built_in">Ln</span>(f);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++ i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!(i &amp; <span class="number">1</span>)) <span class="built_in">adj</span>(p1[i] = -p1[i]);</span><br><span class="line">p1[i] = (LL) p1[i] * i % Mod;</span><br><span class="line">&#125;</span><br><span class="line">p1[<span class="number">0</span>] = n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++ i)</span><br><span class="line">g[i] = (LL) g[i] * p1[i] % Mod, f[i] = (LL) f[i] * p1[i] % Mod;</span><br><span class="line">res = (LL) res * (<span class="built_in">Exp</span>(f) * g)[n - <span class="number">2</span>] % Mod;</span><br><span class="line">std::cout &lt;&lt; res &lt;&lt; <span class="string">&#x27;\n&#x27;</span>; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;有难度的树上计数 + 多项式重工业。&lt;/p&gt;</summary>
    
    
    
    
    <category term="多项式" scheme="https://mydcwfy.github.io/tags/%E5%A4%9A%E9%A1%B9%E5%BC%8F/"/>
    
    <category term="分治" scheme="https://mydcwfy.github.io/tags/%E5%88%86%E6%B2%BB/"/>
    
    <category term="prufer 序列" scheme="https://mydcwfy.github.io/tags/prufer-%E5%BA%8F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>AT Code Festival 2017 Qual A F Squeezing Slimes</title>
    <link href="https://mydcwfy.github.io/2022/06/30/AT-Code-Festival-2017-Qual-A-F/"/>
    <id>https://mydcwfy.github.io/2022/06/30/AT-Code-Festival-2017-Qual-A-F/</id>
    <published>2022-06-30T01:12:44.000Z</published>
    <updated>2022-06-30T01:32:38.311Z</updated>
    
    <content type="html"><![CDATA[<p>有趣的结论题。</p><span id="more"></span><p>题意：目前有 $\sum_{i = 1} ^ n a_i$ 个 1，每次可以选定一个长度为 $2m$ 的区间，然后 1、2 合并，3、4 合并，最后剩下 $m$ 个数，称为一次操作。问最少多少次操作使得该序列变为 $a$。$n\leq 10 ^ 5$，$a_i\leq 10 ^ 9$。</p><p><a href="https://atcoder.jp/contests/code-festival-2017-quala/tasks/code_festival_2017_quala_f">题目传送门 AtCoder</a></p><p>正向不好做，考虑逆向变换。假设 $x$ 为当前这个处理的数，设 $c$ 为最大的满足 $2 ^ c \leq x$ 的数，如果 $2 ^ c = x$，那么我们可以把 $c$ 次操作和前后都一起分裂，否则的话，我们需要另外一次操作，且只能和一边一起分裂。</p><p>画一个分解 5 的图理解：</p><img src="/2022/06/30/AT-Code-Festival-2017-Qual-A-F/sample.png" class=""><p>这样我们前两次分裂操作都可以和前面和后面同步，但最后一次操作只能和前面同步（也可以翻转和后面同步）。</p><p>按序扫描 $a$，记录 $ls$ 表示前面能传过来的操作次数。如果 $ls &lt; c$，那么我们需要额外的 $c - ls$ 操作来补齐，否则不需要。另外，如果需要额外的操作，如果 $ls &gt; c$，我们可以选择与前面一起分裂，否则重新开一次操作，$ls$ 也加 1。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, ls = <span class="number">0</span>, res = <span class="number">0</span>, x, cur;</span><br><span class="line">std::cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">while</span> (n --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x), cur = std::<span class="built_in">log</span>(x) / std::<span class="built_in">log</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">bool</span> flag = (<span class="number">1</span> &lt;&lt; cur) != x;</span><br><span class="line"><span class="keyword">if</span> (ls &lt;= cur) res += cur - ls;</span><br><span class="line"><span class="keyword">else</span> flag = <span class="literal">false</span>;</span><br><span class="line">ls = cur;</span><br><span class="line"><span class="keyword">if</span> (flag) ls ++, res ++;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; res &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;有趣的结论题。&lt;/p&gt;</summary>
    
    
    
    
    <category term="构造" scheme="https://mydcwfy.github.io/tags/%E6%9E%84%E9%80%A0/"/>
    
    <category term="AtCoder" scheme="https://mydcwfy.github.io/tags/AtCoder/"/>
    
  </entry>
  
  <entry>
    <title>AGC038E Gachapon</title>
    <link href="https://mydcwfy.github.io/2022/06/28/AGC038E/"/>
    <id>https://mydcwfy.github.io/2022/06/28/AGC038E/</id>
    <published>2022-06-28T13:54:46.000Z</published>
    <updated>2022-06-30T01:12:13.286Z</updated>
    
    <content type="html"><![CDATA[<p>DP 优化 min-max 容斥套路似乎是 min-max 容斥唯一考法了……</p><span id="more"></span><p>题意：有一个随机数生成器，每次生成一个 $[1, n]$ 的随机数，$i$ 生成的概率是 $\dfrac{a_i}{\sum a_i}$，当所有数出现次数都 $\geq b_i$ 时停止，求期望操作次数。$n\leq 400$，$\sum a_i\leq 400$，$\sum b_i\leq 400$。</p><p>首先考虑 min-max 容斥，可以得到：<br>$$<br>ans = \sum_{S\subseteq \{1, 2, \cdots, n\}, s\not= \varnothing} E(\min_{i\in S})<br>$$<br>后面表示在 $S$ 当中 所有元素出现次数 $\geq b_i$ 时的操作次数 的最小值 的期望。考虑如何求出后面一坨。</p><p>操作次数显然很难求，考虑一个比较常见的转化：<strong>统计所有合法时操作次数的和等于统计所有不合法状态的概率和</strong>。容易发现这是对的。</p><p>考虑一个不合法的出现次数序列 $\{c_1, c_2, \cdots, c_n\}$，那么 $c_i &lt; b_i$，然后考虑这个的出现概率，即为：<br>$$<br>\prod_{i \in S} (\dfrac{a_i}{\sum_{j\in S}a_j}) ^ {c_i}\times  \dfrac{(\sum_{i\in S} c_i)!}{\prod_{i\in S} c_i!}<br>$$<br>第一个表示我们钦定每一位出现哪一个数，出现概率的乘积。后面表示可能出现的排列情况。</p><p>于是我们就可以把整个式子写出来了：<br>$$<br>\sum_{S\subseteq \{1, 2, \cdots, n\}, S\not=\varnothing} (-1) ^ {|S| - 1} \sum_{c_1, c_2, \cdots, c_n}[c_i&lt;b_i] \prod_{i \in S} (\dfrac{a_i}{\sum_{j\in S}a_j}) ^ {c_i}\times  \dfrac{(\sum_{i\in S} c_i)!}{\prod_{i\in S} c_i!}<br>$$<br>还是很难算，注意到我们需要把整体的设为状态，比如涉及到的有 $\sum_{i\in S} a_j$，$\sum_{i\in S}c_j$，于是考虑把这两维设为状态计算。剩下的拆开计算即可。</p><p>于是直接考虑转移，枚举 $i, \sum c, \sum a$ 和当前的 $c$，看似复杂度 $O(n ^ 4)$，但其实由于 $\sum b$ 是一个量级，所以枚举 $i$ 和 $c$ 总体是 $O(n)$，于是总时间复杂度 $O(n ^ 3)$，可以通过。空间比较卡，滚动即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line">std::cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) std::cin &gt;&gt; a[i] &gt;&gt; b[i];</span><br><span class="line">f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = Mod - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> id = <span class="number">1</span>; id &lt;= n; ++ id)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(f[id &amp; <span class="number">1</span>], <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(f[id &amp; <span class="number">1</span>]));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> sa = <span class="number">0</span>; sa &lt; N; ++ sa)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> sc = <span class="number">0</span>; sc &lt; N; ++ sc) &#123;</span><br><span class="line"><span class="keyword">if</span> (!f[(id - <span class="number">1</span>) &amp; <span class="number">1</span>][sa][sc]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> frm = f[(id - <span class="number">1</span>) &amp; <span class="number">1</span>][sa][sc];</span><br><span class="line"><span class="built_in">adj</span>(f[id &amp; <span class="number">1</span>][sa][sc] += frm - Mod);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>, mul = <span class="number">1</span>; c &lt; b[id]; ++ c, mul = (LL) mul * a[id] % Mod) &#123;</span><br><span class="line"><span class="keyword">int</span> &amp;to = f[id &amp; <span class="number">1</span>][sa + a[id]][sc + c];</span><br><span class="line">to = (to + (LL) (Mod - mul) * infact[c] % Mod * frm) % Mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>, suma = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) suma += a[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> sa = <span class="number">0</span>; sa &lt; N; ++ sa)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> sc = <span class="number">0</span>, frm; sc &lt; N; ++ sc) &#123;</span><br><span class="line"><span class="keyword">if</span> (!(frm = f[n &amp; <span class="number">1</span>][sa][sc])) <span class="keyword">continue</span>;</span><br><span class="line">ans = (ans + (LL) suma * <span class="built_in">qpow</span>(sa, Mod - <span class="number">2</span> - sc) % Mod * fact[sc] % Mod * frm) % Mod;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;DP 优化 min-max 容斥套路似乎是 min-max 容斥唯一考法了……&lt;/p&gt;</summary>
    
    
    
    
    <category term="DP 及其优化" scheme="https://mydcwfy.github.io/tags/DP-%E5%8F%8A%E5%85%B6%E4%BC%98%E5%8C%96/"/>
    
    <category term="期望" scheme="https://mydcwfy.github.io/tags/%E6%9C%9F%E6%9C%9B/"/>
    
    <category term="min-max 容斥" scheme="https://mydcwfy.github.io/tags/min-max-%E5%AE%B9%E6%96%A5/"/>
    
    <category term="AtCoder" scheme="https://mydcwfy.github.io/tags/AtCoder/"/>
    
  </entry>
  
  <entry>
    <title>Luogu P5850 calc加强版</title>
    <link href="https://mydcwfy.github.io/2022/06/28/Luogu-P5850/"/>
    <id>https://mydcwfy.github.io/2022/06/28/Luogu-P5850/</id>
    <published>2022-06-28T08:31:38.000Z</published>
    <updated>2022-06-28T10:05:03.890Z</updated>
    
    <content type="html"><![CDATA[<p>又是多项式重工业。</p><span id="more"></span><p>题意：求所有长度为 $n$ 的序列满足每一个数都在 $[1, k]$ 且互不相等的权值和。权值定义为每一个数的乘积。你需要输出 $n\in [1, lim]$ 的答案，$lim\leq 5\times 10 ^ 5$，$k&lt; 998244353$，3s。</p><p>看到不等，那么每一个数最多出现一次，并且可以转为无序，于是最后答案要乘上 $n!$。</p><p>考虑其生成函数为 $\prod_{i = 1} ^ k (ix + 1)$，但是规模过大，无法分治 NTT。</p><p>考虑经典取 $\ln$，那么我们现要求出 $\sum_{i = 1} ^ k \ln(ix + 1)$。对其泰勒展开，可以得到：<br>$$<br>\begin{aligned}<br>\ln F(x) =&amp; \sum_{i = 1} ^ k \ln (ix + 1)\\<br>=&amp; \sum_{i = 1} ^ k \sum_{j = 1} \dfrac{(-1) ^ {j + 1} (ix) ^ j}j\\<br>=&amp; \sum_{j = 1} \dfrac{(-1) ^ {j + 1}}{j} \sum_{i = 1} ^ k i ^ j<br>\end{aligned}<br>$$<br>下面我们需要干的事情就是求 $\sum_{i = 1} ^ k i ^ j$。</p><p>考虑其 EGF，我们可以得到：<br>$$<br>\begin{aligned}<br>G(x) =&amp; \sum_{j = 0} \dfrac{x ^ j}{j!} \sum_{i = 0} ^ k i ^ j\\<br>=&amp; \sum_{i = 0} ^ k \sum_{j = 0} \dfrac{(ix) ^ j}{j!}\\<br>=&amp; \sum_{i = 0} ^ k e ^ {ix}<br>\end{aligned}<br>$$<br>最后一步等比求和一下，可以得到 $G(x) = \dfrac{e ^ {(k + 1)x} - 1}{e ^ x - 1}$。直接求逆即可，注意常数项都为 0，需要向低移一位。</p><p>其实 $i, j$ 的下界不重要，因为我们最后取的一定是 $[1, n]$ 的答案，和 0 没有关系。注意 EGF 最后需要乘上 $i!$。</p><p>如果你被卡常的话，请将 $e ^ x$ 和 $e ^ {(k + 1)x}$手动计算，一般常数正常的都能过。（总感觉话没说对……）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">inv[<span class="number">1</span>] = fact[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++ i) fact[i] = (LL) fact[i - <span class="number">1</span>] * i % Mod;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; N; ++ i) inv[i] = (LL) (Mod - Mod / i) * inv[Mod % i] % Mod;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line">std::cin &gt;&gt; k &gt;&gt; n;</span><br><span class="line"><span class="function">poly <span class="title">A</span><span class="params">(n + <span class="number">2</span>)</span>, <span class="title">B</span><span class="params">(n + <span class="number">2</span>)</span></span>;</span><br><span class="line">A[<span class="number">1</span>] = k + <span class="number">1</span>, A = <span class="built_in">Exp</span>(A), A.<span class="built_in">erase</span>(A.<span class="built_in">begin</span>());</span><br><span class="line">B[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n + <span class="number">1</span>; ++ i) B[i] = (LL) B[i - <span class="number">1</span>] * inv[i + <span class="number">1</span>] % Mod;</span><br><span class="line">A = A * <span class="built_in">Inv</span>(B), A.<span class="built_in">resize</span>(n + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++ i) A[i] = (LL) A[i] * fact[i] % Mod;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, op = <span class="number">1</span>; i &lt;= n; ++ i, op = Mod - op)</span><br><span class="line">A[i] = (LL) A[i] * inv[i] % Mod * op % Mod;</span><br><span class="line">A[<span class="number">0</span>] = <span class="number">0</span>, A = <span class="built_in">Exp</span>(A);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, (LL) A[i] * fact[i] % Mod);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;又是多项式重工业。&lt;/p&gt;</summary>
    
    
    
    
    <category term="组合数学" scheme="https://mydcwfy.github.io/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
    <category term="多项式" scheme="https://mydcwfy.github.io/tags/%E5%A4%9A%E9%A1%B9%E5%BC%8F/"/>
    
    <category term="生成函数" scheme="https://mydcwfy.github.io/tags/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>CF Round Global#21</title>
    <link href="https://mydcwfy.github.io/2022/06/28/CF-Round-Global-21/"/>
    <id>https://mydcwfy.github.io/2022/06/28/CF-Round-Global-21/</id>
    <published>2022-06-28T01:51:41.000Z</published>
    <updated>2022-06-28T03:05:22.944Z</updated>
    
    <content type="html"><![CDATA[<p>还算没有掉分……主要是 E 过于板子的功劳。</p><p>赛时 ABCDE Accepted，Score：5682，Rank #412。</p><p>改题进度：ABCDEF Accepted。</p><span id="more"></span><h3 id="A"><a href="#A" class="headerlink" title="A"></a>A</h3><p>题意：给定长度 $n$ 的数组 $a$ 和一个数字 $z$，每次可以选一个 $a$ 中的 $x$，$x\leftarrow x|z$，$z\leftarrow x\odot z$，求 $a$ 最大值的最大值。</p><p>容易发现因为 $z$ 不可能增加，最多操作一次。判断一下即可。</p><h3 id="B"><a href="#B" class="headerlink" title="B"></a>B</h3><p>题意：给定序列 $a$，每次可以选定 $[l, r]$ 使得他们值都变为原来的 $\text{mex}$，求变为 0 的最少次数。</p><p>首先答案肯定不超过 2，因为可以两次操作整个数组，一定都变为 0。</p><p>如果都是 0，答案为 0。</p><p>如果不含 0 的区间只有 1 个，那么操作这个区间即可，答案为 1。</p><p>否则答案为 2。</p><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><p>给定两个数组 $a, b$，再给定 $t$，每次可以把一个被 $t$ 整的数 $x$，变为 $t$ 个 $\dfrac xt$ 插入在原位置，或者把 $t$ 个相邻的 $x$ 合并为一个 $xt$。问 $a$ 能否变成 $b$。</p><p>容易发现操作可逆，那么我们可以先把所有的操作 1 做了，然后再做操作 2。那么问题可以转化成 $a, b$ 经过操作 1 能否相同。</p><p>一个显然的想法是我们一直操作下去直到无法操作。暴力拆分肯定不好，我们考虑维护极长的相同的数的连续段，这样就可以做了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::vector&lt;PIL&gt; <span class="title">get</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::vector&lt;PIL&gt; res;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x; i &lt;= n; ++ i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line"><span class="keyword">int</span> t = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (x % m == <span class="number">0</span>) t *= m, x /= m;</span><br><span class="line"><span class="keyword">if</span> (res.<span class="built_in">size</span>() &amp;&amp; res.<span class="built_in">back</span>().first == x) res.<span class="built_in">back</span>().second += t;</span><br><span class="line"><span class="keyword">else</span> res.<span class="built_in">push_back</span>(&#123;x, t&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line">std::cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">auto</span> v1 = <span class="built_in">get</span>(n);</span><br><span class="line">std::cin &gt;&gt; k;</span><br><span class="line"><span class="keyword">auto</span> v2 = <span class="built_in">get</span>(k);</span><br><span class="line"><span class="keyword">if</span> (v1.<span class="built_in">size</span>() != v2.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>), <span class="built_in"><span class="keyword">void</span></span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, ed = v1.<span class="built_in">size</span>(); i &lt; ed; ++ i)</span><br><span class="line"><span class="keyword">if</span> (v1[i].first != v2[i].first || v1[i].second != v2[i].second)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>), <span class="built_in"><span class="keyword">void</span></span>();</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="D"><a href="#D" class="headerlink" title="D"></a>D</h3><p>题意：给定一个排列 $a$，$i, j(i &lt; j)$ 之间有连边当且仅当 $a_i, a_j$ 都是 $a_{i\to j}$ 的极值。求 1 到 $n$ 的最短路。$n\leq 2.5\times 10 ^ 5$，$ \sum n\leq 5\times 10 ^ 5$。</p><p>考虑观察性质，假设 1 的位置是 $p$，那么连边不可能跨过 $p$，也就是说一定会导致经过 1 一次。同样会经过 $n$ 所在位置 $q$ 一次。而我们又发现，$p, q$ 之间又有连边，这样我们就可以计算 $[1, p]$ 的距离，$[q, n]$ 的距离，加上 $[p, q]$ 之间距离为 1，于是可以递归。（$p, q$ 可以交换）</p><p>于是用 ST 表查询区间最大值、最小值的位置即可，时间复杂度 $O(n\log n)$，可以优化到 $O(n)$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, a + i);</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line">std::function&lt;<span class="built_in"><span class="keyword">int</span></span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; solve = [&amp;](<span class="keyword">int</span> l, <span class="keyword">int</span> r) &#123;</span><br><span class="line"><span class="keyword">if</span> (l == r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> id1 = <span class="built_in">qmin</span>(l, r), id2 = <span class="built_in">qmax</span>(l, r);</span><br><span class="line"><span class="keyword">if</span> (id1 &gt; id2) std::<span class="built_in">swap</span>(id1, id2);</span><br><span class="line"><span class="comment">// std::cout &lt;&lt; l &lt;&lt; &#x27; &#x27; &lt;&lt; r &lt;&lt; &#x27; &#x27; &lt;&lt; id1 &lt;&lt; &#x27; &#x27; &lt;&lt; id2 &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">solve</span>(l, id1) + <span class="built_in">solve</span>(id2, r) + <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">solve</span>(<span class="number">1</span>, n));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E"><a href="#E" class="headerlink" title="E"></a>E</h3><p>题意：在无限的网格上，从 0 开始标号，前 $n$ 列的 $[0, a_i - 1]$ 都是黑的，其余都是白的，最开始有一个棋子在 $(0, 0)$，每次可以移动在 $(i, j)$ 的棋子，会分裂成两个棋子到 $(i + 1, j)$ 和 $(i, j + 1)$ 的位置。求最少操作次数使得黑的都没有棋子，对 $10 ^ 9 + 7$ 取模。$n, a_i\leq 2\times 10 ^ 5$，$a$ 单调不升。</p><p>考虑每一个黑色位置的贡献。$(i, j)$ 这个位置的贡献可以由 $(i - 1, j)$ 和 $(i, j - 1)$ 贡献而来。注意到如果这两个位置合法，那么一定都是黑色的，因为 $a$ 单调不升。</p><p>这就是组合数，容易得到他为 $\binom{i + j}i$，那么我们可以写出如下答案式子：<br>$$<br>ans = \sum_{i = 0} ^ {n - 1} \sum_{j = 0} ^ {a_i - 1} \binom{i + j}{i}<br>$$<br>时间复杂度 $O(na)$，无法通过。看看后面这个式子应该由比较好的性质。</p><p>记 $t = i, m = a_i - 1$，则我们需要计算的就是 $\sum_{j = 0} ^ m \binom{j + t}{t}$。如果对组合数学比较熟悉的话马上就可以得到这个式子其实等于 $\binom{m + 1 + t}{t + 1}$。</p><p>于是我们就得到了最终的答案：<br>$$<br>ans = \sum_{i = 0} ^ {n - 1} \binom{i + a_i}{i + 1}<br>$$<br>直接计算，时间复杂度 $O(n)$。</p><h3 id="F"><a href="#F" class="headerlink" title="F"></a>F</h3><p>题意：给定所有三元组 $(x, y, z)$ 是否满足 $d(x, y) = d(y, z)$，要求构造一棵树使得满足上面所有条件，或报告无解。$n\leq 100$。</p><p>有一个关键性质：如果我们已经知道了某一条树边，我们马上就可以还原出整个树。</p><p>具体的，我们考虑得到 $x$ 和他的父亲 $fa$，我们可以还原出所有 $v$，他们一定满足 $dis(x, v) = dis(fa, x)$。</p><p>我们如果不知道边的话，直接考虑枚举 1 和某个点的树边，按照这个暴力计算，即可得到一棵树。</p><p>然后考虑如何判断该树是否合法。直接暴力 $O(n ^ 3)$ Floyd 即可。</p><p>总时间复杂度 $O(n ^ 4)$，可以通过。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> frm)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dis[x][frm] = dis[frm][x] = <span class="number">1</span>;</span><br><span class="line">vis[x] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">1</span>; v &lt;= n; ++ v)</span><br><span class="line"><span class="keyword">if</span> (!vis[v] &amp;&amp; mp[frm][x][v]) edg.<span class="built_in">push_back</span>(&#123;v, x&#125;), <span class="built_in">dfs</span>(v, x);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) vis[i] = <span class="literal">false</span>;</span><br><span class="line">edg.<span class="built_in">assign</span>(<span class="number">1</span>, &#123;<span class="number">1</span>, v&#125;);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++ j) dis[i][j] = (n + <span class="number">1</span>) * (i != j);</span><br><span class="line">vis[<span class="number">1</span>] = vis[v] = <span class="literal">true</span>, <span class="built_in">dfs</span>(v, <span class="number">1</span>), <span class="built_in">dfs</span>(<span class="number">1</span>, v);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i)</span><br><span class="line"><span class="keyword">if</span> (!vis[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; ++ k)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++ j)</span><br><span class="line"><span class="built_in">chkmin</span>(dis[i][j], dis[i][k] + dis[k][j]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++ j)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = i + <span class="number">1</span>; k &lt;= n; ++ k)</span><br><span class="line"><span class="keyword">if</span> ((dis[i][j] == dis[j][k]) ^ mp[i][j][k])</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; ++ j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> buf[N];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, buf + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; ++ k) mp[i][k][j] = buf[k] &amp; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++ j) mp[i][j][i] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; ++ j)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; ++ k)</span><br><span class="line">mp[j][k][i] = mp[i][k][j];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">2</span>; v &lt;= n; ++ v)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">check</span>(v)) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> [u, v] : edg) <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, u, v);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;还算没有掉分……主要是 E 过于板子的功劳。&lt;/p&gt;
&lt;p&gt;赛时 ABCDE Accepted，Score：5682，Rank #412。&lt;/p&gt;
&lt;p&gt;改题进度：ABCDEF Accepted。&lt;/p&gt;</summary>
    
    
    
    
    <category term="CF" scheme="https://mydcwfy.github.io/tags/CF/"/>
    
    <category term="做题记录" scheme="https://mydcwfy.github.io/tags/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Luogu P3600 随机数生成器</title>
    <link href="https://mydcwfy.github.io/2022/06/28/Luogu-P3600/"/>
    <id>https://mydcwfy.github.io/2022/06/28/Luogu-P3600/</id>
    <published>2022-06-28T00:38:24.000Z</published>
    <updated>2022-06-28T00:58:40.168Z</updated>
    
    <content type="html"><![CDATA[<p>一个 min-max 容斥题目。</p><span id="more"></span><p>题意：给定 $m$ 个区间 $[l_i, r_i]$，每次得到的权值为所有区间最小值的最大值，该序列 $n$ 个数均在 $[1, x]$ 内均匀随机，求期望权值的大小。$n, m, x\leq 2000$。</p><p>最小值的最大值显然不可做，考虑 min-max 容斥，将其转化为最小值的最小值。</p><p>那么式子可以写成：<br>$$<br>\sum_{S\subseteq \{1, 2, \cdots, m\}, S\not= \varnothing } (-1) ^ {|S| - 1}\min_{i\in S} \{ \min_{j = l_i} ^ {r_i } a_j \}<br>$$<br>注意到后面的式子仅与区间的并的长度有关，考虑将区间并的长度压进状态 DP 计算。</p><p>首先有一些区间是没有意义的，就是包含其他区间的区间，可以先排除掉。这样保证了所有区间按 $r$ 排序后 $l$ 也是递增的。</p><p>考虑 DP，设 $f(i, j)$ 表示最后一个位置是 $i$，且当前区间并的长度为 $j$ 的方案数。注意我们需要把 $(-1) ^ {|S| - 1}$ 的系数也带上。</p><p>考虑加入一个区间，那么我们需要计算的就是 $f(r_i, j)$，可以直接暴力计算：<br>$$<br>f(r_i, j) = \sum_{t = 1} ^ {l_i - 1} f(t, j - len) + \sum_{t = l_i} ^ {r_i - 1} f(t, j - r_i + t)<br>$$<br>这样计算时间复杂度为 $O(n ^ 2 m)$，无法通过，考虑使用前缀和优化。</p><p>前面一半很好前缀和，注意到后半部分他的 $t - j$ 一定的话，那么贡献到的位置也是一定的，因为区间并的变化量是 $r - t$。</p><p>那么，我们可以通过 $O(nm)$ 的时间计算 $f(i, j)$，前缀和一下即可得到区间并长度为 $j$ 的方案数（带系数）。</p><p>剩下的过程，我们发现 $x$ 很小，我们需要计算区间并长度为 $j$ 时最小值为 $x$ 的概率。考虑差分，计算最小值 $\leq x$ 的概率减去 $\leq x - 1$ 的概率即可。计算 $\leq x$ 的概率可以通过对立面（所有数都大于 $x$）来计算。后半部分时间复杂度 $O(nx)$。</p><p>于是我们在 $O(nm + nx)$ 的时间完成，可以通过。</p><p><strong>注意求哪些区间没有覆盖其他区间的时候，相等的区间不能全部删去！</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cin &gt;&gt; n &gt;&gt; x &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++ i) <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;a[i].l, &amp;a[i].r);</span><br><span class="line">std::<span class="built_in">sort</span>(a + <span class="number">1</span>, a + m + <span class="number">1</span>, [&amp;](Interval &amp;v1, Interval &amp;v2) &#123; <span class="keyword">return</span> v1.r &lt; v2.r; &#125;);</span><br><span class="line"><span class="keyword">int</span> top = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++ i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m &amp;&amp; flag; ++ j)</span><br><span class="line">flag &amp;= !(a[i].r &gt;= a[j].r &amp;&amp; a[i].l &lt;= a[j].l) || (a[i].l == a[j].l &amp;&amp; a[i].r == a[j].r);</span><br><span class="line"><span class="keyword">if</span> (flag) tmp[++ top] = a[i];</span><br><span class="line">&#125;</span><br><span class="line">std::<span class="built_in">swap</span>(a, tmp), m = top;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++ i) g[a[i].r].<span class="built_in">push_back</span>(i);</span><br><span class="line">f[<span class="number">0</span>][<span class="number">0</span>] = pre1[<span class="number">0</span>][<span class="number">0</span>] = pre2[<span class="number">0</span>][<span class="number">0</span>] = Mod - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">1</span>; r &lt;= n; ++ r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> id : g[r])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> l = a[id].l;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> len = r - l + <span class="number">1</span>, ls = r - l + <span class="number">1</span>; len &lt;= r; ++ len)</span><br><span class="line">f[r][len] = (f[r][len] - (LL) pre1[l - <span class="number">1</span>][len - ls] - (pre2[r - <span class="number">1</span>][r - len] - pre2[l - <span class="number">1</span>][r - len]) - f[r][len] + <span class="number">4LL</span> * Mod) % Mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">0</span>; len &lt;= r; ++ len)</span><br><span class="line"><span class="built_in">adj</span>(pre1[r][len] = pre1[r - <span class="number">1</span>][len] + f[r][len] - Mod),</span><br><span class="line"><span class="built_in">adj</span>(pre2[r][r - len] = pre2[r - <span class="number">1</span>][r - len] + f[r][len] - Mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> val = <span class="number">1</span>; val &lt;= x; ++ val)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> ak = <span class="built_in">qpow</span>(x) * (LL) (x - val) % Mod, p = ak, &amp;cur = pro[val];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++ j, p = (LL) p * ak % Mod)</span><br><span class="line">cur = (cur + (LL) p * pre1[n][j]) % Mod;</span><br><span class="line"><span class="built_in">adj</span>(cur = <span class="number">1</span> - cur);</span><br><span class="line"><span class="comment">// std::cout &lt;&lt; val &lt;&lt; &#x27; &#x27; &lt;&lt; cur &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line"><span class="built_in">adj</span>(cur -= pro[val - <span class="number">1</span>]), res = (res + (LL) cur * val) % Mod;</span><br><span class="line"><span class="comment">// std::cout &lt;&lt; val &lt;&lt; &#x27; &#x27; &lt;&lt; cur &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line"><span class="built_in">adj</span>(cur += pro[val - <span class="number">1</span>] - Mod);</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; res &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;一个 min-max 容斥题目。&lt;/p&gt;</summary>
    
    
    
    
    <category term="期望" scheme="https://mydcwfy.github.io/tags/%E6%9C%9F%E6%9C%9B/"/>
    
    <category term="min-max 容斥" scheme="https://mydcwfy.github.io/tags/min-max-%E5%AE%B9%E6%96%A5/"/>
    
  </entry>
  
  <entry>
    <title>Luogu P4827 Crash 的文明世界</title>
    <link href="https://mydcwfy.github.io/2022/06/24/Luogu-P4827/"/>
    <id>https://mydcwfy.github.io/2022/06/24/Luogu-P4827/</id>
    <published>2022-06-24T13:01:58.000Z</published>
    <updated>2022-06-24T16:20:50.576Z</updated>
    
    <content type="html"><![CDATA[<p>斯特林数简单题。</p><span id="more"></span><p>题意：给定一棵树，边权都为 1，对于每一个点 $x$，求 $\sum_{i = 1} ^ n \text{dist}(x, i) ^ k$。$n\leq 5\times 10 ^ 4$，$k\leq 150$。</p><p>$k$ 次方不好使用组合意义，我们可以考虑利用第二类斯特林数弄出一个组合数：<br>$$<br>\begin{aligned}<br>x ^ k =&amp; \sum_{i = 0} ^ k {k\brace i} \binom xi i!<br>\end{aligned}<br>$$<br>那么我们可以求出 $\binom xi$，然后最后利用这个式子计算即可。第二类斯特林数直接 $O(k ^ 2)$ 递推即可。</p><p>现在考虑如何求出 $\binom xi$。先考虑暴力以每一个点为根 dfs。容易发现这个其实相当于在一条路径上选出 $i$ 条边的方案数。而这个可以通过简单的树形 DP 求出。具体的，考虑 $f(i)$ 表示已经选了 $i$ 条边的方案数，然后新加入一条边枚举其选不选从而做到 $O(k)$ 转移。</p><p>后面的优化思路就很显然了，使用换根 DP 即可做到 $O(nk)$ 的时间复杂度，可以通过。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> a[K];</span><br><span class="line"><span class="built_in">Node</span>() : a&#123;&#125; &#123;&#125;</span><br><span class="line"><span class="keyword">int</span>&amp; <span class="keyword">operator</span> [](<span class="keyword">int</span> x) &#123; <span class="keyword">return</span> a[x]; &#125;</span><br><span class="line">Node&amp; <span class="keyword">operator</span> +=(Node t) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= k; ++ i) <span class="built_in">adj</span>(a[i] += t[i] - Mod);</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">Node&amp; <span class="keyword">operator</span> -() &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= k; ++ i) <span class="built_in">adj</span>(a[i] = -a[i]);</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">Node <span class="keyword">operator</span> +(Node t) <span class="keyword">const</span> &#123; <span class="keyword">return</span> t += *<span class="keyword">this</span>; &#125;</span><br><span class="line">Node <span class="keyword">operator</span> -(Node t) <span class="keyword">const</span> &#123; <span class="keyword">return</span> *<span class="keyword">this</span> + -t; &#125;</span><br><span class="line"><span class="function">Node <span class="title">nxt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Node res = *<span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++ i) <span class="built_in">adj</span>(res[i] += a[i - <span class="number">1</span>] - Mod);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125; f1[N], f2[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa = <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">f1[x][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v : g[x])</span><br><span class="line"><span class="keyword">if</span> (v ^ fa) <span class="built_in">dfs1</span>(v, x), f1[x] += f1[v].<span class="built_in">nxt</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa = <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (fa) f2[x] = (f1[fa] - f1[x].<span class="built_in">nxt</span>() + f2[fa]).<span class="built_in">nxt</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v : g[x])</span><br><span class="line"><span class="keyword">if</span> (v ^ fa) <span class="built_in">dfs2</span>(v, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line">std::cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt; n; ++ i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">g[u].<span class="built_in">push_back</span>(v), g[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>), <span class="built_in">dfs2</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i)</span><br><span class="line">&#123;</span><br><span class="line">Node sta = f1[i] + f2[i];</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= k; ++ i)</span><br><span class="line">res = (res + (LL) S[k][i] * sta[i] % Mod * fact[i]) % Mod;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;斯特林数简单题。&lt;/p&gt;</summary>
    
    
    
    
    <category term="斯特林数" scheme="https://mydcwfy.github.io/tags/%E6%96%AF%E7%89%B9%E6%9E%97%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Luogu P4707 重返现世</title>
    <link href="https://mydcwfy.github.io/2022/06/24/Luogu-P4707/"/>
    <id>https://mydcwfy.github.io/2022/06/24/Luogu-P4707/</id>
    <published>2022-06-24T11:44:32.000Z</published>
    <updated>2022-06-24T16:21:42.475Z</updated>
    
    <content type="html"><![CDATA[<p>有趣的 DP 优化 min-max 容斥。</p><span id="more"></span><p>题意：给定 $n$ 个物品，每一时刻有 $\dfrac {p(i)}m$ 的概率出现 $i$，问出现 $k$ 中出现 $k$ 中物品的期望。$n\leq 1000$，$m\leq 10 ^ 4$，$|k - n|\leq 10$。</p><p>首先考虑答案即为 $n$ 个物品出现时间第 $k$ 小的期望。注意到我们需要利用限制条件 $|k - n|\leq 10$，所以我们将其转化为 $k$ 大问题，则 $k\leq 11$。</p><p>考虑扩展 min-max 反演，我们可以得到以下式子：<br>$$<br>\text{kth}\max(S) = \sum_{T\subseteq S} (-1) ^ {|T| - k} \binom{T - 1}{k - 1} \min(T)<br>$$<br>考虑如何计算所有的 $\min(T)$，那么肯定是 $\dfrac{m}{\sum_{i\in T}p(i)}$，因为是概率的倒数。</p><p>但是枚举 $T$ 是 $O(2 ^ n)$ 的，不可接受。注意到答案只与 $|T|, \sum_{i\in T}p(i)$ 有关，而这两个变量分别是 $O(n), O(m)$ 的，考虑按照这个 DP。</p><p>记录 $f(i, j)$ 表示选了 $i$ 个元素，他们的和是 $j$ 的方案数和。一次枚举每一个物品，容易得到 $O(n ^ 2m)$ 的转移，但还是无法通过。</p><p>注意到 $k$ 很小，但是我们还没有利用到。那么，我们需要去掉一维，然后把 $k$ 压进去，这样做到 $O(nmk)$ 或者 $O(n ^ 2k)$ 的复杂度才可以通过。</p><p>但是 $\sum_{i\in T}p(i)$ 这一维是在分母上，压进去很不好转移，我们尝试把 $|T|$ 去掉。记录 $g(i, j)$ 表示如果 $k = i$，和为 $j$ 的答案，不需要最后一项 $\dfrac mj$ 的贡献。</p><p>那么我如果要选当前物品的话，那么 $|T|$ 就会 +1，看一下前面的 $(-1) ^ {|T| - k}\binom{|T| - 1}{k - 1}$ 会有什么变化。<br>$$<br>\begin{aligned}<br>&amp;(-1) ^ {|T| - k}\binom{|T| - 1}{k - 1}\\<br>=&amp; (-1) ^ {|T| - k} (\binom{|T| - 2}{k - 1} + \binom{|T|  - 2}{k - 2})\\<br>=&amp; -(-1) ^ {|T| - k - 1}\binom{|T| - 2}{k - 1} + (-1) ^ {|T| - k}\binom{|T| - 2}{k - 2}<br>\end{aligned}<br>$$<br>通过裂项组合数，我们发现其实裂项开的两项和原式形式是完全相同的，只不过参数发生了变化，一个是 $|T| - 1, k$，另一个是 $|T| - 1, k - 1$。而恰好 $|T| - 1$ 就是我们前面计算所得到的，那么这两项都可以由计算得到的 $g$ 来表示！</p><p>我们很轻松的得到 $g(i, j)$ 如果要选当前物品的话，我们其实可以由 $-g(i - 1, j - cur)$ 和 $g(i, j - cur)$ 得到。</p><p>那么这么做下去，剩下的思路就是按照这个转移，然后算完后统计一下答案即可。时间复杂度 $O(nmk)$（原题的 $k$ 被替换了），可以通过。注意空间复杂度也为 $O(nmk)$，需要滚动数组。</p><p><strong>min-max 反演很多都只是一步，后面的步骤需要根据 min-max 发言的结果进一步 DP 等优化</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cin &gt;&gt; n &gt;&gt; k &gt;&gt; m, k = n - k + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) std::cin &gt;&gt; p[i];</span><br><span class="line">f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= k; ++ j)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> sum = <span class="number">0</span>; sum &lt;= m; ++ sum) f[i &amp; <span class="number">1</span>][j][k] = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// f[i &amp; 1][0][0] = 1;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= k; ++ j)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> sum = <span class="number">0</span>; sum &lt;= m; ++ sum)</span><br><span class="line">&#123;</span><br><span class="line">f[i &amp; <span class="number">1</span>][j][sum] = f[(i - <span class="number">1</span>) &amp; <span class="number">1</span>][j][sum];</span><br><span class="line"><span class="keyword">if</span> (j &amp;&amp; sum &gt;= p[i])</span><br><span class="line"><span class="built_in">adj</span>(<span class="built_in">adj</span>(f[i &amp; <span class="number">1</span>][j][sum] += f[(i - <span class="number">1</span>) &amp; <span class="number">1</span>][j - <span class="number">1</span>][sum - p[i]] - Mod)</span><br><span class="line">-= f[(i - <span class="number">1</span>) &amp; <span class="number">1</span>][j][sum - p[i]]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> sum = <span class="number">1</span>; sum &lt;= m; ++ sum)</span><br><span class="line">res = (res + (LL) f[n &amp; <span class="number">1</span>][k][sum] * <span class="built_in">qpow</span>(sum) % Mod * m) % Mod;</span><br><span class="line">std::cout &lt;&lt; res &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;有趣的 DP 优化 min-max 容斥。&lt;/p&gt;</summary>
    
    
    
    
    <category term="DP 及其优化" scheme="https://mydcwfy.github.io/tags/DP-%E5%8F%8A%E5%85%B6%E4%BC%98%E5%8C%96/"/>
    
    <category term="min-max 容斥" scheme="https://mydcwfy.github.io/tags/min-max-%E5%AE%B9%E6%96%A5/"/>
    
  </entry>
  
  <entry>
    <title>CF1054H Epic Convolution</title>
    <link href="https://mydcwfy.github.io/2022/06/24/CF1054H/"/>
    <id>https://mydcwfy.github.io/2022/06/24/CF1054H/</id>
    <published>2022-06-24T02:15:37.000Z</published>
    <updated>2022-06-24T02:31:15.633Z</updated>
    
    <content type="html"><![CDATA[<p>Editorial 的做法似乎太复杂了？</p><span id="more"></span><p>题意：给出 $a, b$ 序列，求：<br>$$<br>\sum_{i = 0} ^ {n - 1} a_i b_j c ^ {i ^ 2j ^ 3}<br>$$<br>对 $P = 490019$ 取模的结果。$n, m\leq 10 ^ 5$，$a_i, b_i\leq 1000$。</p><p>其实有非常简洁的做法啊……</p><p>考虑如果是下面这种形式怎么做：<br>$$<br>\sum_{i = 0} ^ {n - 1} \sum_{j = 0} ^ {m - 1} a_ib_j c ^ {ij}<br>$$<br>这个我们在 <a href="/2022/06/21/BlueStein-Algorithm/#more">BlueStein 算法</a> 中提到过，就是 Chirp-Z 变换，把 $ij$ 拆成 $\binom{i + j}2 - \binom i2 - \binom j2$，可以在 $O(n\log n)$ 的时间内解决。</p><p>现在考虑计算原式。一个显然的想法就是我们还是替换成上面的类型。于是，我们把 $a_i$ 贡献到 $i \times i$ 的位置，把 $b_j$ 贡献到 $j\times j\times j$ 的位置。但是注意到贡献的位置 $\bmod P - 1$ 相同则贡献相同，于是只需要贡献到 $i ^ 2\bmod P - 1$ 的位置即可，$j ^ 3$ 同理。</p><p>最后我们直接按照上面的做法直接暴力变换，时间复杂度 $O(P\log P)$，可以通过。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m, c;</span><br><span class="line">std::cin &gt;&gt; n &gt;&gt; m &gt;&gt; c;</span><br><span class="line"><span class="function">poly <span class="title">a</span><span class="params">(Mod - <span class="number">1</span>)</span>, <span class="title">b</span><span class="params">(Mod - <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, x; i &lt; n; ++ i)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x), <span class="built_in">adj</span>(a[(LL) i * i % (Mod - <span class="number">1</span>)] += x - Mod);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, x; i &lt; m; ++ i)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x), <span class="built_in">adj</span>(b[(LL) i * i * i % (Mod - <span class="number">1</span>)] += x - Mod);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Mod - <span class="number">1</span>; ++ i)</span><br><span class="line">a[i] = (LL) a[i] * <span class="built_in">qpow</span>(c, Mod - <span class="number">1</span> - i * (i - <span class="number">1LL</span>) / <span class="number">2</span> % (Mod - <span class="number">1</span>)) % Mod;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Mod - <span class="number">1</span>; ++ i)</span><br><span class="line">b[i] = (LL) b[i] * <span class="built_in">qpow</span>(c, Mod - <span class="number">1</span> - i * (i - <span class="number">1LL</span>) / <span class="number">2</span> % (Mod - <span class="number">1</span>)) % Mod;</span><br><span class="line">a = a * b;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, ed = a.<span class="built_in">size</span>(); i &lt; ed; ++ i)</span><br><span class="line">a[i] = (LL) a[i] * <span class="built_in">qpow</span>(c, i * (i - <span class="number">1LL</span>) / <span class="number">2</span> % (Mod - <span class="number">1</span>)) % Mod;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> &amp;x : a) <span class="built_in">adj</span>(res += x - Mod);</span><br><span class="line">std::cout &lt;&lt; res &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Editorial 的做法似乎太复杂了？&lt;/p&gt;</summary>
    
    
    
    
    <category term="多项式" scheme="https://mydcwfy.github.io/tags/%E5%A4%9A%E9%A1%B9%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>LOJ3728 [SNOI2022]军队</title>
    <link href="https://mydcwfy.github.io/2022/06/23/LOJ3728/"/>
    <id>https://mydcwfy.github.io/2022/06/23/LOJ3728/</id>
    <published>2022-06-23T08:34:15.000Z</published>
    <updated>2022-06-23T09:36:21.253Z</updated>
    
    <content type="html"><![CDATA[<p>怎么省选题也出 lxl 的各种分块啊？</p><span id="more"></span><p>题意：给定 $n$ 个物品，每个物品有一个颜色和权值，有三种操作：将 $[l, r]$ 所有颜色为 $x$ 的变为颜色 $y$；将 $[l, r]$ 所有颜色为 $x$ 的权值加 $v$；询问 $[l, r]$ 的区间和。$n, m\leq 2.5\times 10 ^ 5$，6s，允许离线。</p><p>显然一眼 lxl Ynoi 题目，估计是没有 $\text{poly}\log$，考虑分块。</p><p>我们对于当前块维护一个并查集，用来维护每一个点的颜色是什么。</p><p>大概思路就是整块直接把当前并查集颜色 $x$ 代表的根连到 $y$ 上，然后加的时候直接加在根上即可，时间复杂度都是 $O(\alpha(n))$ 单块。散块直接暴力处理，把所有并查集重构一遍，复杂度 $O(\sqrt n)$ 的。</p><p>然后主要是坑点很多，下面讲几个：</p><ol><li>合并的时候注意我们不能直接把 $x$ 代表的根连到 $y$ 上，因为 $x, y$ 的标记可能会发生混乱。新建一个节点，当作 $y$ 的新根，然后 $x, y$ 的父亲都设为新建节点，新建节点注意也要设置颜色。另外，$x$ 的根应该赋为空。</li><li>在加的时候，注意使用并查集，我们其实是在边上加权值的，点上加会出错，所以我们再新建一个节点，把原来的节点加上变化权值，这样这个的意义就是原来节点到新根的路径加了一个权值。</li><li>暴力重构的时候注意清空问题。可行的办法是把所有遇到的颜色全部记录下来，把这些位置清空。至于节点清空可以要一个点清空一个点，这样不会导致复杂度退化。</li><li>注意到每一块都要建一个大小 $O(n)$ 的并查集，于是空间复杂度 $O(n\sqrt n)$，然后还因为中间多建点，至少需要开 3 倍空间，这样很容易导致 MLE，<del>所以我们机房的神仙就好像一直调块长</del>。正确的做法是由于允许离线，把每块离线处理，这样就可以做到线性空间，不过没有了强制在线。但其实数据几乎只需要多开点即可，我开始忘开 3 倍空间结果只有满数据没过……</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// std::cout &lt;&lt; &quot;Start Solve &quot; &lt;&lt; l &lt;&lt; &#x27; &#x27; &lt;&lt; r &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line">    LL totval = <span class="number">0</span>;</span><br><span class="line">    <span class="function">std::vector&lt;<span class="keyword">int</span>&gt; <span class="title">all</span><span class="params">(C)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; C; ++ i) all[i] = i + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">auto</span> pushdown = [&amp;]() &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; ++ i)</span><br><span class="line">            col[i] = id[<span class="built_in">find</span>(i)], a[i] = val[i];</span><br><span class="line">        <span class="comment">/*printf(&quot;After Pushdown\n&quot;);</span></span><br><span class="line"><span class="comment">        for (int i = l; i &lt;= r; ++ i) printf(&quot;%d %lld\n&quot;, col[i], val[i]);*/</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">auto</span> rebuild = [&amp;]() &#123;</span><br><span class="line">        tot = n, totval = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> c : all) rt[c] = <span class="number">0</span>;</span><br><span class="line">        all.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; ++ i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!rt[col[i]]) id[rt[col[i]] = ++ tot] = col[i], f[tot] = tot, val[tot] = sz[tot] = <span class="number">0</span>;</span><br><span class="line">            f[i] = rt[col[i]], val[i] = a[i], sz[rt[col[i]]] ++, totval += a[i];</span><br><span class="line">            all.<span class="built_in">push_back</span>(col[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">rebuild</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Q; ++ i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (eve[i].l &gt; r || eve[i].r &lt; l) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (eve[i].op == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (eve[i].l &lt;= l &amp;&amp; eve[i].r &gt;= r) &#123;</span><br><span class="line">                <span class="keyword">int</span> x = eve[i].x, y = eve[i].y;</span><br><span class="line">                <span class="keyword">if</span> (!rt[x]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="comment">// std::cout &lt;&lt; &quot;Change &quot; &lt;&lt; x &lt;&lt; &#x27; &#x27; &lt;&lt; y &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line">                all.<span class="built_in">push_back</span>(x), all.<span class="built_in">push_back</span>(y);</span><br><span class="line">                x = <span class="built_in">find</span>(rt[x]);</span><br><span class="line">                ++ tot, f[tot] = tot, val[tot] = sz[tot] = <span class="number">0</span>, id[tot] = y;</span><br><span class="line">                <span class="keyword">if</span> (rt[y]) f[rt[y]] = tot, sz[tot] += sz[rt[y]];</span><br><span class="line">                f[x] = rt[y] = tot, sz[tot] += sz[x], rt[id[x]] = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">pushdown</span>();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = std::<span class="built_in">max</span>(eve[i].l, l), ed = std::<span class="built_in">min</span>(eve[i].r, r); j &lt;= ed; ++ j)</span><br><span class="line">                    <span class="keyword">if</span> (col[j] == eve[i].x) col[j] = eve[i].y;</span><br><span class="line">                <span class="built_in">rebuild</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (eve[i].op == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (eve[i].l &lt;= l &amp;&amp; eve[i].r &gt;= r) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!rt[eve[i].x]) <span class="keyword">continue</span>;</span><br><span class="line">                all.<span class="built_in">push_back</span>(eve[i].x);</span><br><span class="line">                <span class="keyword">int</span> x = <span class="built_in">find</span>(rt[eve[i].x]);</span><br><span class="line">                ++ tot, f[tot] = tot, val[tot] = sz[tot] = <span class="number">0</span>;</span><br><span class="line">                val[x] += eve[i].y, totval += (LL) sz[x] * eve[i].y, rt[eve[i].x] = tot;</span><br><span class="line">                f[x] = tot, sz[tot] = sz[x], id[tot] = eve[i].x;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">pushdown</span>();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = std::<span class="built_in">max</span>(eve[i].l, l), ed = std::<span class="built_in">min</span>(eve[i].r, r); j &lt;= ed; ++ j)</span><br><span class="line">                    <span class="keyword">if</span> (col[j] == eve[i].x) a[j] += eve[i].y;</span><br><span class="line">                <span class="built_in">rebuild</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (eve[i].l &lt;= l &amp;&amp; eve[i].r &gt;= r) eve[i].res += totval;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = std::<span class="built_in">max</span>(eve[i].l, l), ed = std::<span class="built_in">min</span>(eve[i].r, r); j &lt;= ed; ++ j)</span><br><span class="line">                    <span class="built_in">find</span>(j), eve[i].res += val[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;military.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;military.out&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(n, Q, C);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) <span class="built_in">read</span>(a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) <span class="built_in">read</span>(col[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Q; ++ i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(eve[i].op, eve[i].l, eve[i].r);</span><br><span class="line">        <span class="keyword">if</span> (eve[i].op != <span class="number">3</span>) <span class="built_in">read</span>(eve[i].x, eve[i].y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> B = std::<span class="built_in">sqrt</span>(n) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>, r; l &lt;= n; l = r + <span class="number">1</span>) <span class="built_in">solve</span>(l, r = std::<span class="built_in">min</span>(l + B - <span class="number">1</span>, n));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Q; ++ i)</span><br><span class="line">        <span class="keyword">if</span> (eve[i].op == <span class="number">3</span>) <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, eve[i].res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;怎么省选题也出 lxl 的各种分块啊？&lt;/p&gt;</summary>
    
    
    
    
    <category term="分块" scheme="https://mydcwfy.github.io/tags/%E5%88%86%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>LOJ3730 [SNOI2022]数位</title>
    <link href="https://mydcwfy.github.io/2022/06/23/LOJ3730/"/>
    <id>https://mydcwfy.github.io/2022/06/23/LOJ3730/</id>
    <published>2022-06-23T07:46:53.000Z</published>
    <updated>2022-06-23T09:13:07.247Z</updated>
    
    <content type="html"><![CDATA[<p>有趣的数数题，但压轴题确实码量较大。</p><span id="more"></span><p>题意：给定 $L, R$，问有多少个 $n$ 元组 $(a_1, a_2, \cdots, a_n)$ 满足 $a_i\in [L, R]$ 并且 $\sum a$ 10 进制表示从高位向低位数字不增。$L, R\leq 10 ^ {1000}$，$k\leq 50$，6s。</p><p>并不清楚为什么要给 6s，反正我代码最大点 200- ms，目前（2022-06-23）LOJ 最优解，大概是 rk2 速度的 4 倍。</p><p>以下令 $m = 10$，用于表示复杂度。</p><p>容易发现我们只有 $L$ 的限制是好做的，我们可以用插板法用一个组合数表示。</p><p>考虑容斥，计算钦定有 $k$ 个超出 $R$ 的限制的（似乎是二项式反演的弱化版），那么我们可以选择 $k$ 个超出限制，至少为 $R + 1$，这一部分需要乘上 $\binom nk$。假设最终的和为 $s$，那么可以得到方案数为：<br>$$<br>\binom{s - k(R + 1) - (n - k)L + n - 1}{n - 1}<br>$$<br>注意到 $s$ 必须 $\geq k(R + 1) + (n - k)L$，同时需要满足题目给的数位单调不降的特点，显然使用数位 DP。下面考虑如何计算这个组合数。</p><p>容易发现这个组合数是一个关于 $s - k(R + 1) - (n - k)L$ 的不超过 $n - 1$ 次多项式，那么我们可以把这个式子拆分为不同幂次的和。维护不同幂次的答案显然可以使用一个结构体维护，然后统一转移。具体的，使用二项式定理展开，$a(i), b(j)$ 乘 $\binom{i + j}i$ 到 $c(i + j)$。</p><p>考虑数位 DP 的具体过程，注意到我们没有上界，于是我们可以强行规定一个上界，使它比所有的 $k(R + 1) + (n - k)L$ 都要大。为了简洁我们直接设定位数不超过 $|R| + 3$，容易发现 $k(R + 1) + (n - k)L$ 肯定无法达到上界。</p><p>我们可以使用一个简单的预处理 $f(i, j)$ 表示 $i$ 位，最高位是 $j$ 且满足条件的所有数的各次幂。容易发现转移可以做到 $O(|R|\times m\times n ^ 2)$。</p><p>然后计算 $\geq cur$ 的答案，首先统计位数更大的答案，注意 $f(i, j)$ 不是最终答案，我们需要减去一个 $cur$ 的贡献，相当于对每个数加 $P - sum$。然后逐位比较，假设最高的 $i$ 位已经确定与 $cur$ 相同，枚举当前位置比 $cur$ 当前位置大并且合法的位置，然后就可以用我们预处理的 $f$。注意需要减去 $cur$ 的低位，因为高位相同，无需管。</p><p>最后一个问题是怎样通过次幂计算组合数。好像有二项式反演做法，但是 $n$ 太小了，直接暴力高斯消元得到每一项系数即可。</p><p>总时间复杂度 $O(|R|mn ^ 2 + n ^ 3)$，轻松通过。具体可以看代码。可以优化到 $O(|R|mn\log n + n ^ 3)$，不过没意义罢。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BigNum</span> &#123;</span></span><br><span class="line">    std::vector&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line">    <span class="built_in">BigNum</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">BigNum</span>(<span class="keyword">int</span> _v) &#123; <span class="keyword">while</span> (_v) a.<span class="built_in">push_back</span>(_v % <span class="number">10</span>), _v /= <span class="number">10</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">len</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> a.<span class="built_in">size</span>(); &#125;</span><br><span class="line">    <span class="keyword">int</span>&amp; <span class="keyword">operator</span> [](<span class="keyword">int</span> x) &#123; <span class="keyword">return</span> a[x]; &#125;</span><br><span class="line">&#125; L, R;</span><br><span class="line"><span class="keyword">int</span> n, C[N][N], mxlen, pw10[<span class="number">1010</span>], a[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span>&amp; <span class="title">adj</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123; <span class="keyword">return</span> x += x &gt;&gt; <span class="number">31</span> &amp; Mod; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> k = Mod - <span class="number">2</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; k; k &gt;&gt;= <span class="number">1</span>, a = (LL) a * a % Mod)</span><br><span class="line">        <span class="keyword">if</span> (k &amp; <span class="number">1</span>) res = (LL) res * a % Mod;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    std::vector&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line">    <span class="built_in">Node</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">Node</span>(<span class="keyword">int</span> _v) : <span class="built_in">a</span>(n + <span class="number">1</span>, <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) a[i] = a[i - <span class="number">1</span>] * (LL) _v % Mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span>&amp; <span class="keyword">operator</span> [](<span class="keyword">int</span> x) &#123; <span class="keyword">return</span> a[x]; &#125;</span><br><span class="line">    Node <span class="keyword">operator</span> *(Node t) <span class="keyword">const</span> &#123;</span><br><span class="line">        Node res;</span><br><span class="line">        res.a.<span class="built_in">resize</span>(n + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++ i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n - i; ++ j)</span><br><span class="line">                res[i + j] = (res[i + j] + (LL) a[i] * t[j] % Mod * C[i + j][i]) % Mod;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    Node&amp; <span class="keyword">operator</span> +=(Node t) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++ i) <span class="built_in">adj</span>(a[i] += t[i] - Mod);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Node <span class="keyword">operator</span> +(Node t) <span class="keyword">const</span> &#123; <span class="keyword">return</span> t += *<span class="keyword">this</span>; &#125;</span><br><span class="line">&#125; dp[<span class="number">1010</span>][<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Gauss</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n; ++ j)</span><br><span class="line">            <span class="keyword">if</span> (a[j][i]) &#123;</span><br><span class="line">                t = j;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="built_in">assert</span>(~t);</span><br><span class="line">        <span class="keyword">if</span> (t ^ i) std::<span class="built_in">swap</span>(a[t], a[i]);</span><br><span class="line">        <span class="keyword">int</span> Inv = <span class="built_in">qpow</span>(a[i][i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n + <span class="number">1</span>; ++ j) a[i][j] = (LL) a[i][j] * Inv % Mod;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++ j)</span><br><span class="line">            <span class="keyword">if</span> (j != i &amp;&amp; a[j][i])</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = n + <span class="number">1</span>; k &gt;= i; -- k)</span><br><span class="line">                    a[j][k] = (a[j][k] + (LL) (Mod - a[j][i]) * a[i][k]) % Mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BigNum <span class="keyword">operator</span> +(BigNum a, BigNum b)</span><br><span class="line">&#123;</span><br><span class="line">    BigNum res;</span><br><span class="line">    <span class="keyword">int</span> len = std::<span class="built_in">max</span>(a.<span class="built_in">len</span>(), b.<span class="built_in">len</span>()), ls = <span class="number">0</span>;</span><br><span class="line">    a.a.<span class="built_in">resize</span>(len), b.a.<span class="built_in">resize</span>(len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++ i)</span><br><span class="line">        res.a.<span class="built_in">push_back</span>((a[i] + b[i] + ls) % <span class="number">10</span>), ls = (a[i] + b[i] + ls) &gt;= <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span> (ls) res.a.<span class="built_in">push_back</span>(ls);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BigNum <span class="keyword">operator</span> *(BigNum a, <span class="keyword">int</span> k)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!k) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    BigNum res;</span><br><span class="line">    LL ls = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x : a.a)</span><br><span class="line">        ls = (LL) x * k + ls, res.a.<span class="built_in">push_back</span>(ls % <span class="number">10</span>), ls /= <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">while</span> (ls) res.a.<span class="built_in">push_back</span>(ls % <span class="number">10</span>), ls /= <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::istream&amp; <span class="keyword">operator</span> &gt;&gt;(std::istream &amp;fin, BigNum &amp;res)</span><br><span class="line">&#123;</span><br><span class="line">    std::string buf;</span><br><span class="line">    fin &gt;&gt; buf;</span><br><span class="line">    std::<span class="built_in">reverse</span>(buf.<span class="built_in">begin</span>(), buf.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">int</span> len = buf.<span class="built_in">length</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++ i) res.a.<span class="built_in">push_back</span>(buf[i] ^ <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> fin;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span> &lt;&lt;(std::ostream &amp;fout, BigNum res)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = res.<span class="built_in">len</span>() - <span class="number">1</span>; ~i; -- i) fout &lt;&lt; <span class="built_in"><span class="keyword">char</span></span>(res[i] % <span class="number">10</span> | <span class="number">48</span>);</span><br><span class="line">    <span class="keyword">return</span> fout;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(BigNum le)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node res;</span><br><span class="line">    res.a.<span class="built_in">resize</span>(n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> ls = <span class="number">9</span>, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = le.<span class="built_in">len</span>() - <span class="number">1</span>; ~i; -- i) sum = (sum * <span class="number">10LL</span> + le[i]) % Mod;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = le.<span class="built_in">len</span>() + <span class="number">1</span>; i &lt;= mxlen; ++ i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">9</span>; ++ j) res += dp[i][j] * <span class="built_in">Node</span>(Mod - sum);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = le.<span class="built_in">len</span>() - <span class="number">1</span>; ~i; -- i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = le[i] + <span class="number">1</span>; j &lt;= ls; ++ j) res += dp[i + <span class="number">1</span>][j] * <span class="built_in">Node</span>(Mod - sum);</span><br><span class="line">        <span class="keyword">if</span> (le[i] &gt; ls) <span class="keyword">break</span>;</span><br><span class="line">        sum = (sum + (LL) (Mod - pw10[i]) * le[i]) % Mod, ls = le[i];</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) res += <span class="built_in">Node</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) ret = (ret + (LL) res[i] * a[i + <span class="number">1</span>][n + <span class="number">1</span>]) % Mod;</span><br><span class="line">    <span class="comment">// std::cout &lt;&lt; ret &lt;&lt; &#x27; &#x27; &lt;&lt; le &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;digit.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;digit.out&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line">    std::cin &gt;&gt; L &gt;&gt; R &gt;&gt; n, mxlen = R.<span class="built_in">len</span>() + <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = C[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>; i &lt; N; ++ i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = C[i][<span class="number">0</span>] = <span class="number">1</span>; j &lt;= i; ++ j)</span><br><span class="line">            <span class="built_in">adj</span>(C[i][j] = C[i - <span class="number">1</span>][j - <span class="number">1</span>] + C[i - <span class="number">1</span>][j] - Mod);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = pw10[<span class="number">0</span>] = <span class="number">1</span>; i &lt;= mxlen; ++ i) pw10[i] = pw10[i - <span class="number">1</span>] * <span class="number">10LL</span> % Mod;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= mxlen; ++ i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">9</span>; ++ j) dp[i][j].a.<span class="built_in">resize</span>(n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">9</span>; ++ j) dp[<span class="number">1</span>][j] = <span class="built_in">Node</span>(j);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; l &lt; mxlen; ++ l)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; ++ i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= <span class="number">9</span>; ++ j)</span><br><span class="line">                dp[l + <span class="number">1</span>][j] += dp[l][i] * <span class="built_in">Node</span>(pw10[l] * (LL) j % Mod);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++ j) a[i][j] = <span class="built_in">qpow</span>(i, j - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) a[i][n + <span class="number">1</span>] = C[i + n - <span class="number">1</span>][n - <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">Gauss</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// mxlen = 2, solve(10), exit(0);</span></span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, op = <span class="number">1</span>; i &lt;= n; ++ i, op = Mod - op)</span><br><span class="line">        res = (res + <span class="built_in">solve</span>(L * (n - i) + (R + <span class="number">1</span>) * i) * (LL) C[n][i] % Mod * op) % Mod;</span><br><span class="line">    std::cout &lt;&lt; res &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;有趣的数数题，但压轴题确实码量较大。&lt;/p&gt;</summary>
    
    
    
    
    <category term="组合数学" scheme="https://mydcwfy.github.io/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
    <category term="高斯消元" scheme="https://mydcwfy.github.io/tags/%E9%AB%98%E6%96%AF%E6%B6%88%E5%85%83/"/>
    
    <category term="容斥" scheme="https://mydcwfy.github.io/tags/%E5%AE%B9%E6%96%A5/"/>
    
    <category term="DP 及其优化" scheme="https://mydcwfy.github.io/tags/DP-%E5%8F%8A%E5%85%B6%E4%BC%98%E5%8C%96/"/>
    
    <category term="数位 DP" scheme="https://mydcwfy.github.io/tags/%E6%95%B0%E4%BD%8D-DP/"/>
    
  </entry>
  
  <entry>
    <title>UOJ168 元旦老人与丛林</title>
    <link href="https://mydcwfy.github.io/2022/06/23/UOJ168/"/>
    <id>https://mydcwfy.github.io/2022/06/23/UOJ168/</id>
    <published>2022-06-23T06:12:17.000Z</published>
    <updated>2022-06-23T07:45:36.754Z</updated>
    
    <content type="html"><![CDATA[<p>网络流 + 神秘结论题目。</p><span id="more"></span><p>题意：给定 $n$ 个点，$m$ 条边的无向图，问能不能把边集划分成两部分，每一部分都是森林。$n\leq 2000, m\leq 4000$。</p><p>首先有一个结论：该无向图合法当且仅当任意子图都满足边数小于二倍点数 - 2 时可以找到方案。</p><p>证明不太会，大概感性理解一下吧。</p><p>现在我们要考虑的问题就是是否全部满足 $|E|\leq 2|V| - 2$。相当于要求 $|E| - 2|V|$ 的最大值。我们边拆点，每一个边向他的两个端点连边，然后相当于每一条边的权值是 1，每一个点的权值是 -2，然后有前提的选点。这样相当于是最大权闭合图，可以使用网络流在 $O(n ^ 2)$ 的时间内解决（因为权值是 $O(1)$ 级别的）。</p><p>注意到我们并不能选择空图，因为此时根据我们的判断一定不合法，所以我们需要强制选一个点（注意可以不选边）。那么此时，我们需要将 $u\to T$ 的边设为满流，如何操作呢？</p><p>首先暴力重建复杂度是 $O(n ^ 3)$，过不去，我们考虑在残留网络上接着跑。</p><p>考虑先将 $u\to T$ 的流量给退了，退流过程其实就是 $u\to S$ 做一遍流量上界为 $u\to S$ 容量 $c$ 的网络流，然后割掉 $u\to T$，暴力做一遍 $S$ 到 $T$ 的网络流，容易发现流量变化为 $O(1)$，所以单次 Dinic 时间复杂度 $O(n)$，总复杂度 $O(n ^ 2)$。但由于 Dinic 很玄学，没有限制容量也可以过（）。</p><p>下面考虑证明这个做法的正确性。先把 $u\to S$ 容量为 $c$ 的网络流退掉，这样考虑整张图的流量平衡，容易发现次数 $u$ 恰好少了 $c$ 的流量，这相当于我们割断了 $u\to T$ 并且使之满流，变化就是整个网络流的变化量，直接判断即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    std::cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="function">std::vector&lt;PII&gt; <span class="title">edg</span><span class="params">(m + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="function">MFGraph&lt;<span class="keyword">int</span>&gt; <span class="title">mf</span><span class="params">(n + m + <span class="number">2</span>, m * <span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> S = n + m + <span class="number">1</span>, T = n + m + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) mf.<span class="built_in">add</span>(i, T, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++ i) mf.<span class="built_in">add</span>(S, i + n, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++ i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> &amp;[u, v] = edg[i];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">        mf.<span class="built_in">add</span>(i + n, u, INF), mf.<span class="built_in">add</span>(i + n, v, INF);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> curflow = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">1</span>; u &lt;= n; ++ u)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// auto [u, v] = edg[i];</span></span><br><span class="line">        mf.edg[(u - <span class="number">1</span>) &lt;&lt; <span class="number">1</span>].w = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// mf.edg[(u - 1) &lt;&lt; 1 | 1].w = mf.edg[(v - 1) &lt;&lt; 1 | 1].w = 0;</span></span><br><span class="line">        curflow -= mf.<span class="built_in">solve</span>(u, S)<span class="comment">/*, curflow -= mf.solve(v, S)*/</span>;</span><br><span class="line">        curflow += mf.<span class="built_in">solve</span>(S, T);</span><br><span class="line">        <span class="keyword">if</span> (m - curflow + <span class="number">2</span> &gt; <span class="number">2</span>) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>), <span class="number">0</span>;</span><br><span class="line">        mf.edg[(u - <span class="number">1</span>) &lt;&lt; <span class="number">1</span>].w = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;网络流 + 神秘结论题目。&lt;/p&gt;</summary>
    
    
    
    
    <category term="网络流" scheme="https://mydcwfy.github.io/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>BlueStein 算法</title>
    <link href="https://mydcwfy.github.io/2022/06/21/BlueStein-Algorithm/"/>
    <id>https://mydcwfy.github.io/2022/06/21/BlueStein-Algorithm/</id>
    <published>2022-06-21T07:07:33.000Z</published>
    <updated>2022-06-21T07:57:40.151Z</updated>
    
    <content type="html"><![CDATA[<p>BlueStein 算法是处理循环卷积的利器，需要对单位根要有比较清晰的认识。</p><span id="more"></span><h2 id="1-主要思想"><a href="#1-主要思想" class="headerlink" title="1. 主要思想"></a>1. 主要思想</h2><p>用于循环卷积，即 $c_k = \sum_i \sum_j [i + j\bmod n = k] a_ib_j$。你肯定要说了，这个有什么用？直接计算长度为 $2n$ 的正常卷积就行了？别急，我们待会看道例题就知道了。</p><h2 id="2-算法流程"><a href="#2-算法流程" class="headerlink" title="2. 算法流程"></a>2. 算法流程</h2><p>仍然考虑计算 $a’(k) = \sum_{i = 0} ^ {n - 1} \omega_n ^ {ik} a(i)$，这本质和 FFT 是相同的。注意一般有模数时需要满足循环卷积长度 $n$ 整除 $p - 1$，这样才能使用单位根。</p><p>没有比较优秀的性质，怎么办呢？BlueStein 算法给出了一种<strong>化积为和</strong>的方案。</p><p>观察以下两个式子：<br>$$<br>\begin{aligned}<br>(x + y) ^ 2 - x ^ 2 - y ^ 2 =&amp; 2xy\\<br>\binom{x + y}2 - \binom x2 - \binom y2 =&amp; xy<br>\end{aligned}<br>$$<br>正确性展开即可得到。现在我们发现我们已经巧妙的把积放在了和之间了！</p><p>一般来说，第二个式子更常用，因为第一个式子有 $2xy$，可能需要用到二次剩余，但是一个数可能不存在二次剩余。</p><p>于是我们可以把上面的式子变形一下：<br>$$<br>\begin{aligned}<br>a’(k) =&amp; \sum_{i = 0} ^ {n - 1} \omega_n ^ {ik} a(i)\\<br>=&amp; \omega_n ^ {-\binom k2} \sum_{i = 0} ^ {n - 1} \omega_n ^ {\binom{i + k}2}\omega_n ^ {\binom i2}a(i)<br>\end{aligned}<br>$$<br>容易发现这其实是 $f(x) = \sum_{i = 0} ^ {n - 1} \omega_n ^ {\binom i2}$ 和 $g(x) = \sum_{i = 0} ^ {n - 1} \omega_n ^ {-\binom i2}$ 的差卷积，于是 NTT 加速，复杂度 $O(n\log n)$。这个办法再很多场合比较常见，这也是 BlueStein 算法的一个精妙之处。似乎也叫 Chirp Z-Transform？</p><p>然后类似于 FFT 的，我们只需要把 $c’(k) = a’(k) * b’(k)$，然后逆变换回去即可。逆变换只需要在单位根的位置乘上 -1 即可，最后每一项除以 $n$ 即可。</p><p>然后考虑证明这个就是循环卷积。同样，由于 BlueStein 算法与 FFT 的相似性，我们同样可以得到 FFT 其实也是循环卷积。</p><p>考虑 $a(x), b(y)$ 对于 $c(k)$ 的贡献为：<br>$$<br>\sum_{i = 0} ^ {n - 1} a(x) \omega_n ^ {ix} b(y) \omega_n ^ {iy} \omega_n ^ {-ik}<br>$$<br>通过表示 $a(x), b(y)$ 变换之后在哪一位，然后又逆变换回了 $k$ 这一位，就是上面的式子。</p><p>考虑推导：<br>$$<br>\begin{aligned}<br>&amp;\sum_{i = 0} ^ {n - 1} a(x) \omega_n ^ {ix} b(y) \omega_n ^ {iy} \omega_n ^ {-ik}\\<br>=&amp; a(x) b(y) \sum_{i = 0} ^ {n - 1} \omega_n ^ {ix} \omega_n ^ {iy} \omega_n ^ {-ik}\\<br>=&amp; a(x) b(y) \sum_{i = 0} ^ {n - 1} \omega_n ^ {(x + y - k)i}<br>\end{aligned}<br>$$<br>后面一坨式子可以通过 <a href=""></a> 得到即为 $n\times [n|(x + y - k)]$。（关系好像不太对，怎么感觉应该是单位根反演从这个得到的啊</p><p>于是我们就得到当 $(x + y)\bmod n = k$ 时，贡献为 $n\times a(x)b(y)$，否则为 0。最后除以 $n$ 即可得到 $c(k)$ 了。</p><p>至此，我们就可以在 $O(n\log n)$ 的之间内求出 $a$ 和 $b$ 的循环卷积了。</p><h2 id="3-例题"><a href="#3-例题" class="headerlink" title="3. 例题"></a>3. 例题</h2><h4 id="T1：BZOJ1919-CTSC2010-性能优化"><a href="#T1：BZOJ1919-CTSC2010-性能优化" class="headerlink" title="T1：BZOJ1919 [CTSC2010]性能优化"></a>T1：BZOJ1919 [CTSC2010]性能优化</h4><p><a href="https://www.luogu.com.cn/problem/P4191">题目传送门 Luogu</a></p><p><a href="https://hydro.ac/d/bzoj/p/1919">题目传送门 Hydro</a></p><p>题意：做 $A\times B ^ k$ 长度为 $n$ 的循环卷积，对 $n + 1$ 取模。保证 $n + 1$ 是质数。$n\leq 5\times 10 ^ 5$，6s。</p><p>提示：为确保你不被卡常，请使用比较快速的任意模数多项式乘法。（但好像可以不用任意模数多项式乘法</p><p>这时 BlueStien 的优势体现出来了：我做循环卷积的话，我可以对变换后的点值直接做 $a’(i) \times b’(i) ^ k$，而普通的变换不行，只有倍增快速幂。证明的话，可以考虑 BlueStein 算法逆变换后就是答案，而他和下一个相乘时又要变换回来，这个过程可以省略。这样可以把所有点值一起乘起来，再做逆变换，而普通的变换不行。</p><p>注意需要使用 MTT，但是可以使用大模数 NTT 代替，因为本题值域只有 $(5\times 10 ^ 5) ^ 3$，没实现过不知道常数如何（好像比较小）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BlueStein</span><span class="params">(poly &amp;a, <span class="keyword">int</span> inv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">bool</span> flag = inv == <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (inv == <span class="number">-1</span>) inv = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> inv = Mod - <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line"><span class="function">poly <span class="title">b</span><span class="params">(<span class="number">2</span> * n - <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span> * n - <span class="number">1</span>; ++ i)</span><br><span class="line">b[i] = <span class="built_in">qpow</span>(W, (i - <span class="number">1LL</span>) * i / <span class="number">2</span> % (Mod - <span class="number">1</span>) * (Mod - <span class="number">1</span> - inv) % (Mod - <span class="number">1</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++ i)</span><br><span class="line">a[i] = (LL) a[i] * <span class="built_in">qpow</span>(W, (i - <span class="number">1LL</span>) * i / <span class="number">2</span> % (Mod - <span class="number">1</span>) * inv % (Mod - <span class="number">1</span>)) % Mod;</span><br><span class="line">std::<span class="built_in">reverse</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">a = a * b, a = std::vector&lt;<span class="keyword">int</span>&gt;(a.<span class="built_in">data</span>() + n - <span class="number">1</span>, a.<span class="built_in">data</span>() + <span class="number">2</span> * n - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++ i)</span><br><span class="line">a[i] = (LL) a[i] * <span class="built_in">qpow</span>(W, (i - <span class="number">1LL</span>) * i / <span class="number">2</span> % (Mod - <span class="number">1</span>) * inv % (Mod - <span class="number">1</span>)) % Mod;</span><br><span class="line"><span class="keyword">if</span> (flag) <span class="keyword">return</span>;</span><br><span class="line">inv = <span class="built_in">qpow</span>(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> &amp;x : a) x = (LL) x * inv % Mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, C;</span><br><span class="line">std::cin &gt;&gt; n &gt;&gt; C, W = <span class="built_in">findrt</span>(Mod = n + <span class="number">1</span>);</span><br><span class="line"><span class="function">poly <span class="title">a</span><span class="params">(n)</span>, <span class="title">b</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> &amp;x : a) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> &amp;x : b) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line"><span class="built_in">BlueStein</span>(a, <span class="number">1</span>), <span class="built_in">BlueStein</span>(b, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) a[i] = (LL) a[i] * <span class="built_in">qpow</span>(b[i], C) % Mod;</span><br><span class="line"><span class="built_in">BlueStein</span>(a, <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> &amp;x : a) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, x);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;BlueStein 算法是处理循环卷积的利器，需要对单位根要有比较清晰的认识。&lt;/p&gt;</summary>
    
    
    
    
    <category term="多项式" scheme="https://mydcwfy.github.io/tags/%E5%A4%9A%E9%A1%B9%E5%BC%8F/"/>
    
    <category term="单位根反演" scheme="https://mydcwfy.github.io/tags/%E5%8D%95%E4%BD%8D%E6%A0%B9%E5%8F%8D%E6%BC%94/"/>
    
  </entry>
  
  <entry>
    <title>Luogu P7812 Dark Forest</title>
    <link href="https://mydcwfy.github.io/2022/06/21/Luogu-P7812/"/>
    <id>https://mydcwfy.github.io/2022/06/21/Luogu-P7812/</id>
    <published>2022-06-21T03:19:56.000Z</published>
    <updated>2022-06-21T07:37:33.068Z</updated>
    
    <content type="html"><![CDATA[<p>哈哈，没事就做提答题。</p><span id="more"></span><p>题意：给定长度为 $n$ 的序列 $a$，定义一个排列 $p$ 的权值为：<br>$$<br>\sum_{i = 1} ^ n p_i a_{p_{i - 1}} a_{p_i} a_{p_{i + 1}}<br>$$<br>请给出一个排列，使得该权值尽量大。$n, a_i\leq 10 ^ 3$。已给出所有数据点。</p><p>显然考虑乱搞。</p><p>有一个比较神秘的思路就是你每次随机交换两个数，然后计算答案。但是有一个问题就是你很容易陷入一个局部最优解，导致怎么都跳不出来。可以考虑类似模拟退火的做法，随机一定概率接受新解。</p><p>这里需要优化复杂度（？）的地方是你需要 $O(1)$ 计算 $val$ 的变化量，可以暴力推式子，如果像我一样懒的人可以把所有影响到的位置重新算一遍，可能略慢一些。</p><p>然后<del>通过 Luogu 题解区</del>我们发现退火后面几个点几乎跑不出来，于是可以考虑固定一个次数， 每多少次直接 <code>std::shuffle</code> 一下，从头计算。这样大概能多过一些点，具体记不太清楚了。</p><p>你会发现你每次 <code>std::shuffle</code> 把前面的功夫全部弃掉，这样也不好，于是可以固定次数时，随机交换一些位置。这时 $n = 1000$，你取 $B = 2\times 10 ^ 7$ 随机交换一些位置，大概可以在 2.5min 通过 Test #10，得到 99 pts 的好成绩，Test #3 跑不过去。</p><p>注意 Test #3 的情况，$a_i = i$，考虑构造，将最大的那一个数 $x$ 放在 $x - 1$ 和 $x - 2$ 中间。这样一定是最大的（也不一定，反正过了）。这样就可以通过。</p><p>另外，你如果中间变量输出比较多的话，你会发现其实 $B = 2\times 10 ^ 7$ 过大，随便取小一点，大概 30s 即能跑过 Test #10，1min 多一点即可通过 Test #10 在讨论区给出的评分标准。当然也可以自己多试试，调整参数，可能得到更优更快的做法。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n, a[N], p[N];</span><br><span class="line">LL val, score[<span class="number">11</span>];</span><br><span class="line">std::mt19937 rnd;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">pre</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> (x + n - <span class="number">2</span>) % n + <span class="number">1</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">nxt</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x % n + <span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">getval</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123; <span class="keyword">return</span> (LL) p[i] * a[p[i]] * a[p[<span class="built_in">pre</span>(i)]] * a[p[<span class="built_in">nxt</span>(i)]]; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">calc</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; ++ i)</span><br><span class="line">        res += <span class="built_in">getval</span>(i);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SA</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="built_in">rnd</span>() % n + <span class="number">1</span>, y = <span class="built_in">rnd</span>() % n + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x == y) <span class="keyword">return</span>;</span><br><span class="line">    LL nw = val;</span><br><span class="line">    std::vector&lt;<span class="keyword">int</span>&gt; v&#123;<span class="built_in">pre</span>(x), x, <span class="built_in">nxt</span>(x)&#125;;</span><br><span class="line">    <span class="keyword">if</span> (std::<span class="built_in">find</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">pre</span>(y)) == v.<span class="built_in">end</span>()) v.<span class="built_in">push_back</span>(<span class="built_in">pre</span>(y));</span><br><span class="line">    <span class="keyword">if</span> (std::<span class="built_in">find</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), y) == v.<span class="built_in">end</span>()) v.<span class="built_in">push_back</span>(y);</span><br><span class="line">    <span class="keyword">if</span> (std::<span class="built_in">find</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">nxt</span>(y)) == v.<span class="built_in">end</span>()) v.<span class="built_in">push_back</span>(<span class="built_in">nxt</span>(y));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x : v) nw -= <span class="built_in">getval</span>(x);</span><br><span class="line">    std::<span class="built_in">swap</span>(p[x], p[y]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x : v) nw += <span class="built_in">getval</span>(x);</span><br><span class="line">    <span class="keyword">if</span> (nw &lt; val) std::<span class="built_in">swap</span>(p[x], p[y]);</span><br><span class="line">    <span class="keyword">else</span> val = nw;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Timer</span> &#123;</span></span><br><span class="line">    ~<span class="built_in">Timer</span>() &#123; std::cout &lt;&lt; <span class="built_in">clock</span>() / <span class="number">1000000.</span> &lt;&lt; <span class="string">&quot; s used&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line">&#125; timer;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">std::ifstream <span class="title">fin</span><span class="params">(argv[<span class="number">1</span>])</span>, <span class="title">fans</span><span class="params">(argv[<span class="number">2</span>])</span></span>;</span><br><span class="line">    fin &gt;&gt; n;</span><br><span class="line">    rnd.<span class="built_in">seed</span>((<span class="keyword">long</span> <span class="keyword">long</span>) <span class="keyword">new</span> <span class="keyword">char</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) fin &gt;&gt; a[i];</span><br><span class="line">    std::vector&lt;<span class="keyword">int</span>&gt; curp&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">4</span>; i &lt;= n; ++ i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i - <span class="number">1</span>; ++ j)</span><br><span class="line">            <span class="keyword">if</span> (curp[j] == i - <span class="number">2</span> || curp[j] == i - <span class="number">1</span>) &#123;</span><br><span class="line">                curp.<span class="built_in">insert</span>(curp.<span class="built_in">begin</span>() + j + <span class="number">1</span>, i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) p[i + <span class="number">1</span>] = curp[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++ i) fans &gt;&gt; score[i];</span><br><span class="line">    fin.<span class="built_in">close</span>(), fans.<span class="built_in">close</span>();</span><br><span class="line">    LL cnt = <span class="number">0</span>;</span><br><span class="line">    val = <span class="built_in">calc</span>(<span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">while</span> (++ cnt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">SA</span>();</span><br><span class="line">        <span class="keyword">if</span> (cnt % <span class="number">1000000</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> curscore = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++ i) curscore += val &gt;= score[i];</span><br><span class="line">            <span class="keyword">if</span> (cnt % <span class="number">2000000</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;SA cnt : %lld   Val : %lld   Score : %d   Goal val : %lld   Delta : %.10lf\n&quot;</span>,</span><br><span class="line">                    cnt, val, curscore, score[<span class="number">9</span>], (val - score[<span class="number">9</span>]) * <span class="number">1.</span> / score[<span class="number">9</span>]);</span><br><span class="line">                <span class="function">std::ofstream <span class="title">fout</span><span class="params">(<span class="string">&quot;test.out&quot;</span>)</span></span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) fout &lt;&lt; p[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">                fout.<span class="built_in">close</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cnt % <span class="number">6000000</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> T = <span class="number">25</span>;</span><br><span class="line">                <span class="keyword">while</span> (T --) std::<span class="built_in">swap</span>(p[<span class="built_in">rnd</span>() % n + <span class="number">1</span>], p[<span class="built_in">rnd</span>() % n + <span class="number">1</span>]);</span><br><span class="line">                val = <span class="built_in">calc</span>(<span class="number">1</span>, n);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;哈哈，没事就做提答题。&lt;/p&gt;</summary>
    
    
    
    
    <category term="随机化" scheme="https://mydcwfy.github.io/tags/%E9%9A%8F%E6%9C%BA%E5%8C%96/"/>
    
    <category term="提交答案" scheme="https://mydcwfy.github.io/tags/%E6%8F%90%E4%BA%A4%E7%AD%94%E6%A1%88/"/>
    
  </entry>
  
  <entry>
    <title>LOJ6503 「雅礼集训 2018 Day4」Magic</title>
    <link href="https://mydcwfy.github.io/2022/06/21/LOJ6503/"/>
    <id>https://mydcwfy.github.io/2022/06/21/LOJ6503/</id>
    <published>2022-06-21T01:25:53.000Z</published>
    <updated>2022-06-21T01:36:43.652Z</updated>
    
    <content type="html"><![CDATA[<p>又一个二项式反演。</p><span id="more"></span><p>题意：给定 $m$ 种颜色，每种 $a_i$ 个球，共 $n$ 个球，任意排列，求恰好有 $k$ 个相邻球颜色相同的方案数，对 998244353 取模。$m\leq 2\times 10 ^ 4$，$n\leq 10 ^ 5$。</p><p>看到恰好，二项式反演，于是变为了计算钦定 $k$ 个的答案。</p><p>对于一种颜色，如果我们钦定他有 $i$ 个相邻位置相同，假设共 $a$ 个，那么方案数可以使用插板法计算，为 $\binom{a - 1}i$。</p><p>卷积不同的颜色时，我们可以直接使用 EGF，请注意，我们使用 $\binom{a - 1}i$ 的时候，已经默认这 $a - i$ 段是有序的了，于是直接计算使用 EGF，答案是正确的。</p><p>分治 NTT 卷积即可，时间复杂度 $O(n\log ^ 2 n)$，可以通过。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line"><span class="keyword">auto</span> solve = [&amp;](<span class="keyword">auto</span> &amp;self, poly *a, <span class="keyword">int</span> l, <span class="keyword">int</span> r) -&gt; poly &#123;</span><br><span class="line"><span class="keyword">if</span> (l == r) <span class="keyword">return</span> a[l];</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">self</span>(self, a, l, mid) * <span class="built_in">self</span>(self, a, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> n, m, k;</span><br><span class="line">std::vector&lt;poly&gt; all;</span><br><span class="line">std::cin &gt;&gt; m &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, v; i &lt;= m; ++ i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;v);</span><br><span class="line"><span class="function">poly <span class="title">cur</span><span class="params">(v)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v; ++ i)</span><br><span class="line">cur[i] = (LL) <span class="built_in">C</span>(v - <span class="number">1</span>, v - <span class="number">1</span> - i) * infact[v - i] % Mod;</span><br><span class="line">all.<span class="built_in">push_back</span>(cur);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">auto</span> g = <span class="built_in">solve</span>(solve, all.<span class="built_in">data</span>(), <span class="number">0</span>, (<span class="keyword">int</span>) all.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n - m; ++ i) g[i] = (LL) g[i] * fact[n - i] % Mod;</span><br><span class="line"><span class="comment">/*for (int &amp;x : g) printf(&quot;%d &quot;, x);</span></span><br><span class="line"><span class="comment">puts(&quot;&quot;);*/</span></span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = k, op = <span class="number">1</span>; i &lt;= n - m; ++ i, op = Mod - op)</span><br><span class="line">res = (res + (LL) op * <span class="built_in">C</span>(i, k) % Mod * g[i]) % Mod;</span><br><span class="line">std::cout &lt;&lt; res &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;又一个二项式反演。&lt;/p&gt;</summary>
    
    
    
    
    <category term="多项式" scheme="https://mydcwfy.github.io/tags/%E5%A4%9A%E9%A1%B9%E5%BC%8F/"/>
    
    <category term="生成函数" scheme="https://mydcwfy.github.io/tags/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/"/>
    
    <category term="二项式反演" scheme="https://mydcwfy.github.io/tags/%E4%BA%8C%E9%A1%B9%E5%BC%8F%E5%8F%8D%E6%BC%94/"/>
    
  </entry>
  
  <entry>
    <title>Luogu P6516 Quark and Graph</title>
    <link href="https://mydcwfy.github.io/2022/06/21/Luogu-P6516/"/>
    <id>https://mydcwfy.github.io/2022/06/21/Luogu-P6516/</id>
    <published>2022-06-21T00:22:27.000Z</published>
    <updated>2022-06-21T00:44:43.343Z</updated>
    
    <content type="html"><![CDATA[<p>模板一点的生成函数题目。</p><span id="more"></span><p>题意：给定 $n$ 个点到 1 的距离，问有多少边数为 $m$ 的无向图满足该限制。边权均为 1，设 $cnt_i$ 表示距离为 $i$ 的点数，则 $n\leq 10 ^ 5$，$m\leq 2\times 10 ^ 5$，$\sum_i cnt_icnt_{i - 1}\leq 2\times 10 ^ 5$，3s，保证至少有一组解。</p><p>首先，我们容易发现，按照 $dis$ 分层后，只可能在相邻层和同层直接连边，不可能跨层连边。现在分别求他们的生成函数。</p><p>首先考虑邻层的生成函数。对于一个点来说，他可以任意向前一层的点连边，但是不能不连边（不然没法保证距离），于是单个点的生成函数为 $(1 + x) ^ {cnt_{i - 1}} - 1$，然后有 $cnt_i$ 个，于是为 $((1 + x) ^ {cnt_{i - 1}} - 1) ^ {cnt_i}$。由于题目保证了 $\sum_i cnt_icnt_{i - 1}\leq 2\times 10 ^ 5$，所以该算法可以直接分治 NTT 计算，时间复杂度 $O(m\log ^ 2 m)$。</p><p>然后考虑同层的生成函数。对于一层来说，我们有 $\binom{cnt_i}2$ 条边可供选择，假设总可选数记为 $T = \sum_i\binom{cnt_i}2$，于是可以得到生成函数为 $\sum_{i = 1} ^ T x ^ i \binom Ti$，由于最后答案取的 $m$，只需要到 $m$ 即可。然后有可能 $T$ 比较大，于是使用 Lucas 定理，写出拆分组合数的式子就可以简单的把 $T$ 直接模 998244353。</p><p>最后把两个卷积一下，总时间复杂度 $O(m\log ^ 2 m)$，可以通过。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">std::cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="function">poly <span class="title">cnt</span><span class="params">(n)</span></span>;</span><br><span class="line">std::vector&lt;poly&gt; all;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x; i &lt;= n; ++ i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x), cnt[x] ++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++ i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!cnt[i]) <span class="keyword">break</span>;</span><br><span class="line"><span class="function">poly <span class="title">cur</span><span class="params">(cnt[i - <span class="number">1</span>] + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cnt[i - <span class="number">1</span>]; ++ j) cur[j] = <span class="built_in">C</span>(cnt[i - <span class="number">1</span>], j);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> cs = <span class="number">1</span>; cs &lt;= cnt[i]; ++ cs) all.<span class="built_in">push_back</span>(cur);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">auto</span> solve = [&amp;](<span class="keyword">auto</span> &amp;self, poly *a, <span class="keyword">int</span> l, <span class="keyword">int</span> r) -&gt; poly &#123;</span><br><span class="line"><span class="keyword">if</span> (l == r) <span class="keyword">return</span> a[l];</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">self</span>(self, a, l, mid) * <span class="built_in">self</span>(self, a, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">auto</span> res = <span class="built_in">solve</span>(solve, all.<span class="built_in">data</span>(), <span class="number">0</span>, (<span class="keyword">int</span>) all.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) <span class="built_in">adj</span>(tot += <span class="built_in">C</span>(cnt[i], <span class="number">2</span>) - Mod);</span><br><span class="line"><span class="function">poly <span class="title">g</span><span class="params">(m)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, dn = <span class="number">1</span>; i &lt; m &amp;&amp; i &lt;= tot; ++ i, dn = (LL) dn * (tot - i + <span class="number">1</span>) % Mod)</span><br><span class="line">g[i] = (LL) dn * infact[i] % Mod;</span><br><span class="line">res = res * g;</span><br><span class="line">std::cout &lt;&lt; res[m] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;模板一点的生成函数题目。&lt;/p&gt;</summary>
    
    
    
    
    <category term="组合数学" scheme="https://mydcwfy.github.io/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
    <category term="多项式" scheme="https://mydcwfy.github.io/tags/%E5%A4%9A%E9%A1%B9%E5%BC%8F/"/>
    
    <category term="生成函数" scheme="https://mydcwfy.github.io/tags/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/"/>
    
    <category term="分治" scheme="https://mydcwfy.github.io/tags/%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>Luogu P5860 Counting Trees</title>
    <link href="https://mydcwfy.github.io/2022/06/20/Luogu-P5860/"/>
    <id>https://mydcwfy.github.io/2022/06/20/Luogu-P5860/</id>
    <published>2022-06-20T12:15:02.000Z</published>
    <updated>2022-06-20T12:51:20.585Z</updated>
    
    <content type="html"><![CDATA[<p>生成负次幂的一种解决办法。</p><span id="more"></span><p>题意：给定每个点的度数，任选一些点使得他们能组成一棵树。$n\leq 5\times 10 ^ 5$，6s。</p><p>首先给出结论：</p><blockquote><p> $n$ 个点能组成树的充要条件是 $n$ 个点的度数和为 $2n - 2$（每个点度数 $\geq 1$）。</p></blockquote><p>必要性易得。充分性可以发现一个点的最大度数为 $n - 1$，不可能多出来度数没有连。严谨证明可以考虑 prufer 序列，<del>但我不会</del>。</p><p>由于 $n$ 并没有定，我们需要把 $2n - 2$ 拆给每一个数，于是对每一个数度数 -2，于是我们需要求的就是 $\prod(1 + x ^ {d_i - 2})$ 的 $x ^ {-2}$ 的系数。</p><p>负数没学过什么卷积，于是可以考虑<strong>正负各自卷积，最后倒过来合并</strong>。0 次项最后当常数乘上去即可。</p><p>容易发现负次幂只有 -1，假设有 $m$ 个，容易发现多项式已经确定，为 $\sum_{i = 0} ^ m \binom mix ^ {-i}$。下面考虑正次幂的计算。</p><p>看似我们可以 FFT，但是每个多项式虽然只有两个非零项，但是次数很高，无法计算。</p><p>还是考虑先取 $\ln$，于是我们需要计算 $\ln(1 + x ^ d)$（默认已经减了 2）。$\ln$ 可以展开得到：$-\sum_{i = 1} \dfrac{(-x) ^ {di}}i$。这个式子可以把相同的 $d$ 一起计算，容易得到复杂度为 $O(n\ln n)$。然后 $\exp$ 回去即可得到乘起来的式子。</p><p>最后我们把<strong>负的翻转到正次幂，卷积一下平移回去即可得到</strong>。在这里我们需要平移 $m$ 位，于是最后输出 $x ^ {m - 2}$ 的次数即可。注意乘上度数为 2 的贡献，为 $2 ^ {cnt}$。</p><p>总时间复杂度 $O(n\log n)$<del>，$\exp$ 这么大常数的东西居然能在 500ms 左右跑 $5\times 10 ^ 5$，令人震惊</del>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">std::cin &gt;&gt; n;</span><br><span class="line"><span class="function">poly <span class="title">cnt</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, v; i &lt;= n; ++ i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;v), cnt[v] ++;</span><br><span class="line"><span class="keyword">int</span> m = cnt[<span class="number">1</span>], pw = cnt[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">if</span> (m &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>), <span class="number">0</span>;</span><br><span class="line"><span class="function">poly <span class="title">f</span><span class="params">(m - <span class="number">1</span>)</span>, <span class="title">g</span><span class="params">(m + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m - <span class="number">2</span>; ++ i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v = cnt[i + <span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>, op = <span class="number">1</span>; j * i + <span class="number">1</span> &lt; m; ++ j, op = Mod - op)</span><br><span class="line">f[i * j] = (f[i * j] + (LL) op * v % Mod * inv[j]) % Mod;</span><br><span class="line">&#125;</span><br><span class="line">f = <span class="built_in">Exp</span>(f);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; ++ i) g[i] = <span class="built_in">C</span>(m, i);</span><br><span class="line">f = f * g;</span><br><span class="line"><span class="keyword">int</span> res = (LL) f[m - <span class="number">2</span>] * <span class="built_in">qpow</span>(<span class="number">2</span>, pw) % Mod;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;生成负次幂的一种解决办法。&lt;/p&gt;</summary>
    
    
    
    
    <category term="多项式" scheme="https://mydcwfy.github.io/tags/%E5%A4%9A%E9%A1%B9%E5%BC%8F/"/>
    
    <category term="生成函数" scheme="https://mydcwfy.github.io/tags/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
</feed>
