<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>mydcwfy&#39;s Blog</title>
  
  
  <link href="https://mydcwfy.github.io/atom.xml" rel="self"/>
  
  <link href="https://mydcwfy.github.io/"/>
  <updated>2021-12-16T13:44:39.352Z</updated>
  <id>https://mydcwfy.github.io/</id>
  
  <author>
    <name>mydcwfy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CF Round#758</title>
    <link href="https://mydcwfy.github.io/2021/12/15/CF-Round-758/"/>
    <id>https://mydcwfy.github.io/2021/12/15/CF-Round-758/</id>
    <published>2021-12-15T13:37:44.000Z</published>
    <updated>2021-12-16T13:44:39.352Z</updated>
    
    <content type="html"><![CDATA[<p>比赛记录：ABC Accepted，Scores：1645，Rank #727（似乎有点巧，<code>Fly727</code>，Rating 829 -&gt; 1239。</p><p>改题进度：ABCD Accepted。</p><span id="more"></span><p><a href="https://codeforces.com/contest/1608">比赛位置</a></p><p>本身应该出校吃东西的，但是因为 18:05 要一次难得的 CF 比赛，于是放弃了吃饭。</p><h2 id="赛时"><a href="#赛时" class="headerlink" title="赛时"></a>赛时</h2><p>一开始看 A，发现是签到题，2 min 水完。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t --)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到 B，发现有一些神奇的题。</p><p>发现按照波峰波谷直接构造就可以了，但是有些难写，一直到了 45 min，还错了一发，终于过了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (t --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;n, &amp;a, &amp;b);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">abs</span>(a - b) &gt; <span class="number">1</span>) <span class="built_in">noans</span>();</span><br><span class="line">        <span class="keyword">if</span> (a == b)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((a + <span class="number">1</span>) * <span class="number">2</span> &gt; n) <span class="built_in">noans</span>();</span><br><span class="line">            <span class="keyword">int</span> st1 = a + <span class="number">2</span>, st2 = a + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = n, t = <span class="number">0</span>; t &lt;= a; t ++, j -= <span class="number">2</span>)</span><br><span class="line">                ans[j] = st1 ++, ans[j - <span class="number">1</span>] = st2 --;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - ((a + <span class="number">1</span>) &lt;&lt; <span class="number">1</span>); i ++) ans[i] = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = n - ((a + <span class="number">1</span>) &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>; i &lt;= n; ++ i) ans[i] += n - ((a + <span class="number">1</span>) &lt;&lt; <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a == b + <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a * <span class="number">2</span> + <span class="number">1</span> &gt; n) <span class="built_in">noans</span>();</span><br><span class="line">            <span class="keyword">int</span> st1 = a + <span class="number">1</span>, st2 = a + <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = n, t = <span class="number">0</span>; t &lt;= b; t ++, j -= <span class="number">2</span>)</span><br><span class="line">                ans[j] = st1 --, ans[j - <span class="number">1</span>] = st2 ++;</span><br><span class="line">            ans[n - ((b + <span class="number">1</span>) &lt;&lt; <span class="number">1</span>)] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - (a &lt;&lt; <span class="number">1</span>) - <span class="number">1</span>; i ++) ans[i] = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = n - (a &lt;&lt; <span class="number">1</span>); i &lt;= n; ++ i) ans[i] += n - (a &lt;&lt; <span class="number">1</span>) - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a == b - <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (b * <span class="number">2</span> + <span class="number">1</span> &gt; n) <span class="built_in">noans</span>();</span><br><span class="line">            <span class="keyword">int</span> st1 = b * <span class="number">2</span> + <span class="number">1</span>, st2 = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>, t = <span class="number">0</span>; t &lt;= a; ++ t, j += <span class="number">2</span>)</span><br><span class="line">                ans[j] = st1 --, ans[j + <span class="number">1</span>] = st2 ++;</span><br><span class="line">            ans[b * <span class="number">2</span> + <span class="number">1</span>] = b + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = (b + <span class="number">1</span>) &lt;&lt; <span class="number">1</span>; i &lt;= n; ++ i) ans[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ans[i]);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>看到 C 题，感觉是一个二维偏序问题，和 Dyd 讨论了一会，发现可以先排序，后一个向前一个连一条边表示可以战胜，是一个 Tarjan 可以快速搞完，就可以了。但是确实如果是我自己想的话，大概率是想不出来的。</p><p>但是开黑就是好。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmpa</span><span class="params">(<span class="keyword">const</span> Item &amp;k1, <span class="keyword">const</span> Item &amp;k2)</span></span>&#123;<span class="keyword">return</span> k1.a &lt; k2.a;&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmpb</span><span class="params">(<span class="keyword">const</span> Item &amp;k1, <span class="keyword">const</span> Item &amp;k2)</span></span>&#123;<span class="keyword">return</span> k1.b &lt; k2.b;&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dfn[x] = low[x] = ++ tot;</span><br><span class="line">    stk[++ top] = x, ins[x] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> j : g[x])</span><br><span class="line">        <span class="keyword">if</span> (!dfn[j])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">tarjan</span>(j);</span><br><span class="line">            low[x] = <span class="built_in">min</span>(low[x], low[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ins[j]) low[x] = <span class="built_in">min</span>(low[x], dfn[j]);</span><br><span class="line">    <span class="keyword">if</span> (low[x] != dfn[x]) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> now;</span><br><span class="line">    cnt ++;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        now = stk[top --];</span><br><span class="line">        bel[now] = cnt;</span><br><span class="line">        scc[cnt].<span class="built_in">push_back</span>(now);</span><br><span class="line">        ins[now] = <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">while</span> (now != x);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        tot = cnt = top = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) g[i].<span class="built_in">clear</span>(), scc[i].<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) k[i].id = i, dfn[i] = low[i] = <span class="number">0</span>, ins[i] = ok[i] = <span class="literal">false</span>, deg[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;k[i].a);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;k[i].b);</span><br><span class="line">        <span class="built_in">sort</span>(k + <span class="number">1</span>, k + n + <span class="number">1</span>, cmpa);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++ i) g[k[i + <span class="number">1</span>].id].<span class="built_in">push_back</span>(k[i].id);</span><br><span class="line">        <span class="built_in">sort</span>(k + <span class="number">1</span>, k + n + <span class="number">1</span>, cmpb);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++ i) g[k[i + <span class="number">1</span>].id].<span class="built_in">push_back</span>(k[i].id);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i)</span><br><span class="line">            <span class="keyword">if</span> (!dfn[i]) <span class="built_in">tarjan</span>(i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= n; ++ x)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> j : g[x])</span><br><span class="line">                <span class="keyword">if</span> (bel[j] != bel[x]) deg[bel[j]] ++;</span><br><span class="line">        <span class="keyword">int</span> deg0 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= cnt; ++ x) deg0 += !deg[x];</span><br><span class="line">        <span class="keyword">if</span> (deg0 == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= cnt; ++ x)</span><br><span class="line">                <span class="keyword">if</span> (deg[x] == <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">auto</span> j : scc[x]) ok[j] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= n; ++ x)</span><br><span class="line">            <span class="keyword">if</span> (ok[x]) <span class="built_in">putchar</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">putchar</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到 D 题，才 70 min。发现只有两种可能，一种是神仙 DP 题，另一种是构造 + 组合题。</p><p>但是我和 Dyd 想了很久的 DP 还是没有想出来。我们想了很久拆开一个多米诺骨牌，然后重新组合，但是和题目求的东西不一样。</p><p>一直到最后 5 min，我才发现似乎组合是更靠谱的，但是苦于时间过短，没有想出构造的方案。</p><p>赛后 System Tests，还是有些紧张，但幸好没有挂分。</p><p>看到评论，发现一堆人吐槽 Pretests too weak，说 C、D 的题的 Pretests 几乎等于没有。</p><p>然后好多人都是挂了，排名略微靠前。</p><h2 id="赛后"><a href="#赛后" class="headerlink" title="赛后"></a>赛后</h2><h3 id="D"><a href="#D" class="headerlink" title="D"></a>D</h3><p>开始改 D，发现是一个神仙的构造题。</p><p>首先，必须保证 B 的个数一定是 $n$。可以考虑排列组合，是 ${2 * n - b - w \choose n - b}$。注意判断无解。</p><p>如果有 BB 或 WW 的话，一定可以构造：一定 BB 和 WW 的个数是一样的，然后我们可以构造成 <code>BB WW BB WW...</code>，然后如果是 BW 的话，直接丢在 <code>WW BB</code> 中间，否则丢在 <code>BB WW</code> 中间。注意丢进去后还是 <code>WW BW BB</code>，仍然可以继续放 BW，WB 同理。</p><p>那么我们就减去没有 BB WW 的。让每一个都是 WB / BW，统计个数（$0\sim 2$）计入答案。</p><p>但是我们发现还有特例：都是一种颜色的话，是可以满足条件的。判断一下要加上。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">char</span> c, <span class="keyword">char</span> cmp)</span></span>&#123;<span class="keyword">return</span> c == <span class="string">&#x27;?&#x27;</span> || c == cmp;&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    flag1 = flag2 = <span class="literal">true</span>, ext = <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, op);</span><br><span class="line">        cntb += op[<span class="number">0</span>] == <span class="string">&#x27;B&#x27;</span>, cntb += op[<span class="number">1</span>] == <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">        cntw += op[<span class="number">0</span>] == <span class="string">&#x27;W&#x27;</span>, cntw += op[<span class="number">1</span>] == <span class="string">&#x27;W&#x27;</span>;</span><br><span class="line">        ext *= ((<span class="built_in">check</span>(op[<span class="number">0</span>], <span class="string">&#x27;B&#x27;</span>) &amp; <span class="built_in">check</span>(op[<span class="number">1</span>], <span class="string">&#x27;W&#x27;</span>)) + (<span class="built_in">check</span>(op[<span class="number">0</span>], <span class="string">&#x27;W&#x27;</span>) &amp; <span class="built_in">check</span>(op[<span class="number">1</span>], <span class="string">&#x27;B&#x27;</span>)));</span><br><span class="line">        ext %= Mod;</span><br><span class="line">        flag1 &amp;= <span class="built_in">check</span>(op[<span class="number">0</span>], <span class="string">&#x27;B&#x27;</span>) &amp; <span class="built_in">check</span>(op[<span class="number">1</span>], <span class="string">&#x27;W&#x27;</span>);</span><br><span class="line">        flag2 &amp;= <span class="built_in">check</span>(op[<span class="number">0</span>], <span class="string">&#x27;W&#x27;</span>) &amp; <span class="built_in">check</span>(op[<span class="number">1</span>], <span class="string">&#x27;B&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cntb &gt; n || cntw &gt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; cntb &lt;&lt; &#x27; &#x27; &lt;&lt; cntw &lt;&lt; &#x27; &#x27; &lt;&lt; ext &lt;&lt; endl;</span></span><br><span class="line">    ans = fact[<span class="number">2</span> * n - cntw - cntb] * infact[n - cntb] % Mod * infact[n - cntw] % Mod;</span><br><span class="line">    ans = (ans - ext + flag1 + flag2 + Mod) % Mod;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;比赛记录：ABC Accepted，Scores：1645，Rank #727（似乎有点巧，&lt;code&gt;Fly727&lt;/code&gt;，Rating 829 -&amp;gt; 1239。&lt;/p&gt;
&lt;p&gt;改题进度：ABCD Accepted。&lt;/p&gt;</summary>
    
    
    
    
    <category term="做题记录" scheme="https://mydcwfy.github.io/tags/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
    <category term="CF" scheme="https://mydcwfy.github.io/tags/CF/"/>
    
  </entry>
  
  <entry>
    <title>后缀数组</title>
    <link href="https://mydcwfy.github.io/2021/12/13/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/"/>
    <id>https://mydcwfy.github.io/2021/12/13/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/</id>
    <published>2021-12-13T14:25:44.000Z</published>
    <updated>2021-12-13T14:26:42.251Z</updated>
    
    <content type="html"><![CDATA[<p>和后缀自动机几乎是字符串最难的两个专题了。</p><p><strong>注意几乎不能相互替代。</strong></p><span id="more"></span><h3 id="1-主要思想"><a href="#1-主要思想" class="headerlink" title="1. 主要思想"></a>1. 主要思想</h3><p>首先，我们一般要依靠两个算法：</p><ol><li>倍增 $O(n\log n)$</li><li>DC3 $O(n)$，常数较大。</li></ol><p>该算法是针对字符串的，可以在 $O(n\log n)$ 的时间内将所有的后缀全部排序。</p><p>假设下标从1 开始，其中从 $i$ 开始的后缀被称为第 $i$ 个后缀。</p><p>排序后，我们可以得到 $sa[n]$ 的数组，代表排名为 $i$ 的是第几个后缀。</p><p>还可以得到 $rk[n]$ 代表第 $i$ 个后缀的排名是多少。</p><p>还有一个比较重要而常用的数组 $height[n]$，表示 $sa[i]$ 和 $sa[i-1]$ 的最长公共前缀。</p><p>主要学习倍增法。</p><h3 id="2-实现方法"><a href="#2-实现方法" class="headerlink" title="2. 实现方法"></a>2. 实现方法</h3><p>首先，我们按第一个字符进行排序，相对位置不变（即如果有相同的，在前面的还在前面）。</p><p>使用倍增。</p><p>假设当前已经处理了前 $k$ 个字符，我们将前 $k$ 个字符当做第一关键字，将接着的 $k$ 个字符当做第二关键字。</p><p>前 $k$ 个字符可以离散化，接着的 $k$ 个字符也可以离散化。</p><p>然后每一次排序就可以使用基数排序。</p><p>如果有两个关键字，可以先按第二关键字排序，再按第一关键字排序。</p><p>由于基数排序是稳定排序，我们就没有影响这里的前后顺序。</p><p>怎样求和利用 $height[]$ 呢？</p><p>我们定义 $lcp(i,j)$ 为 $s[sa[i]]$ 与 $s[sa[j]]$ 的最长公共前缀。</p><p><strong>证明1：</strong>$lcp(i,j)=\min(lcp(i,k),lcp(k,j))[i\leq k \leq j]$。</p><p>首先证明 $\geq$。</p><p>很明显，如果 $lcp(i,k)&gt;lcp(i,j),lcp(k,j)&gt;lcp(i,j)$，那么 $i$ 和 $k$、$k$ 和 $j$ 都有更长的后缀，也就是 $i$ 和 $j$ 有更长的后缀。</p><p>再证明 $\leq$。</p><p>假设 $i$、$j$、$k$ 前 $lcp(i,j)$ 的串为 $A,B,C$。</p><p>很明显，有 $A\leq B\leq C$，又有 $A=C$，则 $A=B=C$。</p><p><strong>证毕</strong>。</p><p>为了方便，我们假设 $h(i)=height[rk[i]]$</p><p><strong>证明2：</strong> $h(i)\geq h(i-1)-1$。</p><p>假设 $i-1$ 的前面一个是第 $k$ 个后缀，那么 $i-1$ 与 $k$ 的最长公共前缀就是 $h(i-1)$。</p><p>都去掉第一个字符，就可以得到 $k+1$ 与 $i$ 的公共前缀是 $h(i-1)-1$。</p><p>因为 $k$ 在 $i-1$ 前面，那么 $k+1$ 在 $i$ 的前面。</p><p>由前面的证明可以得到 $h(i)$ 大于等于 $i$ 与 $k+1$ 的最长公共前缀长度。</p><p>即 $h(i)\geq h(i-1)-1$。</p><p><strong>证毕</strong>。</p><p>有了这个结论，我们在每次求 $height[i]$ 时，就可以使用该结论。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> sa[N],rk[N],height[N],x[N],y[N],n,m,c[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_sa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) c[x[i]=s[i]]++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) c[i]+=c[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=n;i;i--) sa[c[x[i]]--]=i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=n-k+<span class="number">1</span>;i&lt;=n;++i) y[++num]=i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">            <span class="keyword">if</span> (sa[i]&gt;k) y[++num]=sa[i]-k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) c[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) c[x[i]]++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=m;++i) c[i]+=c[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=n;i;i--) sa[c[x[y[i]]]--]=y[i],y[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">swap</span>(x,y);</span><br><span class="line">        x[sa[<span class="number">1</span>]]=<span class="number">1</span>,num=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i)</span><br><span class="line">            <span class="keyword">if</span> (y[sa[i]]==y[sa[i<span class="number">-1</span>]]&amp;&amp;y[sa[i]+k]==y[sa[i<span class="number">-1</span>]+k])</span><br><span class="line">                x[sa[i]]=num;</span><br><span class="line">            <span class="keyword">else</span> x[sa[i]]=++num;</span><br><span class="line">        <span class="keyword">if</span> (num==n) <span class="keyword">return</span>;</span><br><span class="line">        m=num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_height</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) rk[sa[i]]=i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (rk[i]==<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> j=sa[rk[i]<span class="number">-1</span>],k=<span class="built_in">max</span>(<span class="number">0</span>,height[rk[i<span class="number">-1</span>]]<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">while</span> (i+k&lt;=n&amp;&amp;j+k&lt;=n&amp;&amp;s[i+k]==s[j+k]) k++;</span><br><span class="line">        height[rk[i]]=k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line">    n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);m=<span class="string">&#x27;z&#x27;</span>;</span><br><span class="line">    <span class="built_in">get_sa</span>();<span class="built_in">get_height</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,sa[i]);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="comment">/*for (int i=1;i&lt;=n;++i) printf(&quot;%d &quot;,height[i]);*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-例题"><a href="#3-例题" class="headerlink" title="3. 例题"></a>3. 例题</h3><h4 id="T1：-NOI2015-品酒大会"><a href="#T1：-NOI2015-品酒大会" class="headerlink" title="T1：[NOI2015]品酒大会"></a>T1：[NOI2015]品酒大会</h4><p><a href="https://www.luogu.com.cn/problem/P2178">题目传送门 Luogu</a></p><p><a href="https://www.acwing.com/problem/content/1006/">题目传送门 AcWing</a></p><p>能很好的体现后缀数组的作用和使用方法。</p><p>在使用后缀数组后，我们将会得到所有后缀的排名 $sa[]$，以及所有后缀与前一名的最大公共前缀 $height[]$。</p><p>首先考虑后缀的最大公共前缀与 $r$ 的关系。</p><p>由 “证明1” 可得，如果 $height[i]&lt;r$，则 $i$ 上面的和下面的不可能 $lcp$ 大于等于 $r$。</p><p>同时我们也可以得到结论：如果将所有分成几段，则段内一定都是 $r$ 相似。</p><p>怎样维护最大值？</p><p>可以维护最大值和次大值，乘起来即可。</p><p>由于有负数，也要维护最小值和次小值。</p><p>由于有些绕，所以得认真打。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>,<span class="keyword">long</span> <span class="keyword">long</span>&gt; PLL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>,INF=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll lINF=<span class="number">2e18</span>;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> sa[N],height[N],rk[N],c[N],x[N],y[N],n,m;</span><br><span class="line"><span class="keyword">int</span> min1[N],min2[N],max1[N],max2[N],w[N],p[N],sz[N];</span><br><span class="line">PLL ans[N];</span><br><span class="line">ll cnt=<span class="number">0</span>,maxv=-lINF;</span><br><span class="line">vector &lt;<span class="keyword">int</span>&gt; hs[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_sa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) c[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) c[x[i]=s[i]]++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=m;++i) c[i]+=c[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=n;i;i--) sa[c[x[i]]--]=i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=n-k+<span class="number">1</span>;i&lt;=n;++i) y[++num]=i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">            <span class="keyword">if</span> (sa[i]&gt;k) y[++num]=sa[i]-k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) c[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) c[x[y[i]]]++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=m;++i) c[i]+=c[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=n;i;i--) sa[c[x[y[i]]]--]=y[i],y[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">swap</span>(x,y);</span><br><span class="line">        x[sa[<span class="number">1</span>]]=<span class="number">1</span>,num=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i)</span><br><span class="line">            <span class="keyword">if</span> (y[sa[i]]==y[sa[i<span class="number">-1</span>]]&amp;&amp;y[sa[i]+k]==y[sa[i<span class="number">-1</span>]+k]) x[sa[i]]=num;</span><br><span class="line">            <span class="keyword">else</span> x[sa[i]]=++num;</span><br><span class="line">        <span class="keyword">if</span> (num==n) <span class="keyword">break</span>;</span><br><span class="line">        m=num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_height</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) rk[sa[i]]=i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (rk[i]==<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> j=sa[rk[i]<span class="number">-1</span>],k=<span class="built_in">max</span>(<span class="number">0</span>,height[rk[i<span class="number">-1</span>]]<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">while</span> (j+k&lt;=n&amp;&amp;i+k&lt;=n&amp;&amp;s[i+k]==s[j+k]) k++;</span><br><span class="line">        height[rk[i]]=k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p[x]!=x) p[x]=<span class="built_in">find</span>(p[x]);</span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x<span class="number">-1ll</span>)*x/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">PLL <span class="title">calc</span><span class="params">(<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;hs[r].<span class="built_in">size</span>();++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> &amp;x=hs[r][i];</span><br><span class="line">        <span class="keyword">int</span> a=<span class="built_in">find</span>(x<span class="number">-1</span>),b=<span class="built_in">find</span>(x);</span><br><span class="line">        cnt-=<span class="built_in">get</span>(sz[a]),cnt-=<span class="built_in">get</span>(sz[b]);</span><br><span class="line">        p[a]=b;sz[b]+=sz[a];</span><br><span class="line">        cnt+=<span class="built_in">get</span>(sz[b]);</span><br><span class="line">        <span class="keyword">if</span> (max1[a]&gt;=max1[b])</span><br><span class="line">        &#123;</span><br><span class="line">            max2[b]=<span class="built_in">max</span>(max1[b],max2[a]);</span><br><span class="line">            max1[b]=max1[a];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (max1[a]&gt;max2[b]) max2[b]=max1[a];</span><br><span class="line">        <span class="keyword">if</span> (min1[a]&lt;=min1[b])</span><br><span class="line">        &#123;</span><br><span class="line">            min2[b]=<span class="built_in">min</span>(min1[b],min2[a]);</span><br><span class="line">            min1[b]=min1[a];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (min1[a]&lt;min2[b]) min2[b]=min1[a];</span><br><span class="line">        maxv=<span class="built_in">max</span>(maxv,<span class="built_in">max</span>(<span class="number">1ll</span>*max1[b]*max2[b],<span class="number">1ll</span>*min1[b]*min2[b]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (maxv==-lINF) <span class="keyword">return</span> <span class="built_in">make_pair</span>(<span class="number">1ll</span>*cnt,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">make_pair</span>(cnt,maxv);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);m=<span class="string">&#x27;z&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,w+i);</span><br><span class="line">    <span class="built_in">get_sa</span>();<span class="built_in">get_height</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        p[i]=i,sz[i]=<span class="number">1</span>;</span><br><span class="line">        min1[i]=w[sa[i]],min2[i]=INF;</span><br><span class="line">        max1[i]=w[sa[i]],max2[i]=-INF;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) hs[height[i]].<span class="built_in">push_back</span>(i);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i) ans[i]=<span class="built_in">calc</span>(i);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i) <span class="built_in">printf</span>(<span class="string">&quot;%lld %lld\n&quot;</span>,ans[i].first,ans[i].second); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T2：-SDOI2016-生成魔咒"><a href="#T2：-SDOI2016-生成魔咒" class="headerlink" title="T2：[SDOI2016]生成魔咒"></a>T2：[SDOI2016]生成魔咒</h4><p><a href="https://www.luogu.com.cn/problem/P4070">题目传送门 Luogu</a></p><p><a href="https://www.acwing.com/problem/content/2574/">题目传送门 AcWing</a></p><p>首先容易得到，所有后缀的所有前缀集合就是所有子串的集合。</p><p><strong>证明3：</strong>在最长公共前缀内的，前面都出现过；在外面的，前面都没有出现过。</p><p>前一条易证。</p><p>如果在外面的某一个前缀在前面出现过，$lcp(i,i-1)\geq lcp(i,k)$，则与已知矛盾。</p><p>至于从后面加，我们可以将序列翻转，最后再翻转输出即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> s[N];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> c[N],sa[N],height[N],x[N],y[N],num,rk[N];</span><br><span class="line"><span class="keyword">int</span> u[N],d[N];</span><br><span class="line">map &lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; Hs;</span><br><span class="line">ll res,ans[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_sa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) c[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) c[x[i]=s[i]]++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=m;++i) c[i]+=c[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=n;i;i--) sa[c[x[i]]--]=i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=n-k+<span class="number">1</span>;i&lt;=n;++i) y[++num]=i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">            <span class="keyword">if</span> (sa[i]&gt;k) y[++num]=sa[i]-k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) c[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) c[x[y[i]]]++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=m;++i) c[i]+=c[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=n;i;i--) sa[c[x[y[i]]]--]=y[i],y[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">swap</span>(x,y);</span><br><span class="line">        x[sa[<span class="number">1</span>]]=<span class="number">1</span>,num=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i)</span><br><span class="line">            <span class="keyword">if</span> (y[sa[i]]==y[sa[i<span class="number">-1</span>]]&amp;&amp;y[sa[i]+k]==y[sa[i<span class="number">-1</span>]+k]) x[sa[i]]=num;</span><br><span class="line">            <span class="keyword">else</span> x[sa[i]]=++num;</span><br><span class="line">        <span class="keyword">if</span> (num==n) <span class="keyword">break</span>;</span><br><span class="line">        m=num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_height</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) rk[sa[i]]=i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (rk[i]==<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> j=sa[rk[i]<span class="number">-1</span>],k=<span class="built_in">max</span>(<span class="number">0</span>,height[rk[i<span class="number">-1</span>]]<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">while</span> (j+k&lt;=n&amp;&amp;i+k&lt;=n&amp;&amp;s[i+k]==s[j+k]) k++;</span><br><span class="line">        height[rk[i]]=k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Hs.<span class="built_in">find</span>(x)==Hs.<span class="built_in">end</span>()) Hs[x]=++m;</span><br><span class="line">    <span class="keyword">return</span> Hs[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=n;i;--i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;s[i]);</span><br><span class="line">        s[i]=<span class="built_in">get</span>(s[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">get_sa</span>();<span class="built_in">get_height</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) res+=n-sa[i]+<span class="number">1</span>-height[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) u[i]=i<span class="number">-1</span>,d[i]=i+<span class="number">1</span>;</span><br><span class="line">    d[<span class="number">0</span>]=<span class="number">1</span>,d[n+<span class="number">1</span>]=n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[i]=res;</span><br><span class="line">        <span class="keyword">int</span> k=rk[i],j=d[k];</span><br><span class="line">        res-=n-sa[k]+<span class="number">1</span>-height[k];</span><br><span class="line">        res-=n-sa[j]+<span class="number">1</span>-height[j];</span><br><span class="line">        height[j]=<span class="built_in">min</span>(height[k],height[j]);</span><br><span class="line">        res+=n-sa[j]+<span class="number">1</span>-height[j];</span><br><span class="line">        d[u[k]]=d[k],u[d[k]]=u[k];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=n;i;i--) <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;和后缀自动机几乎是字符串最难的两个专题了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意几乎不能相互替代。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="字符串" scheme="https://mydcwfy.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="后缀数组" scheme="https://mydcwfy.github.io/tags/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>点分治和点分树</title>
    <link href="https://mydcwfy.github.io/2021/12/13/%E7%82%B9%E5%88%86%E6%B2%BB%E5%92%8C%E7%82%B9%E5%88%86%E6%A0%91/"/>
    <id>https://mydcwfy.github.io/2021/12/13/%E7%82%B9%E5%88%86%E6%B2%BB%E5%92%8C%E7%82%B9%E5%88%86%E6%A0%91/</id>
    <published>2021-12-13T14:21:47.000Z</published>
    <updated>2021-12-13T14:23:28.143Z</updated>
    
    <content type="html"><![CDATA[<p>将来自数组的分治搬到树上。</p><span id="more"></span><h3 id="1-主要思想"><a href="#1-主要思想" class="headerlink" title="1. 主要思想"></a>1. 主要思想</h3><p>树上分治分为点分治和边分治。</p><p>边分治主要因为时间复杂度容易被卡为 $O(n)$，而点分治可以保证时间复杂度为 $O(\log n)$。</p><p>所以边分治不太常用，而点分治相对常用。</p><p>点分树是点分治的动态问题。</p><h3 id="2-主要方法"><a href="#2-主要方法" class="headerlink" title="2. 主要方法"></a>2. 主要方法</h3><p>以下面一个例题为例：</p><h4 id="T1：【模板】点分治"><a href="#T1：【模板】点分治" class="headerlink" title="T1：【模板】点分治"></a>T1：【模板】点分治</h4><p><a href="https://www.luogu.com.cn/problem/P3806">题目传送门 Luogu</a></p><p><a href="https://www.acwing.com/problem/content/254/">题目传送门 AcWing</a></p><p>其实，点分治就是取一个点，然后分治为几棵子树。</p><p>关键是如何统计不同子树间的信息。</p><p>首先，将所有点到根节点全部存下来。</p><p>为了处理，我们可以先将所有的排序，然后使用双指针即可。</p><p>要统计不同子树间的，我们可以先将所有的情况减去不符合条件的情况即可。</p><p>注意，因为要递归，我们希望层数尽量少。</p><p>所以，我们选择树的重心，这样不会超过 $\log n$ 层。</p><p>时间复杂度为 $O(n\log^2 n)$。</p><p>由于时间都卡得很紧，需要一定优化。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e4</span>+<span class="number">10</span>,Maxn=<span class="number">1e7</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> h[N],e[<span class="number">2</span>*N],ne[<span class="number">2</span>*N],w[<span class="number">2</span>*N],idx=<span class="number">1</span>,s[N],rt,mx=<span class="number">1e7</span>,son[N],sizetot,st[N];</span><br><span class="line"><span class="keyword">int</span> n,m,k,top;</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(R <span class="keyword">int</span> a,R <span class="keyword">int</span> b,R <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[++idx]=b,w[idx]=c,ne[idx]=h[a],h[a]=idx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">findroot</span><span class="params">(R <span class="keyword">int</span> x,R <span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//cout&lt;&lt;x&lt;&lt;endl;</span></span><br><span class="line">s[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (R <span class="keyword">int</span> i=h[x];i!=<span class="number">-1</span>;i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (e[i]==fa||vis[e[i]]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">findroot</span>(e[i],x);</span><br><span class="line">s[x]+=s[e[i]];</span><br><span class="line">son[x]=<span class="built_in">max</span>(son[x],s[e[i]]);</span><br><span class="line">&#125;</span><br><span class="line">son[x]=<span class="built_in">max</span>(son[x],sizetot-s[x]);</span><br><span class="line"><span class="keyword">if</span> (son[x]&lt;mx) mx=son[x],rt=x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">(R <span class="keyword">int</span> x,R <span class="keyword">int</span> fa,R <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">st[++top]=d;</span><br><span class="line"><span class="keyword">for</span> (R <span class="keyword">int</span> i=h[x];i!=<span class="number">-1</span>;i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (vis[e[i]]||e[i]==fa) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">query</span>(e[i],x,d+w[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(R <span class="keyword">int</span> x,R <span class="keyword">int</span> d,R <span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">top=<span class="number">0</span>;<span class="built_in">query</span>(x,<span class="number">0</span>,d);</span><br><span class="line"><span class="built_in">sort</span>(st+<span class="number">1</span>,st+top+<span class="number">1</span>);</span><br><span class="line">R <span class="keyword">int</span> j=top;</span><br><span class="line">ll now=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (R <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=top;++i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (j&amp;&amp;st[j]+st[i]&gt;k) j--;</span><br><span class="line">    now+=j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=top;++i)</span><br><span class="line">    <span class="keyword">if</span> (st[i]*<span class="number">2</span>&lt;=k) now--;</span><br><span class="line">now/=<span class="number">2</span>;</span><br><span class="line">ans+=now*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(R <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (k==<span class="number">1000</span>) cout&lt;&lt;x&lt;&lt;endl;</span><br><span class="line">vis[x]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">solve</span>(x,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (R <span class="keyword">int</span> i=h[x];i!=<span class="number">-1</span>;i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (vis[e[i]]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">solve</span>(e[i],w[i],<span class="number">-1</span>);</span><br><span class="line">mx=<span class="number">1e7</span>,rt=<span class="number">0</span>,sizetot=s[e[i]];</span><br><span class="line"><span class="built_in">findroot</span>(e[i],x);</span><br><span class="line"><span class="built_in">dfs</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;k),n||k)</span><br><span class="line">&#123;</span><br><span class="line">    ans=<span class="number">0</span>;idx=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (R <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) son[i]=<span class="number">0</span>,vis[i]=<span class="number">0</span>,h[i]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (R <span class="keyword">int</span> i=<span class="number">1</span>,x,y,c;i&lt;n;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;c),x++,y++,<span class="built_in">add</span>(x,y,c),<span class="built_in">add</span>(y,x,c);</span><br><span class="line"></span><br><span class="line">    mx=<span class="number">1e7</span>,rt=<span class="number">0</span>,sizetot=n;</span><br><span class="line">    <span class="built_in">findroot</span>(<span class="number">1</span>,<span class="number">0</span>);<span class="built_in">dfs</span>(rt);</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e4</span>+<span class="number">10</span>,M=<span class="number">2e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> h[N],e[M],ne[M],w[M],idx;</span><br><span class="line"><span class="keyword">int</span> p[N],q[N],n,m;</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="keyword">int</span> ans[N],que[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[idx]=b,ne[idx]=h[a],w[idx]=c,h[a]=idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_size</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (vis[x]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=h[x];~i;i=ne[i])</span><br><span class="line"><span class="keyword">if</span> (e[i]!=fa) res+=<span class="built_in">get_size</span>(e[i],x);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_zx</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa,<span class="keyword">int</span> tot,<span class="keyword">int</span> &amp;zx)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (vis[x]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">1</span>,mx=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=h[x];~i;i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (vis[e[i]]||e[i]==fa) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> t=<span class="built_in">get_zx</span>(e[i],x,tot,zx);</span><br><span class="line">sum+=t;mx=<span class="built_in">max</span>(mx,t);</span><br><span class="line">&#125;</span><br><span class="line">mx=<span class="built_in">max</span>(mx,tot-sum);</span><br><span class="line"><span class="keyword">if</span> (mx&lt;=tot/<span class="number">2</span>) zx=x;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa,<span class="keyword">int</span> d,<span class="keyword">int</span> &amp;tot)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//cout&lt;&lt;x&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span> (vis[x]) <span class="keyword">return</span>;</span><br><span class="line">q[tot++]=d;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=h[x];~i;i=ne[i])</span><br><span class="line"><span class="keyword">if</span> (e[i]!=fa) <span class="built_in">query</span>(e[i],x,d+w[i],tot);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> tot,<span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">sort</span>(a,a+tot);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> l=<span class="number">1</span>;l&lt;=m;++l)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> &amp;k=que[l],res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=tot<span class="number">-1</span>,j=<span class="number">0</span>;~i;--i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (j&lt;tot&amp;&amp;a[j]+a[i]&lt;k) j++;</span><br><span class="line"><span class="keyword">if</span> (a[j]+a[i]&gt;k) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">while</span> (j&lt;tot&amp;&amp;a[j]+a[i]==k)</span><br><span class="line">&#123;</span><br><span class="line">j++;</span><br><span class="line"><span class="keyword">if</span> (j==i+<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">res++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans[l]+=res*f/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (vis[x]) <span class="keyword">return</span> ;</span><br><span class="line"><span class="built_in">get_zx</span>(x,<span class="number">-1</span>,<span class="built_in">get_size</span>(x,<span class="number">-1</span>),x);</span><br><span class="line">vis[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>,res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=h[x];~i;i=ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> tot=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">query</span>(e[i],<span class="number">-1</span>,w[i],tot);</span><br><span class="line"><span class="built_in">solve</span>(q,tot,<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;tot;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> l=<span class="number">1</span>;l&lt;=m;++l)</span><br><span class="line"><span class="keyword">if</span> (que[l]==q[j]) ans[l]++;</span><br><span class="line">p[cnt++]=q[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">solve</span>(p,cnt,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=h[x];~i;i=ne[i]) <span class="built_in">calc</span>(e[i]);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);idx=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,x,y,c;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;x,&amp;y,&amp;c);</span><br><span class="line"><span class="built_in">add</span>(x,y,c);<span class="built_in">add</span>(y,x,c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;que[i]);</span><br><span class="line"><span class="built_in">calc</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) <span class="built_in">puts</span>(ans[i]?<span class="string">&quot;AYE&quot;</span>:<span class="string">&quot;NAY&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-例题"><a href="#3-例题" class="headerlink" title="3. 例题"></a>3. 例题</h3><h4 id="T2：权值"><a href="#T2：权值" class="headerlink" title="T2：权值"></a>T2：权值</h4><p><a href="https://www.acwing.com/problem/content/266/">题目传送门 AcWing</a></p><p>其实和上面的类似，我们可以分为一个一个的子树。</p><p>在同一棵子树中，可以递归处理，我们需要考虑的就是不同子树之间的距离。</p><p>可以直接处理每一个节点到根节点的距离，存在一个桶中。</p><p>其中，桶中存的是每一个对应距离，最小经过的边。</p><p>这样就可以了。</p><p>注意，我们无需每次清空桶，只需每一次将用过的点的操作撤销即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">10</span>,M=<span class="number">4e5</span>+<span class="number">20</span>,Maxn=<span class="number">1e7</span>+<span class="number">10</span>,INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> h[N],e[M],ne[M],w[M],idx;</span><br><span class="line"><span class="keyword">int</span> f[Maxn],n,m,ans=INF;</span><br><span class="line">PII p[N],q[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx]=b,ne[idx]=h[a],w[idx]=c,h[a]=idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_size</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (vis[x]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=h[x];~i;i=ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (e[i]==fa) <span class="keyword">continue</span>;</span><br><span class="line">        res+=<span class="built_in">get_size</span>(e[i],x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_zx</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa,<span class="keyword">int</span> tot,<span class="keyword">int</span> &amp;zx)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (vis[x]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">1</span>,mx=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=h[x];~i;i=ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (e[i]==fa) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> t=<span class="built_in">get_zx</span>(e[i],x,tot,zx);</span><br><span class="line">        sum+=t;mx=<span class="built_in">max</span>(mx,t);</span><br><span class="line">    &#125;</span><br><span class="line">    mx=<span class="built_in">max</span>(mx,tot-sum);</span><br><span class="line">    <span class="keyword">if</span> (mx&lt;=tot/<span class="number">2</span>) zx=x;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa,<span class="keyword">int</span> d,<span class="keyword">int</span> now,<span class="keyword">int</span> &amp;tot)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (vis[x]||d&gt;m) <span class="keyword">return</span> ;</span><br><span class="line">    q[tot++]=<span class="built_in">mp</span>(d,now);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=h[x];~i;i=ne[i])</span><br><span class="line">        <span class="keyword">if</span> (e[i]!=fa) <span class="built_in">query</span>(e[i],x,d+w[i],now+<span class="number">1</span>,tot);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (vis[x]) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">get_zx</span>(x,<span class="number">-1</span>,<span class="built_in">get_size</span>(x,<span class="number">-1</span>),x);</span><br><span class="line">    vis[x]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=h[x];~i;i=ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> tot=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">query</span>(e[i],x,w[i],<span class="number">1</span>,tot);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l=<span class="number">0</span>;l&lt;tot;++l)</span><br><span class="line">        &#123;</span><br><span class="line">            PII &amp;tmp=q[l];</span><br><span class="line">            <span class="keyword">if</span> (tmp.fi==m) ans=<span class="built_in">min</span>(ans,tmp.se);</span><br><span class="line">            <span class="keyword">else</span> ans=<span class="built_in">min</span>(ans,tmp.se+f[m-tmp.fi]);</span><br><span class="line">            p[cnt++]=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l=<span class="number">0</span>;l&lt;tot;++l) f[q[l].fi]=<span class="built_in">min</span>(f[q[l].fi],q[l].se);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;++i) f[p[i].fi]=INF;</span><br><span class="line">    <span class="comment">// cout&lt;&lt;x&lt;&lt;&#x27; &#x27;&lt;&lt;ans&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=h[x];~i;i=ne[i]) <span class="built_in">calc</span>(e[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> f);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,x,y,c;i&lt;n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;x,&amp;y,&amp;c);</span><br><span class="line">        <span class="built_in">add</span>(x,y,c);<span class="built_in">add</span>(y,x,c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">calc</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (ans!=INF) cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-点分树"><a href="#4-点分树" class="headerlink" title="4. 点分树"></a>4. 点分树</h3><p>还是来看一下例题：</p><h4 id="T3：开店"><a href="#T3：开店" class="headerlink" title="T3：开店"></a>T3：开店</h4><p><a href="https://www.luogu.com.cn/problem/P3241">题目传送门 Luogu</a></p><p><a href="https://www.acwing.com/problem/content/2228/">题目传送门 AcWing</a></p><p>点分树所处理的题目没有更改树的形态，而是有很多的在线询问，需要我们回答距离问题。</p><p>还是考虑递归。</p><p>首先，假设 u 在一个子树，如果当前处理的节点在 u 所在的子树内，那么我们可以递归。</p><p>如果在不同节点，我们就可以通过归并的方法来解决。</p><p>由于没有更改，我们可以先预处理重心来划分。</p><p>可以将重心连接起来，我们发现又是一棵树。</p><p>这也是“点分树”的命名来源。</p><p>然后，我们应该如何计算所有点到 u 的距离和呢？</p><p>有两种情况：</p><p><strong>1：</strong> 与兄弟子树（即 u 不是重心）。</p><p>首先，我们可以将答案分为两部分：u 到重心的距离乘以个数，再加上兄弟子树到重心的总距离。</p><p>我们可以将所有节点的年龄以及到重心的距离按年龄排序，直接二分即可，就可以求第一个了。</p><p>对于第二个，我们可以预处理前缀和。</p><p><strong>2：</strong> 与所有子树（即 u 是重心）。</p><p>其实和上面一种情况比较相似，我们直接对于每一个子树，按上面的求就是了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">150010</span>,M=<span class="number">300010</span>,INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> h[N],e[M],ne[M],w[M],idx;</span><br><span class="line"><span class="keyword">int</span> a[N],n,q,atot;</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line">ll res;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Father</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> zx,now;</span><br><span class="line">    ll d;</span><br><span class="line">&#125;;</span><br><span class="line">vector &lt;Father&gt; f[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Son</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;ll d;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> Son &amp;t)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a&lt;t.a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">vector &lt;Son&gt; s[N][<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx]=b,ne[idx]=h[a],w[idx]=c,h[a]=idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_size</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (vis[x]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=h[x];~i;i=ne[i])</span><br><span class="line">        <span class="keyword">if</span> (e[i]!=fa) res+=<span class="built_in">get_size</span>(e[i],x);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_zx</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa,<span class="keyword">int</span> tot,<span class="keyword">int</span> &amp;zx)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (vis[x]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">1</span>,maxn=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=h[x];~i;i=ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (e[i]==fa) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> t=<span class="built_in">get_zx</span>(e[i],x,tot,zx);</span><br><span class="line">        maxn=<span class="built_in">max</span>(maxn,t);sum+=t;</span><br><span class="line">    &#125;</span><br><span class="line">    maxn=<span class="built_in">max</span>(maxn,tot-sum);</span><br><span class="line">    <span class="keyword">if</span> (maxn&lt;=tot/<span class="number">2</span>) zx=x;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_son_tree</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa,ll d,<span class="keyword">int</span> zx,<span class="keyword">int</span> k,vector&lt;Son&gt; &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (vis[x]) <span class="keyword">return</span>;</span><br><span class="line">    f[x].<span class="built_in">push_back</span>((Father)&#123;zx,k,d&#125;);</span><br><span class="line">    p.<span class="built_in">push_back</span>((Son)&#123;a[x],d&#125;);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=h[x];~i;i=ne[i])</span><br><span class="line">        <span class="keyword">if</span> (e[i]!=fa) <span class="built_in">get_son_tree</span>(e[i],x,d+w[i],zx,k,p);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (vis[x]) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">get_zx</span>(x,<span class="number">-1</span>,<span class="built_in">get_size</span>(x,<span class="number">-1</span>),x);</span><br><span class="line">    vis[x]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=h[x],now=<span class="number">0</span>;~i;i=ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (vis[e[i]]) <span class="keyword">continue</span>;</span><br><span class="line">        vector&lt;Son&gt; &amp;p=s[x][now];</span><br><span class="line">        <span class="built_in">get_son_tree</span>(e[i],x,w[i],x,now,p);</span><br><span class="line">        p.<span class="built_in">push_back</span>((Son)&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;);</span><br><span class="line">        p.<span class="built_in">push_back</span>((Son)&#123;INF,<span class="number">0</span>&#125;);</span><br><span class="line">        <span class="built_in">sort</span>(p.<span class="built_in">begin</span>(),p.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;p.<span class="built_in">size</span>();++i) p[i].d+=p[i<span class="number">-1</span>].d;</span><br><span class="line">        now++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=h[x];~i;i=ne[i]) <span class="built_in">calc</span>(e[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;f[x].<span class="built_in">size</span>();++i)</span><br><span class="line">    &#123;</span><br><span class="line">        Father &amp;tmp=f[x][i];</span><br><span class="line">        <span class="keyword">if</span> (a[tmp.zx]&gt;=l&amp;&amp;a[tmp.zx]&lt;=r) res+=tmp.d;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> now=<span class="number">0</span>;now&lt;<span class="number">3</span>;++now)</span><br><span class="line">        &#123;</span><br><span class="line">            vector&lt;Son&gt; &amp;p=s[tmp.zx][now];</span><br><span class="line">            <span class="keyword">if</span> (now==tmp.now||p.<span class="built_in">empty</span>()) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> tl=<span class="built_in">lower_bound</span>(p.<span class="built_in">begin</span>(),p.<span class="built_in">end</span>(),(Son)&#123;l,<span class="number">0</span>&#125;)-p.<span class="built_in">begin</span>(),</span><br><span class="line">                tr=<span class="built_in">lower_bound</span>(p.<span class="built_in">begin</span>(),p.<span class="built_in">end</span>(),(Son)&#123;r+<span class="number">1</span>,<span class="number">0</span>&#125;)-p.<span class="built_in">begin</span>();</span><br><span class="line">            res+=(tr-tl)*tmp.d+p[tr<span class="number">-1</span>].d-p[tl<span class="number">-1</span>].d;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> now=<span class="number">0</span>;now&lt;<span class="number">3</span>;++now)</span><br><span class="line">    &#123;</span><br><span class="line">        vector&lt;Son&gt; &amp;p=s[x][now];</span><br><span class="line">        <span class="keyword">if</span> (p.<span class="built_in">empty</span>()) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> tl=<span class="built_in">lower_bound</span>(p.<span class="built_in">begin</span>(),p.<span class="built_in">end</span>(),(Son)&#123;l,<span class="number">0</span>&#125;)-p.<span class="built_in">begin</span>(),</span><br><span class="line">            tr=<span class="built_in">lower_bound</span>(p.<span class="built_in">begin</span>(),p.<span class="built_in">end</span>(),(Son)&#123;r+<span class="number">1</span>,<span class="number">0</span>&#125;)-p.<span class="built_in">begin</span>();</span><br><span class="line">        res+=p[tr<span class="number">-1</span>].d-p[tl<span class="number">-1</span>].d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;q&gt;&gt;atot;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,a+i);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,x,y,c;i&lt;n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;x,&amp;y,&amp;c);</span><br><span class="line">        <span class="built_in">add</span>(x,y,c);<span class="built_in">add</span>(y,x,c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">calc</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> x,l,r;</span><br><span class="line">    <span class="keyword">while</span> (q--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;x,&amp;l,&amp;r);</span><br><span class="line">        l=(l+res)%atot;r=(r+res)%atot;</span><br><span class="line">        <span class="keyword">if</span> (l&gt;r) <span class="built_in">swap</span>(l,r);</span><br><span class="line">        <span class="built_in">query</span>(x,l,r);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;将来自数组的分治搬到树上。&lt;/p&gt;</summary>
    
    
    
    
    <category term="数据结构" scheme="https://mydcwfy.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="分治" scheme="https://mydcwfy.github.io/tags/%E5%88%86%E6%B2%BB/"/>
    
    <category term="点分治和点分树" scheme="https://mydcwfy.github.io/tags/%E7%82%B9%E5%88%86%E6%B2%BB%E5%92%8C%E7%82%B9%E5%88%86%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>中国剩余定理</title>
    <link href="https://mydcwfy.github.io/2021/12/13/%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86/"/>
    <id>https://mydcwfy.github.io/2021/12/13/%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86/</id>
    <published>2021-12-13T14:17:55.000Z</published>
    <updated>2021-12-13T14:19:26.071Z</updated>
    
    <content type="html"><![CDATA[<p>注意公式。</p><span id="more"></span><h2 id="中国剩余定理"><a href="#中国剩余定理" class="headerlink" title="中国剩余定理"></a>中国剩余定理</h2><h3 id="0-前置知识"><a href="#0-前置知识" class="headerlink" title="0. 前置知识"></a>0. 前置知识</h3><p>逆元。</p><p><a href="https://www.luogu.com.cn/blog/mydcwfy-342891/inverse-element">我的逆元 Blog</a></p><h3 id="1-处理的问题"><a href="#1-处理的问题" class="headerlink" title="1. 处理的问题"></a>1. 处理的问题</h3><p>$m_1,m_2,..,m_n$ 两两互质。</p><p>求 $x\in \text{Z}$，使：</p><p>$$<br>\begin{array}{ll}<br>x=a_1\pmod {m_1}\\<br>x=a_2\pmod {m_2}\\<br>…\\<br>x=a_n\pmod {m_n}<br>\end{array}<br>$$</p><h3 id="2-解决的方法"><a href="#2-解决的方法" class="headerlink" title="2. 解决的方法"></a>2. 解决的方法</h3><p>设 $M=m_1m_2…m_n$。</p><p>令 $M_i=\dfrac{M}{m_i},t_i=M_i^{-1}\pmod {m_i}$。</p><p>那么，$x=\sum_{i=1}^{n} {a_i * t_i * M_i}$。</p><p>证明略。（背就行了 <del>逃</del>）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">12</span>;</span><br><span class="line"><span class="keyword">int</span> n,m[N],b[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exGCD</span><span class="params">(ll a,ll b,ll &amp;x,ll &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!b)</span><br><span class="line">&#123;</span><br><span class="line">x=<span class="number">1</span>;y=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">exGCD</span>(b,a%b,y,x);</span><br><span class="line">y-=a/b*x;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;m[i],&amp;b[i]);</span><br><span class="line">ll M=<span class="number">1</span>,res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) M*=m[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">ll Mi=M/m[i],ti,x;</span><br><span class="line"><span class="built_in">exGCD</span>(Mi,m[i],ti,x);</span><br><span class="line">res+=b[i]*Mi*ti;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,(res%M+M)%M);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;注意公式。&lt;/p&gt;</summary>
    
    
    
    
    <category term="数论" scheme="https://mydcwfy.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
    <category term="中国剩余定理" scheme="https://mydcwfy.github.io/tags/%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>数学基础杂论</title>
    <link href="https://mydcwfy.github.io/2021/12/13/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%E6%9D%82%E8%AE%BA/"/>
    <id>https://mydcwfy.github.io/2021/12/13/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%E6%9D%82%E8%AE%BA/</id>
    <published>2021-12-13T14:09:03.000Z</published>
    <updated>2021-12-13T14:17:14.271Z</updated>
    
    <content type="html"><![CDATA[<p>本人由于以前看过一些书，对一些知识有一定的了解，所以这里只讲自己不懂的知识和例题。</p><p>对于基础的算法，可能也会有简略的讲解。</p><span id="more"></span><h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h2><p>有以下内容：</p><ol><li>筛质数</li><li>同余（扩欧）</li><li>中国剩余定理</li><li>矩阵乘法（快速幂）</li><li>组合计数（加乘原理，Lucas，Catalan）</li></ol><h2 id="1-筛质数"><a href="#1-筛质数" class="headerlink" title="1. 筛质数"></a>1. 筛质数</h2><p>以前写过，就放在这里了。</p><p><a href="https://www.luogu.com.cn/blog/mydcwfy-342891/prime-election">我的筛质数的 Blog</a></p><h2 id="2-同余"><a href="#2-同余" class="headerlink" title="2. 同余"></a>2. 同余</h2><p>解决形如 $ax\equiv 1\pmod b$ 或 $ax+by=1$ 不定方程的算法，为扩展欧几里得算法。</p><p>利用欧几里得算法，我们就可以计算不同的状态之间的转移。</p><p>具体直接看代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function">ll <span class="title">ExGCD</span><span class="params">(ll a,ll b,ll &amp;x,ll &amp;y)</span></span>&#123;</span><br><span class="line">ll d;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>) x=<span class="number">1</span>,y=<span class="number">0</span>,d=a;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">d=<span class="built_in">ExGCD</span>(b,a%b,y,x),y-=a/b*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="T1：青蛙的约会"><a href="#T1：青蛙的约会" class="headerlink" title="T1：青蛙的约会"></a>T1：青蛙的约会</h3><p><a href="https://www.luogu.com.cn/problem/P1516">题目传送门 Luogu</a></p><p><a href="https://www.acwing.com/problem/content/224/">题目传送门 AcWing</a></p><p>模板题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ExGCD</span><span class="params">(ll a,ll b,ll &amp;x,ll &amp;y,ll &amp;d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!b)</span><br><span class="line">&#123;</span><br><span class="line">x=<span class="number">1</span>,y=<span class="number">0</span>;d=a;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">ExGCD</span>(b,a%b,y,x,d);</span><br><span class="line">y-=a/b*x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll x,y,m,n,l;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld%lld%lld&quot;</span>,&amp;x,&amp;y,&amp;m,&amp;n,&amp;l);</span><br><span class="line">ll a=x-y,b=n-m;</span><br><span class="line">ll d,t;<span class="built_in">ExGCD</span>(b,l,x,y,d);</span><br><span class="line"><span class="keyword">if</span> (a%d) <span class="built_in">puts</span>(<span class="string">&quot;Impossible&quot;</span>);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">x*=a/d;</span><br><span class="line">ll t=<span class="built_in">abs</span>(l/d);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,(x%t+t)%t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="T2：最幸运的数字"><a href="#T2：最幸运的数字" class="headerlink" title="T2：最幸运的数字"></a>T2：最幸运的数字</h3><p><a href="https://www.acwing.com/problem/content/204/">题目传送门 AcWing</a></p><p>首先，$x$ 个 8 可以表示为 $\dfrac89*(10^x-1)$，那么 $L|\dfrac89*(10^x-1)|\Leftrightarrow \dfrac{9L}d|\dfrac8d(10^x-1)$，其中 $\gcd(8,L)=d$。</p><p>又 $\dfrac8d$ 与左边互质，所以无需该数。</p><p>于是，我们令 $c=\dfrac{9L}d$，则变为 $10^x\equiv1\pmod c$。</p><p>首先，如果 $\gcd(10,c)\not=1$，那么原方程无解（因为左边一定是 $c$  的倍数，而右边不是）。</p><p>又知道 $10^{\varphi(c)}\equiv1\pmod c$，于是 $\varphi(c)$ 满足答案。</p><p>那么，怎样求一个最小的呢？</p><p><strong>证明：</strong> 最小的 $x$ 一定是 $\varphi(c)$ 的约数。</p><p>（以下模的方程省略 $\pmod c$）</p><p>使用反证法。</p><p>假设 $x\not|\varphi(c)$，那么可以写为 $\varphi(c)=qx+r$，其中 $0&lt;r&lt;x$。</p><p>首先，由于 $10^x\equiv1$，则 $10^{qx}\equiv1$。</p><p>又 $10^{\varphi(c)}\equiv1$，即 $10^{qx+r}\equiv1$。</p><p>所以，$10^r\equiv1$，与 $x$ 的最小性矛盾。</p><p>故原命题成立。</p><p><strong>证毕</strong>。</p><p>回到本题，只需我们枚举约数即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll l;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qmul</span><span class="params">(ll a,ll b,ll p)</span><span class="comment">//快速乘（可能爆 long long） </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b&amp;<span class="number">1</span>) res+=a,res%=p;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;a+=a;a%=p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,ll b,ll p)</span><span class="comment">//快速幂 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b&amp;<span class="number">1</span>) res=<span class="built_in">qmul</span>(res,a,p);</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;a=<span class="built_in">qmul</span>(a,a,p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">get_phi</span><span class="params">(ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res=n;</span><br><span class="line">    <span class="keyword">for</span> (ll i=<span class="number">2</span>;i&lt;=n/i;++i)</span><br><span class="line">        <span class="keyword">if</span> (n%i==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (n%i==<span class="number">0</span>) n/=i;</span><br><span class="line">            res=res/i*(i<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> (n&gt;<span class="number">1</span>) res=res/n*(n<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;l))&amp;&amp;l)</span><br><span class="line">    &#123;</span><br><span class="line">        ll d=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l%(d*<span class="number">2</span>)==<span class="number">0</span>&amp;&amp;d*<span class="number">2</span>&lt;=<span class="number">8</span>) d*=<span class="number">2</span>;</span><br><span class="line">        ll n=<span class="number">9</span>*l/d;</span><br><span class="line">        ll phi=<span class="built_in">get_phi</span>(n);</span><br><span class="line">        ll res=(<span class="number">1ll</span>&lt;&lt;<span class="number">60</span>);</span><br><span class="line">        <span class="keyword">for</span> (ll i=<span class="number">1</span>;i&lt;=phi/i&amp;&amp;i&lt;=res;++i)</span><br><span class="line">            <span class="keyword">if</span> (phi%i==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">qpow</span>(<span class="number">10</span>,i,n)==<span class="number">1</span>) res=<span class="built_in">min</span>(res,i);</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">qpow</span>(<span class="number">10</span>,phi/i,n)==<span class="number">1</span>) res=<span class="built_in">min</span>(res,phi/i);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span> (res==(<span class="number">1ll</span>&lt;&lt;<span class="number">60</span>)) res=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Case %d: %lld\n&quot;</span>,++t,res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-中国剩余定理"><a href="#3-中国剩余定理" class="headerlink" title="3. 中国剩余定理"></a>3. 中国剩余定理</h2><p>巧了，我以前也写过。</p><p><a href="https://www.luogu.com.cn/blog/mydcwfy-342891/chinese-remainder-theorem">我的中国剩余定理 Blog</a></p><h2 id="4-矩阵乘法"><a href="#4-矩阵乘法" class="headerlink" title="4. 矩阵乘法"></a>4. 矩阵乘法</h2><p>不想讲，主要是定义对于 OI 毫无用处。</p><p>自己去百度吧 <del>（逃）</del>。</p><p>只放一个代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">202</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF=<span class="number">1e16</span>;</span><br><span class="line"><span class="keyword">const</span> ll Mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Matrix</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    ll a[<span class="number">205</span>][<span class="number">205</span>];</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">clean</span><span class="params">(<span class="keyword">int</span> _n,<span class="keyword">int</span> _m)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        n=_n,m=_m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;++j) a[i][j]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix <span class="keyword">operator</span> *(<span class="keyword">const</span> Matrix &amp;b) <span class="keyword">const</span>&#123;</span><br><span class="line">        Matrix c;</span><br><span class="line">        <span class="keyword">if</span> (m!=b.n) <span class="keyword">return</span> c;</span><br><span class="line">        c.<span class="built_in">clean</span>(n,b.m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;c.n;++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;c.m;++j)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;m;++k) c.a[i][j]+=a[i][k]*b.a[k][j],c.a[i][j]%=Mod;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;F0;</span><br><span class="line"></span><br><span class="line">Matrix <span class="keyword">operator</span> ^(Matrix a,ll n)</span><br><span class="line">&#123;</span><br><span class="line">    Matrix ans=a;n--;</span><br><span class="line">    <span class="keyword">while</span> (n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n&amp;<span class="number">1</span>) ans=ans*a;</span><br><span class="line">        a=a*a;</span><br><span class="line">        n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 OI 中，主要使用快速幂优化。</p><p>也就是上面的最后一个重载运算符。</p><h3 id="T1：-HNOI2008-GT考试"><a href="#T1：-HNOI2008-GT考试" class="headerlink" title="T1：[HNOI2008]GT考试"></a>T1：[HNOI2008]GT考试</h3><p><a href="https://www.luogu.com.cn/problem/P3193">题目传送门 Luogu</a></p><p><a href="https://loj.ac/p/10224">题目传送门 LOJ</a></p><p>可以利用矩阵快速幂优化。</p><h2 id="组合计数"><a href="#组合计数" class="headerlink" title="组合计数"></a>组合计数</h2><p>如果你小学（？）学过的话，就会觉得不太难。</p><p>方面特别多，我们一个一个看（以例题看）。</p><h3 id="T1：牡牛和牝牛"><a href="#T1：牡牛和牝牛" class="headerlink" title="T1：牡牛和牝牛"></a>T1：牡牛和牝牛</h3><p><a href="https://loj.ac/p/10230">题目传送门 LOJ</a></p><p>这个是一种组合计数。</p><p>用 $f(i)$ 表示所有以 $1$ 结尾的长度为 $i$ 的字符串的数量。</p><p>那么，我们可以得到：<br>$$<br>f(i)=\sum_{j=0}^{i-k-1}f(j)<br>$$<br>答案为：<br>$$<br>ans=\sum_{i=0}^{n}f(i)<br>$$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e5</span>+<span class="number">10</span>,Mod=<span class="number">5000011</span>;</span><br><span class="line">ll s[N],f[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,k;cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">s[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">f[i]=s[<span class="built_in">max</span>(i-k<span class="number">-1</span>,<span class="number">0</span>)];</span><br><span class="line">s[i]=s[i<span class="number">-1</span>]+f[i];s[i]%=Mod;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;s[n]&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="T2：车的放置"><a href="#T2：车的放置" class="headerlink" title="T2：车的放置"></a>T2：车的放置</h3><p><a href="https://www.luogu.com.cn/problem/P1350">题目传送门 Luogu</a></p><p><a href="https://loj.ac/p/10232">题目传送门 LOJ</a></p><p>可以使用化整为零的思想。</p><p>分情况讨论，并将所有的答案加起来。</p><p>首先，我们考虑矩形求答案。</p><p>假设长为 $n$，宽为 $m$，那么，答案为：<br>$$<br>ans=\binom mk*P_n^k<br>$$<br>回归本题，枚举上面放 $i$ 个车，下面放 $k-i$ 个车。</p><p>注意，我们要首先计算上面的，因为上面的对下面的影响是固定的，而下面对上面的影响可能变化。</p><p>所以，答案为：<br>$$<br>ans=\sum_{i=1}^{k}{\binom bi<em>P_a^i</em>\binom d{k-i}*P_ {a+c-i}^{k-i}}<br>$$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2010</span>,Mod=<span class="number">1e5</span>+<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a,b,c,d,k;</span><br><span class="line">ll f[N],inv[N];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (b&amp;<span class="number">1</span>) res*=a,res%=Mod;</span><br><span class="line">a*=a;a%=Mod;b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">f[<span class="number">0</span>]=inv[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">f[<span class="number">1</span>]=inv[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i) f[i]=f[i<span class="number">-1</span>]*i%Mod,inv[i]=<span class="built_in">qpow</span>(f[i],Mod<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (m&gt;n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> f[n]*inv[n-m]%Mod*inv[m]%Mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">P</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (m&gt;n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> f[n]*inv[n-m]%Mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d&gt;&gt;k;</span><br><span class="line"><span class="built_in">init</span>(N<span class="number">-1</span>);</span><br><span class="line">ll res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=k;++i)</span><br><span class="line">res+=<span class="built_in">C</span>(b,i)*<span class="built_in">P</span>(a,i)%Mod*<span class="built_in">C</span>(d,k-i)%Mod*<span class="built_in">P</span>(a+c-i,k-i)%Mod,res%=Mod;</span><br><span class="line">cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="T3：数三角形"><a href="#T3：数三角形" class="headerlink" title="T3：数三角形"></a>T3：数三角形</h3><p><a href="https://www.luogu.com.cn/problem/P3166">题目传送门 Luogu</a></p><p><a href="https://loj.ac/p/2240">题目传送门 LOJ</a></p><p>我们可以使用容斥原理的思想。</p><p>首先，总方案为 $\binom {m*n}3$。</p><p>减去的就是三点共线的情况。</p><p>首先，水平的和竖直的情况共有 $n\binom m3+m\binom n3$。</p><p>然后，我们考虑斜率不为 0 的情况。</p><p>首先，对于每一个斜率小于 0 的情况，都可以转化为大于 0 的情况。</p><p>按照左下角的位置，划分为 $n*m$ 种情况。</p><p>对于每一个点 $(i,j)$ 再按照右上角的位置划分为 $(n-i)*(m-j)$ 种情况。</p><p>怎样求在上面的点的数量呢？</p><p>假设第二次选出的点为 $(x,y)$。</p><p>可以发现，就是 $\gcd(x-i,y-j)-1$ 种情况。</p><h3 id="T4：序列统计"><a href="#T4：序列统计" class="headerlink" title="T4：序列统计"></a>T4：序列统计</h3><p><a href="https://loj.ac/p/10235">题目传送门 LOJ</a></p><p>首先，我们可以映射为 $[0,R-L]$ 的序列。</p><p>然后使用差分思想，设 $x_i=a_i-a_{i-1}$，那么原问题转化为 $x_1+x_2+…+x_k\leq R-L,x_i\geq 0$，其中 $k$ 为长度。</p><p>那么，令 $y_i=x_i+1$，那么变为 $y_1+y_2+…+y_k\leq R-L+k$。</p><p>假设 $y_{k+1}$ 为 $R-L+k+1-(y_1+y_2+…+y_k)$，则 $y_{k+1}\geq 1$，那么原式变为 $y_1+y_2+…+y_{k+1}=R-L+k+1$。</p><p>利用隔板法，就可以得到答案 $\binom {R-L+k}k$。</p><p>于是，总答案就为：<br>$$<br>ans=\sum_{k=1}^{N}{\binom {R-L+k}k}=\sum_{k=1}^{N}{\binom {R-L+k}{R-L}}<br>$$<br>又因为 $\binom ab=\binom{a-1}b+\binom{a-1}{b-1}$，于是：<br>$$<br>ans=\binom{R-L+1}{R-L+1}+\sum_{k=1}^{N}{\binom {R-L+k}{R-L}}-1<br>$$<br>利用公式，就可以得到：<br>$$<br>ans=\binom{R-L+N+1}{R-L+1}-1<br>$$<br>注意，这里一定要看懂，可能有些绕！</p><p>接下来，因为 $R,L,N\leq10^9$，所以要使用 Lucas。</p><p><strong>Lucas 定理</strong>。</p><p>这个大概背代码就可以了。</p><p>核心就是 $\binom nm\equiv\binom{n%p}{m%p}* \binom{n/p}{m/p}\pmod p$，其中 $p$ 为质数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n&amp;<span class="number">1</span>) ans*=a,ans%=p;</span><br><span class="line">        n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        a*=a;a%=p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cm</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">1</span>,tmp=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>,i=a;j&lt;=b;--i,++j) ans*=i,ans%=p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=b;++i) tmp*=i,tmp%=p;</span><br><span class="line">    <span class="keyword">return</span> ans*<span class="built_in">qpow</span>(tmp,p<span class="number">-2</span>,p)%p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lucas</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m,<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">lucas</span>(n/p,m/p,p)*<span class="built_in">cm</span>(n%p,m%p,p)%p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就可以了！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> ll Mod=<span class="number">1e6</span>+<span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> n,l,r;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (b&amp;<span class="number">1</span>) res*=a,res%=Mod;</span><br><span class="line">b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">a*=a;a%=Mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll ans=<span class="number">1</span>,fac=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) fac*=i,fac%=Mod;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=n-m+<span class="number">1</span>;i&lt;=n;++i) ans*=i,ans%=Mod;</span><br><span class="line"><span class="keyword">return</span> ans*<span class="built_in">qpow</span>(fac,Mod<span class="number">-2</span>)%Mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">Lucas</span><span class="params">(ll n,ll m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n&lt;Mod&amp;&amp;m&lt;Mod) <span class="keyword">return</span> <span class="built_in">C</span>(n,m);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Lucas</span>(n/Mod,m/Mod)*<span class="built_in">C</span>(n%Mod,m%Mod)%Mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span> (t--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;n,&amp;l,&amp;r);</span><br><span class="line">ll res=<span class="built_in">Lucas</span>(r-l+n+<span class="number">1</span>,r-l+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,res?res<span class="number">-1</span>:Mod<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="T5：网络"><a href="#T5：网络" class="headerlink" title="T5：网络"></a>T5：网络</h3><p><a href="https://loj.ac/p/10238">题目传送门 LOJ</a></p><p>Catalan。</p><p>假设我们从 (0,0) 走到 (n,n)，其中横坐标必须大于等于纵坐标，请问答案有多少种。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/ohufdrpi.png"></p><p>首先，总数即为 $\binom {2n} {n}$，因为我们要在 $2n$ 次里选出  $n$ 个向上。</p><p>利用容斥原理，我们发现 $ans=\binom {2n} n$ 再减去不合法的即可。</p><p>如果不合法，那么我们一定有一个 2 点，在红线上。</p><p>将 2 到 3 的路径沿红线翻转，那么，就得到一个 3‘ 点。</p><p>同理，我们可以将每一个到 3’ 点沿红线翻转到 3 点。</p><p>到 3’ 的方法有 $\binom{2n}{n+1}$ 种。</p><p>答案即为 $ans=\binom{2n}{n}-\binom{2n}{n+1}$。</p><p>回到本题，又有了一些变化。</p><p>我们可以使用类似的映射方式。</p><p>$n\not=m$，需要我们更改一下。</p><p>首先，将 $(n,m)$ 整体下移一格，得到 $(n,m-1)$，同时将红线向下平移一格，再关于红线对称，得到 $(m-1,n)$，再上移一格，最后得到 $(m-1,n+1)$。</p><p>所以，不合法的方案数即为 $\binom{m+n}{m-1}$。</p><p>答案即为 $ans=\binom{m+n}m-\binom{m+n}{m-1}$。</p><p>注意，本题答案很大，需要高精。</p><p>（写了一天）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> B = <span class="number">1e4</span>;</span><br><span class="line"><span class="keyword">int</span> prime[N], cnt;</span><br><span class="line"><span class="keyword">bool</span> st[N];</span><br><span class="line"><span class="comment">//支持正整数的加减乘除乘方，位数小于 40000</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">num</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    ll a[N];</span><br><span class="line">    <span class="keyword">const</span> ll B = <span class="number">1e4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">adjust</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= a[<span class="number">0</span>]; ++i)</span><br><span class="line">            a[i + <span class="number">1</span>] += a[i] / B, a[i] %= B;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (a[a[<span class="number">0</span>] + <span class="number">1</span>] &gt; <span class="number">0</span>)</span><br><span class="line">            a[<span class="number">0</span>]++, a[a[<span class="number">0</span>] + <span class="number">1</span>] += a[a[<span class="number">0</span>]] / B, a[a[<span class="number">0</span>]] %= B;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((!a[a[<span class="number">0</span>]]) &amp;&amp; a[<span class="number">0</span>] &gt; <span class="number">1</span>)</span><br><span class="line">            a[<span class="number">0</span>]--;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a);</span><br><span class="line">        a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        a[<span class="number">1</span>] = x % B;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (x &gt;= B)</span><br><span class="line">            a[++a[<span class="number">0</span>]] = x / B, x /= B;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> num <span class="keyword">operator</span> =(<span class="keyword">const</span> num &amp;b) &#123;</span><br><span class="line">        <span class="built_in">init</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= b.a[<span class="number">0</span>]; ++i)</span><br><span class="line">            a[i] = b.a[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">bool</span> <span class="keyword">operator</span> ==(<span class="keyword">const</span> num &amp;b)<span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[<span class="number">0</span>] != b.a[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= a[<span class="number">0</span>]; ++i)</span><br><span class="line">            <span class="keyword">if</span> (a[i] != b.a[i])</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> num &amp;b)<span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[<span class="number">0</span>] != b.a[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">0</span>] &lt; b.a[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= a[<span class="number">0</span>]; ++i)</span><br><span class="line">            <span class="keyword">if</span> (a[i] != b.a[i])</span><br><span class="line">                <span class="keyword">return</span> a[i] &lt; b.a[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;=(<span class="keyword">const</span> num &amp;b)<span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[<span class="number">0</span>] != b.a[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">0</span>] &lt; b.a[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= a[<span class="number">0</span>]; ++i)</span><br><span class="line">            <span class="keyword">if</span> (a[i] != b.a[i])</span><br><span class="line">                <span class="keyword">return</span> a[i] &lt; b.a[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &gt;(<span class="keyword">const</span> num &amp;b)<span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[<span class="number">0</span>] != b.a[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">0</span>] &gt; b.a[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= a[<span class="number">0</span>]; ++i)</span><br><span class="line">            <span class="keyword">if</span> (a[i] != b.a[i])</span><br><span class="line">                <span class="keyword">return</span> a[i] &gt; b.a[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &gt;=(<span class="keyword">const</span> num &amp;b)<span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[<span class="number">0</span>] != b.a[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">0</span>] &gt; b.a[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= a[<span class="number">0</span>]; ++i)</span><br><span class="line">            <span class="keyword">if</span> (a[i] != b.a[i])</span><br><span class="line">                <span class="keyword">return</span> a[i] &gt; b.a[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> num <span class="keyword">operator</span> +(<span class="keyword">const</span> num &amp;b)<span class="keyword">const</span> &#123;</span><br><span class="line">        num ans;</span><br><span class="line">        ans.<span class="built_in">init</span>(<span class="number">0</span>);</span><br><span class="line">        ans.a[<span class="number">0</span>] = <span class="built_in">max</span>(a[<span class="number">0</span>], b.a[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= ans.a[<span class="number">0</span>]; ++i)</span><br><span class="line">            ans.a[i] = a[i] + b.a[i];</span><br><span class="line"></span><br><span class="line">        ans.<span class="built_in">adjust</span>();</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> num <span class="keyword">operator</span> -(<span class="keyword">const</span> num &amp;x)<span class="keyword">const</span> &#123;</span><br><span class="line">        num ans;</span><br><span class="line">        ans.<span class="built_in">init</span>(<span class="number">0</span>);</span><br><span class="line">        ans.a[<span class="number">0</span>] = a[<span class="number">0</span>];</span><br><span class="line">        num b = x;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= a[<span class="number">0</span>]; ++i)</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt; b.a[i])</span><br><span class="line">                ans.a[i] += a[i] - b.a[i];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                ans.a[i] += a[i] + B - b.a[i], ans.a[i + <span class="number">1</span>]--;</span><br><span class="line"></span><br><span class="line">        ans.<span class="built_in">adjust</span>();</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> num <span class="keyword">operator</span> *(<span class="keyword">const</span> num &amp;b)<span class="keyword">const</span> &#123;</span><br><span class="line">        num ans;</span><br><span class="line">        ans.<span class="built_in">init</span>(<span class="number">0</span>);</span><br><span class="line">        ans.a[<span class="number">0</span>] = a[<span class="number">0</span>] + b.a[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= a[<span class="number">0</span>]; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= b.a[<span class="number">0</span>]; ++j)</span><br><span class="line">                ans.a[i + j - <span class="number">1</span>] += a[i] * b.a[j];</span><br><span class="line"></span><br><span class="line">            ans.<span class="built_in">adjust</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> num <span class="keyword">operator</span> *(<span class="keyword">const</span> <span class="keyword">int</span> &amp;b)<span class="keyword">const</span> &#123;</span><br><span class="line">        num ans=*<span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">int</span> t=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= a[<span class="number">0</span>]; ++i)</span><br><span class="line">            t+=a[i]*b,ans.a[i]=t%B,t/=B;</span><br><span class="line">        <span class="keyword">while</span> (t) ans.a[++ans.a[<span class="number">0</span>]]=t%B,t/=B;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> num <span class="keyword">operator</span> /(<span class="keyword">const</span> <span class="keyword">int</span> &amp;b)<span class="keyword">const</span> &#123;</span><br><span class="line">        num ans;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= a[<span class="number">0</span>]; ++i)</span><br><span class="line">            ans.a[i] = a[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> y = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = a[<span class="number">0</span>]; i; --i)</span><br><span class="line">            <span class="comment">/*ans.a[i-1]+=a[i]%b*B,ans.a[i]/=b;*/</span></span><br><span class="line">            y = B * y + ans.a[i], ans.a[i] = y / b, y %= b;</span><br><span class="line"></span><br><span class="line">        ans.<span class="built_in">adjust</span>();</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> num <span class="keyword">operator</span> ^(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x)<span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!x) &#123;</span><br><span class="line">            num ans;</span><br><span class="line">            ans.<span class="built_in">init</span>(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        num ans, now;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= a[<span class="number">0</span>]; ++i)</span><br><span class="line">            now.a[i] = ans.a[i] = a[i];</span><br><span class="line"></span><br><span class="line">        ll b = x - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (b) &#123;</span><br><span class="line">            <span class="keyword">if</span> (b &amp; <span class="number">1</span>)</span><br><span class="line">                ans = ans * now;</span><br><span class="line"></span><br><span class="line">            now = now * now;</span><br><span class="line">            b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; a[a[<span class="number">0</span>]];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = a[<span class="number">0</span>] - <span class="number">1</span>; i &gt; <span class="number">0</span>; --i)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld%lld%lld%lld&quot;</span>, a[i] / <span class="number">1000</span>, a[i] / <span class="number">100</span> % <span class="number">10</span>, a[i] / <span class="number">10</span> % <span class="number">10</span>, a[i] % <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        <span class="comment">// cout&lt;&lt;i&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">if</span> (!st[i])</span><br><span class="line">            prime[cnt++] = i;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt &amp;&amp; i * prime[j] &lt; N; ++j) &#123;</span><br><span class="line">            st[i * prime[j]] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!(i % prime[j]))</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">get</span><span class="params">(ll n, ll p)</span> </span>&#123;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (n)</span><br><span class="line">        ans += n / p, n /= p;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">num <span class="title">C</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    num ans;</span><br><span class="line">    ans.<span class="built_in">init</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnt; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> p = prime[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (p &gt; n)</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">        ll tmp=<span class="number">1</span>;</span><br><span class="line">        ll t=<span class="built_in">get</span>(n, p) - <span class="built_in">get</span>(m, p) - <span class="built_in">get</span>(n - m, p);</span><br><span class="line">        <span class="comment">/*if (p==2) printf(&quot;%d %d %d %d %d %d\n&quot;,get(n,p),get(m,p),get(n-m,p),n,m,n-m);</span></span><br><span class="line"><span class="comment">        printf(&quot;%d %d\n&quot;,p,t);*/</span></span><br><span class="line">        <span class="keyword">while</span> (t--) ans=ans*p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="comment">// puts(&quot;success&quot;);</span></span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line"></span><br><span class="line">    num res = <span class="built_in">C</span>(n + m, m);</span><br><span class="line">    res=res-<span class="built_in">C</span>(n + m, n+<span class="number">1</span>);</span><br><span class="line">    res.<span class="built_in">print</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="T6：-HNOI2009-有趣的数列"><a href="#T6：-HNOI2009-有趣的数列" class="headerlink" title="T6：[HNOI2009]有趣的数列"></a>T6：[HNOI2009]有趣的数列</h3><p><a href="https://www.luogu.com.cn/problem/P3200">题目传送门 Luogu</a></p><p><a href="https://loj.ac/p/10239">题目传送门 LOJ</a></p><p>其实本题还是一个 Catalan。</p><p>怎样证明呢？</p><p>可以发现，</p><h2 id="高斯消元"><a href="#高斯消元" class="headerlink" title="高斯消元"></a>高斯消元</h2><h3 id="T1：球形空间生成器"><a href="#T1：球形空间生成器" class="headerlink" title="T1：球形空间生成器"></a>T1：球形空间生成器</h3><p><a href="https://www.luogu.com.cn/problem/P4035">题目传送门 Luogu</a></p><p><a href="https://www.acwing.com/problem/content/209/">题目传送门 AcWing</a></p><p>根据球的性质，可以得到：<br>$$<br>\left{<br>\begin{array}{ll}<br>(a_{1,1}-x_1)^2+(a_{1,2}-x_2)^2+…+(a_{1,n}-x_n)^2=R^2\<br>(a_{2,1}-x_1)^2+(a_{2,2}-x_2)^2+…+(a_{2,n}-x_n)^2=R^2\<br>…\<br>(a_{n+1,1}-x_1)^2+(a_{n+1,2}-x_2)^2+…+(a_{n+1,n}-x_n)^2=R^2<br>\end{array}<br>\right.<br>$$<br>是一个二次方程，其实不好解。</p><p>但是，我们可以相减，就可以把二次消掉了。</p><p>有些麻烦，<del>懒得写公式了</del>。</p><h3 id="T2：开关问题"><a href="#T2：开关问题" class="headerlink" title="T2：开关问题"></a>T2：开关问题</h3><p><a href="https://www.acwing.com/problem/content/210/">题目传送门 AcWing</a></p><p>本题是异或高斯消元法。</p><p>首先，发现：每一个开关最多开一次。</p><p>可以得到：影响该开关的所有开关的异或和再异或上初始的状态为终状态。</p><p>看代码就可以了。</p><h2 id="容斥原理"><a href="#容斥原理" class="headerlink" title="容斥原理"></a>容斥原理</h2><h3 id="T1：Devu-和鲜花"><a href="#T1：Devu-和鲜花" class="headerlink" title="T1：Devu 和鲜花"></a>T1：Devu 和鲜花</h3><p><a href="https://www.luogu.com.cn/problem/CF451E">题目传送门 Luogu(RemoteJudge:Codeforces)</a></p><p><a href="https://www.acwing.com/problem/content/216/">题目传送门 AcWing</a></p><p>首先，考虑每个盒子花有无限个。</p><p>那么，$x_1+x_2..+x_N=M(x_i\geq0)$，隔版法即可。</p><p>答案为 $\binom{N+M-1}{N-1}$。</p><p>然后考虑容斥原理。</p><p>首先，我们计算不满足第一个盒子的情况。</p><p>假设不满足第 $i$ 个盒子的情况为 $S_i$</p><p>利用容斥，我们可以得到<br>$$<br>ans=\binom{M+N-1}{M-1}-\sum_{i=1}^{n}|S_i|+ \sum_{i=1}^{n}\sum_{j=i+1}^n|S_i\cup S_j|-…<br>$$<br>可以将每一个理解为 $2^n$ 的二进制，每一位代表是否不满足该条件。</p><p>奇减偶加，就可以了。</p><h2 id="Mobius-函数"><a href="#Mobius-函数" class="headerlink" title="Mobius 函数"></a>Mobius 函数</h2><p><del>（前面我开始没学懂）</del></p><p>定义 $\mu(x)$ 为莫比乌斯函数为：<br>$$<br>\begin{array}{ll}<br>0(d_i&gt;1)\\<br>-1(k\equiv1\pmod2)\\<br>1(k\equiv0\pmod2)<br>\end{array}<br>$$<br>其中，$x=p_1^{d_1}*p_2^{d_2}…*p_k^{d_k}$，$p_i$ 为质数。</p><h3 id="1-求法"><a href="#1-求法" class="headerlink" title="1. 求法"></a>1. 求法</h3><p>在线性筛上改进。</p><ol><li>如果是质数，那么 $\mu(x)=-1$。</li><li>如果 $i\equiv0\pmod{prime[j]}$，那么说明有一个质数的次数超过 1，那么 $\mu(x)=0$</li><li>否则，多了一个质数 $\mu(x)=-\mu(i)$。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!st[i]) prime[cnt++]=i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cnt&amp;&amp;prime[j]*i&lt;N;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            st[i*prime[j]]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (!(i%prime[j]))</span><br><span class="line">            &#123;</span><br><span class="line">                mu[prime[j]*i]=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> mu[prime[j]*i]=-mu[i];</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-例题"><a href="#2-例题" class="headerlink" title="2. 例题"></a>2. 例题</h3><h4 id="T1：ZAP-queries-破译密码"><a href="#T1：ZAP-queries-破译密码" class="headerlink" title="T1：ZAP-queries/破译密码"></a>T1：ZAP-queries/破译密码</h4><p><a href="https://www.luogu.com.cn/problem/P3455">题目传送门 Luogu</a></p><p><a href="https://www.acwing.com/problem/content/217/">题目传送门 AcWing</a></p><p>首先，我们令 $f(x)$ 为满足 $\gcd(a,b)=x$ 的个数。</p><p>再定义 $F(X)$ 为 $x|\gcd(a,b)$ 的个数。</p><p>那么，根据莫比乌斯反演，可以得到：<br>$$<br>F(x)=\sum_{x|k}f(k)=\lfloor\dfrac{a}{x}\rfloor\lfloor\dfrac{b}{x}\rfloor\<br>f(x)=\sum_{x|k}\mu(\dfrac{k}{x})F(d)<br>$$<br>线性筛可以求出 $\mu(x)$，于是 $O(n)$ 就可以求出了。</p><p>但是，本题有多组数据，还需要我们进一步优化。</p><p>我们发现，有一些相邻的 $F(d)$ 是相同的。</p><p><del>通过打表发现</del>，每一段的最大值为 $n/(n/d)$，答案都为 $F(d)$。</p><p>就可以了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e7</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> prime[N],cnt;</span><br><span class="line"><span class="keyword">int</span> mu[N],g[N],sum[N];</span><br><span class="line"><span class="keyword">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mu[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!st[i]) mu[i]=<span class="number">-1</span>,prime[cnt++]=i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cnt&amp;&amp;i*prime[j]&lt;N;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            st[i*prime[j]]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (!(i%prime[j]))</span><br><span class="line">            &#123;</span><br><span class="line">                mu[i*prime[j]]=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mu[i*prime[j]]=-mu[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cnt;++j)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i*prime[j]&lt;N;++i)</span><br><span class="line">            g[i*prime[j]]+=mu[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;++i) sum[i]=sum[i<span class="number">-1</span>]+g[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">int</span> t,n,m;cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="keyword">if</span> (n&gt;m) <span class="built_in">swap</span>(n,m);</span><br><span class="line">        ll res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l=<span class="number">1</span>,r;l&lt;=n;l=r+<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            r=<span class="built_in">min</span>(n,<span class="built_in">min</span>(n/(n/l),m/(m/l)));</span><br><span class="line">            res+=(sum[r]-sum[l<span class="number">-1</span>])*(ll)(n/l)*(m/l);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数学期望"><a href="#数学期望" class="headerlink" title="数学期望"></a>数学期望</h2><p>来看一个简单的例题：</p><h4 id="T1：绿豆蛙的归宿"><a href="#T1：绿豆蛙的归宿" class="headerlink" title="T1：绿豆蛙的归宿"></a>T1：绿豆蛙的归宿</h4><p><a href="https://www.luogu.com.cn/problem/P4316">题目传送门 Luogu</a></p><p><a href="https://www.acwing.com/problem/content/219/">题目传送门 AcWing</a></p><p>期望其实就是一个加权平均值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>,M=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> h[N],e[M],ne[M],w[M],idx;</span><br><span class="line"><span class="keyword">int</span> dout[N];</span><br><span class="line"><span class="keyword">double</span> f[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx]=b,ne[idx]=h[a],w[idx]=c,h[a]=idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (f[x]&gt;=<span class="number">0</span>) <span class="keyword">return</span> f[x];</span><br><span class="line">    f[x]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=h[x];~i;i=ne[i])</span><br><span class="line">        f[x]+=(<span class="built_in">dfs</span>(e[i])+w[i])/dout[x];</span><br><span class="line">    <span class="keyword">return</span> f[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="keyword">int</span> n,m,a,b,c;cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">        <span class="built_in">add</span>(a,b,c);dout[a]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) f[i]=<span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>,<span class="built_in">dfs</span>(<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="T2：扑克牌"><a href="#T2：扑克牌" class="headerlink" title="T2：扑克牌"></a>T2：扑克牌</h3><p><a href="https://www.acwing.com/problem/content/220/">题目传送门 AcWing</a></p><p>记录 $f(a,b,c,d,x,y)$，前四个表示四种花牌的个数，后两个表示大小王分别放入的花色。</p><p>特别地，$x=4$ 表示大王未进入，$y=4$ 表示小王未进入。</p><p>直接递推即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">14</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> INF=<span class="number">1e8</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> f[N][N][N][N][<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> ta,tb,tc,td;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c,<span class="keyword">int</span> d,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a&lt;ta) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (b&lt;tb) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (c&lt;tc) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (d&lt;td) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c,<span class="keyword">int</span> d,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> na=a+(x==<span class="number">0</span>)+(y==<span class="number">0</span>),</span><br><span class="line">        nb=b+(x==<span class="number">1</span>)+(y==<span class="number">1</span>),</span><br><span class="line">        nc=c+(x==<span class="number">2</span>)+(y==<span class="number">2</span>),</span><br><span class="line">        nd=d+(x==<span class="number">3</span>)+(y==<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">double</span> &amp;v=f[a][b][c][d][x][y];</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">check</span>(na,nb,nc,nd,x,y)) <span class="keyword">return</span> v=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (f[a][b][c][d][x][y]&gt;=<span class="number">0</span>) <span class="keyword">return</span> f[a][b][c][d][x][y];</span><br><span class="line">    <span class="keyword">int</span> sum=a+b+c+d+(x!=<span class="number">4</span>)+(y!=<span class="number">4</span>);</span><br><span class="line">    sum=<span class="number">54</span>-sum;</span><br><span class="line">    <span class="keyword">if</span> (sum&lt;=<span class="number">0</span>) <span class="keyword">return</span> v=INF;</span><br><span class="line">    v=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (a&lt;<span class="number">13</span>) v+=(<span class="number">13.0</span>-a)/sum*<span class="built_in">dp</span>(a+<span class="number">1</span>,b,c,d,x,y);</span><br><span class="line">    <span class="keyword">if</span> (b&lt;<span class="number">13</span>) v+=(<span class="number">13.0</span>-b)/sum*<span class="built_in">dp</span>(a,b+<span class="number">1</span>,c,d,x,y);</span><br><span class="line">    <span class="keyword">if</span> (c&lt;<span class="number">13</span>) v+=(<span class="number">13.0</span>-c)/sum*<span class="built_in">dp</span>(a,b,c+<span class="number">1</span>,d,x,y);</span><br><span class="line">    <span class="keyword">if</span> (d&lt;<span class="number">13</span>) v+=(<span class="number">13.0</span>-d)/sum*<span class="built_in">dp</span>(a,b,c,d+<span class="number">1</span>,x,y);</span><br><span class="line">    <span class="keyword">if</span> (x==<span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> t=INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;++i) t=<span class="built_in">min</span>(t,<span class="built_in">dp</span>(a,b,c,d,i,y));</span><br><span class="line">        v+=<span class="number">1.0</span>/sum*t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (y==<span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> t=INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;++i) t=<span class="built_in">min</span>(t,<span class="built_in">dp</span>(a,b,c,d,x,i));</span><br><span class="line">        v+=<span class="number">1.0</span>/sum*t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;ta&gt;&gt;tb&gt;&gt;tc&gt;&gt;td;</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">-1</span>,<span class="keyword">sizeof</span> f);</span><br><span class="line">    <span class="built_in">dp</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">if</span> (f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">4</span>][<span class="number">4</span>]&gt;INF/<span class="number">2</span>) <span class="built_in">puts</span>(<span class="string">&quot;-1.000&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%.3lf\n&quot;</span>,f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">4</span>][<span class="number">4</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本人由于以前看过一些书，对一些知识有一定的了解，所以这里只讲自己不懂的知识和例题。&lt;/p&gt;
&lt;p&gt;对于基础的算法，可能也会有简略的讲解。&lt;/p&gt;</summary>
    
    
    
    
    <category term="数论" scheme="https://mydcwfy.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>P3755</title>
    <link href="https://mydcwfy.github.io/2021/12/13/P3755/"/>
    <id>https://mydcwfy.github.io/2021/12/13/P3755/</id>
    <published>2021-12-13T14:01:11.000Z</published>
    <updated>2021-12-13T14:01:58.719Z</updated>
    
    <content type="html"><![CDATA[<p>同步发表于 P3755 题解。</p><span id="more"></span><h2 id="0-前置知识-amp-废话"><a href="#0-前置知识-amp-废话" class="headerlink" title="0. 前置知识 &amp; 废话"></a>0. 前置知识 &amp; 废话</h2><p>本蒟蒻最近学习 CDQ 分治，看到该题，虽然想起了扫描线等方法，但为了训练 CDQ 分治，还是自然写一篇题解。</p><p>本文是使用的三维偏序，如果不懂的话，可以A <a href="https://www.luogu.com.cn/problem/P3810">这道题</a>，想更多了解 CDQ 分治的，<del>一波广告</del> <a href="https://www.luogu.com.cn/blog/mydcwfy-342891/cdq-fen-zhi">我的 Blog</a>。</p><h2 id="1-关于-CDQ-分治"><a href="#1-关于-CDQ-分治" class="headerlink" title="1. 关于 CDQ 分治"></a>1. 关于 CDQ 分治</h2><p>CDQ 分治是一个离线分治算法，用于解决三维的问题。</p><p>它是在解决二维的基础上，再套一个树状数组来维护时间的先后顺序，复杂度比同类的二维问题多 $\log n$。</p><p>相信你 A 了模板题，会对这算法有更深的理解。</p><h2 id="2-关于本题"><a href="#2-关于本题" class="headerlink" title="2. 关于本题"></a>2. 关于本题</h2><ol><li>有 $n$ 个先给出的点，每一个点有一个权值，在给出 $m$ 个矩形边框，给出两个点 $(x_1,y_1),(x_2,y_2)$，求围住的点的总权值。</li><li>$n\leq 10^5,m\leq 10^5,-2^{31}\leq x_1,x_2,y_1,y_2\leq 2^{31}$。</li></ol><p>虽然近乎于一道模板题，直接扫描线，但是我们还是可以使用一下 CDQ 分治。</p><p>CDQ 分治的关键就在于构造一个三维偏序问题。</p><p>注意，有的题解使用的是二维偏序问题，我这里为了更加与模板吻合，构造了第三维，使用标准的三维偏序。</p><p>首先，我们可以将其转化为一个二维前缀和的问题，即 $ans=\operatorname{sum}(x_2,y_2)-\operatorname{sum}(x_1-1,y_2)-\operatorname{sum}(x_2,y_1-1)+\operatorname {sum}(x_1-1,y_1-1)$（就是一个容斥原理）。</p><p>于是，问题就是求<br>$$<br>\operatorname{sum}(x_t,y_t)=\sum_{x\leq x_t,y\leq y_t}{a[x][y]}<br>$$<br>第一和第二维很简单，直接是 $x$ 和 $y$。</p><p>怎样求第三维呢？</p><p>可以发现，我们要构造为 $z&lt;z_t$，又因为 CDQ 分治是离线，询问和答案在一起。</p><p>于是，我们可以用一个 $z$ 来标记是询问还是原来的点。</p><p>我们要加答案的是原来的点，而不是询问，所以我们将原来的点记为 0，询问记为 1。</p><p>那么，我们现在求的是：<br>$$<br>\operatorname{sum}(x_t,y_t,z_t)=\sum_{x\leq x_t,y\leq y_t,z&lt;z_t}{a[x][y]}<br>$$<br>于是就是一个标准的偏序问题了！</p><h2 id="3-关于-Code"><a href="#3-关于-Code" class="headerlink" title="3. 关于 Code"></a>3. 关于 Code</h2><ol><li>我们需要使用 long long，因为很可能炸 int。</li><li>实际使用 $z$ 的时候，我们其实不需完全使用原来的三维偏序，其实可以将 $z=0$ 时加入总和即可。</li></ol><p>然后就是愉快的上代码时间了！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a,b,c,id,f,p;</span><br><span class="line">    ll sum;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> Node &amp;t)&#123;</span><br><span class="line">        <span class="keyword">if</span> (a!=t.a) <span class="keyword">return</span> a&lt;t.a;</span><br><span class="line">        <span class="keyword">if</span> (b!=t.b) <span class="keyword">return</span> b&lt;t.b;</span><br><span class="line">        <span class="keyword">return</span> c&lt;t.c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;k[N],tmp[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line">ll ans[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l==r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">merge_sort</span>(l,mid);<span class="built_in">merge_sort</span>(mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="keyword">int</span> j=l,i=mid+<span class="number">1</span>,h=<span class="number">0</span>;</span><br><span class="line">    ll sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (j&lt;=mid&amp;&amp;i&lt;=r)<span class="comment">//k[j].c 为 0 时就加上</span></span><br><span class="line">        <span class="keyword">if</span> (k[j].b&lt;=k[i].b) sum+=(!k[j].c)*k[j].p,tmp[h++]=k[j++];</span><br><span class="line">        <span class="keyword">else</span> k[i].sum+=sum,tmp[h++]=k[i++];</span><br><span class="line">    <span class="keyword">while</span> (j&lt;=mid) tmp[h++]=k[j++];</span><br><span class="line">    <span class="keyword">while</span> (i&lt;=r) k[i].sum+=sum,tmp[h++]=k[i++];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=l,t=<span class="number">0</span>;t&lt;h;++t,++i) k[i]=tmp[t];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>,a,b,c;i&lt;n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">        k[i]=(Node)&#123;a,b,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,c,<span class="number">0</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> tot=n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>,a,b,c,d;i&lt;m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d&quot;</span>,&amp;a,&amp;b,&amp;c,&amp;d);</span><br><span class="line">        k[tot++]=(Node)&#123;a<span class="number">-1</span>,b<span class="number">-1</span>,<span class="number">1</span>,i,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        k[tot++]=(Node)&#123;a<span class="number">-1</span>,d,<span class="number">1</span>,i,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        k[tot++]=(Node)&#123;c,d,<span class="number">1</span>,i,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        k[tot++]=(Node)&#123;c,b<span class="number">-1</span>,<span class="number">1</span>,i,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(k,k+tot);</span><br><span class="line">    <span class="built_in">merge_sort</span>(<span class="number">0</span>,tot<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tot;++i)</span><br><span class="line">        <span class="keyword">if</span> (k[i].c) ans[k[i].id]+=k[i].sum*k[i].f;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i) <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;同步发表于 P3755 题解。&lt;/p&gt;</summary>
    
    
    
    
    <category term="数据结构" scheme="https://mydcwfy.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="分治" scheme="https://mydcwfy.github.io/tags/%E5%88%86%E6%B2%BB/"/>
    
    <category term="CDQ 分治" scheme="https://mydcwfy.github.io/tags/CDQ-%E5%88%86%E6%B2%BB/"/>
    
    <category term="题解" scheme="https://mydcwfy.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>CDQ 分治</title>
    <link href="https://mydcwfy.github.io/2021/12/13/CDQ-%E5%88%86%E6%B2%BB/"/>
    <id>https://mydcwfy.github.io/2021/12/13/CDQ-%E5%88%86%E6%B2%BB/</id>
    <published>2021-12-13T13:59:17.000Z</published>
    <updated>2021-12-13T14:00:10.447Z</updated>
    
    <content type="html"><![CDATA[<p>同样可以使用二维树状数组。</p><span id="more"></span><h2 id="CDQ-分治"><a href="#CDQ-分治" class="headerlink" title="CDQ 分治"></a>CDQ 分治</h2><p>首先我们看一下模板题：</p><p><a href="https://www.luogu.com.cn/problem/P3810">题目传送门 Luogu</a></p><p><a href="https://www.acwing.com/problem/content/2817/">题目传送门 AcWing</a></p><h3 id="1-主要思想"><a href="#1-主要思想" class="headerlink" title="1. 主要思想"></a>1. 主要思想</h3><p>我们一维一维地扩展。</p><h4 id="1）一维"><a href="#1）一维" class="headerlink" title="1）一维"></a>1）一维</h4><p>首先，我们考虑只有一维的。</p><p>直接排序即可。</p><h4 id="2）二维"><a href="#2）二维" class="headerlink" title="2）二维"></a>2）二维</h4><p>然后，我们考虑有二维的。</p><p>首先，我们按双关键字排序，然后从前往后一个一个枚举，在 $i$ 前面才可能会有答案。</p><p>也就是说，一定有 $a[j]\leq a<a href="j%3Ci">i</a>$。</p><p>怎样考虑优化呢？</p><p>我们可以先对 $b[]$ 进行离散化，然后再利用树状数组就可以解决了。</p><p>时间复杂度为 $O(n\log n)$。</p><p>另外，我们可以使用分治。</p><p>假设 $j$ 对 $i$ 满足条件，有三种情况：</p><ol><li>同时在左边。</li><li>同时在右边。</li><li>$j$ 在左边，$i$ 在右边。</li></ol><p>对于前两种情况，我们可以进行递归。</p><p>左边的 $a$ 一定小于等于右边的 $a$，于是我们就可以只考虑 $b$。</p><p>考虑与求逆序对类似的算法。</p><p>首先，我们按 $a$ 进行排序，然后归并计算答案时按 $b$ 进行排序。</p><p>对于每一个区间，我们按 $b$ 进行归并排序，在右边的 $i$ 使用双指针算法就可以计算了。</p><p>由于本身就是一个归并排序的过程，我们无需整个排序，只需归并即可。</p><p>时间复杂度为 $O(n\log n)$。</p><h4 id="3）三维"><a href="#3）三维" class="headerlink" title="3）三维"></a>3）三维</h4><p>即本题。</p><p>首先，我们按照三关键字排序。</p><p>那么，$j$ 只有在 $i$ 的左边，才可能对 $i$ 满足条件。</p><p>还是按照二维的分治算法，我们可以二分区间。</p><p>当 $j$ 在左，$i$ 在右时，我们可以对于每一个区间按 $b$ 进行归并排序。</p><p>对于每一个 $i$，我们可以二分找到最后一个小于等于 $b_i$ 的 $j$，在利用二维的树状数组算法，我们就可以找到 $j$ 之前小于等于 $c_i$ 的值。</p><p>每一层都是 $O(n\log n)$，其中枚举每一个为 $O(n)$，二分和树状数组为 $O(\log n)$，在有 $\log n$ 层，总复杂度为 $O(n\log^2 n)$。</p><h4 id="4）注意事项"><a href="#4）注意事项" class="headerlink" title="4）注意事项"></a>4）注意事项</h4><p>我们不得不处理两个数据完全相同的情况，因为枚举 $i$，它后面的相同的就不会枚举到，所以要去重。</p><h3 id="2-例题"><a href="#2-例题" class="headerlink" title="2. 例题"></a>2. 例题</h3><h4 id="T1：模板题"><a href="#T1：模板题" class="headerlink" title="T1：模板题"></a>T1：模板题</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>,M=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a,b,c,sz,res;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> Node &amp;t)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a!=t.a) <span class="keyword">return</span> a&lt;t.a;</span><br><span class="line">        <span class="keyword">if</span> (b!=t.b) <span class="keyword">return</span> b&lt;t.b;</span><br><span class="line">        <span class="keyword">return</span> c&lt;t.c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">bool</span> <span class="keyword">operator</span> ==(<span class="keyword">const</span> Node &amp;t)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a==t.a&amp;&amp;b==t.b&amp;&amp;c==t.c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;k[N],tmp[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tr[M],ans[N],n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=x;i&lt;M;i+=<span class="built_in">lowbit</span>(i)) tr[i]+=c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=x;i;i-=<span class="built_in">lowbit</span>(i)) res+=tr[i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l==r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">merge_sort</span>(l,mid);<span class="built_in">merge_sort</span>(mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="keyword">int</span> j=l,i=mid+<span class="number">1</span>,h=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (j&lt;=mid&amp;&amp;i&lt;=r)</span><br><span class="line">        <span class="keyword">if</span> (k[j].b&lt;=k[i].b) <span class="built_in">add</span>(k[j].c,k[j].sz),tmp[h++]=k[j++];</span><br><span class="line">        <span class="keyword">else</span> k[i].res+=<span class="built_in">ask</span>(k[i].c),tmp[h++]=k[i++];</span><br><span class="line">    <span class="keyword">while</span> (j&lt;=mid) <span class="built_in">add</span>(k[j].c,k[j].sz),tmp[h++]=k[j++];</span><br><span class="line">    <span class="keyword">while</span> (i&lt;=r) k[i].res+=<span class="built_in">ask</span>(k[i].c),tmp[h++]=k[i++];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=l;i&lt;=mid;++i) <span class="built_in">add</span>(k[i].c,-k[i].sz);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> now=<span class="number">0</span>,i=l;now&lt;h;++i,++now) k[i]=tmp[now];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>,a,b,c;i&lt;n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">        k[i]=(Node)&#123;a,b,c,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(k,k+n);</span><br><span class="line">    <span class="keyword">int</span> now=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">        <span class="keyword">if</span> (k[now<span class="number">-1</span>]==k[i]) k[now<span class="number">-1</span>].sz++;</span><br><span class="line">        <span class="keyword">else</span> k[now++]=k[i];</span><br><span class="line">    <span class="built_in">merge_sort</span>(<span class="number">0</span>,now<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;now;++i)</span><br><span class="line">        ans[k[i].res+k[i].sz<span class="number">-1</span>]+=k[i].sz;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T2：-CQOI2017-老C的任务"><a href="#T2：-CQOI2017-老C的任务" class="headerlink" title="T2：[CQOI2017]老C的任务"></a>T2：[CQOI2017]老C的任务</h4><p><a href="https://www.luogu.com.cn/problem/P3755">题目传送门 Luogu</a></p><p><a href="https://www.acwing.com/problem/content/2849/">题目传送门 AcWing</a></p><p>首先，我们可以转化为二维前缀和，问题就转化为了 $x\leq x_{now},y\leq y_{now}$ 的所有 $p$ 之和。</p><p>如果是在线，可能就会超时，我们使用离线算法。</p><p>将查询的点记为 $1$，原来的点记为 0。</p><p>那么，我们就相当于 $x\leq x_{now},y\leq y_{now}, z&lt; z_{now}$ 的点。</p><p>由于 $z$ 只有 0 和 1，直接无需树状数组，复杂度 $O(n\log n)$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a,b,c,id,f,p;</span><br><span class="line">    ll sum;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> Node &amp;t)&#123;</span><br><span class="line">        <span class="keyword">if</span> (a!=t.a) <span class="keyword">return</span> a&lt;t.a;</span><br><span class="line">        <span class="keyword">if</span> (b!=t.b) <span class="keyword">return</span> b&lt;t.b;</span><br><span class="line">        <span class="keyword">return</span> c&lt;t.c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;k[N],tmp[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line">ll ans[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l==r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">merge_sort</span>(l,mid);<span class="built_in">merge_sort</span>(mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="keyword">int</span> j=l,i=mid+<span class="number">1</span>,h=<span class="number">0</span>;</span><br><span class="line">    ll sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (j&lt;=mid&amp;&amp;i&lt;=r)</span><br><span class="line">        <span class="keyword">if</span> (k[j].b&lt;=k[i].b) sum+=(!k[j].c)*k[j].p,tmp[h++]=k[j++];</span><br><span class="line">        <span class="keyword">else</span> k[i].sum+=sum,tmp[h++]=k[i++];</span><br><span class="line">    <span class="keyword">while</span> (j&lt;=mid) tmp[h++]=k[j++];</span><br><span class="line">    <span class="keyword">while</span> (i&lt;=r) k[i].sum+=sum,tmp[h++]=k[i++];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=l,t=<span class="number">0</span>;t&lt;h;++t,++i) k[i]=tmp[t];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>,a,b,c;i&lt;n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">        k[i]=(Node)&#123;a,b,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,c,<span class="number">0</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> tot=n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>,a,b,c,d;i&lt;m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d&quot;</span>,&amp;a,&amp;b,&amp;c,&amp;d);</span><br><span class="line">        k[tot++]=(Node)&#123;a<span class="number">-1</span>,b<span class="number">-1</span>,<span class="number">1</span>,i,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        k[tot++]=(Node)&#123;a<span class="number">-1</span>,d,<span class="number">1</span>,i,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        k[tot++]=(Node)&#123;c,d,<span class="number">1</span>,i,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        k[tot++]=(Node)&#123;c,b<span class="number">-1</span>,<span class="number">1</span>,i,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(k,k+tot);</span><br><span class="line">    <span class="built_in">merge_sort</span>(<span class="number">0</span>,tot<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tot;++i)</span><br><span class="line">        <span class="keyword">if</span> (k[i].c) ans[k[i].id]+=k[i].sum*k[i].f;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i) <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T3：-CQOI2011-动态逆序对"><a href="#T3：-CQOI2011-动态逆序对" class="headerlink" title="T3：[CQOI2011]动态逆序对"></a>T3：[CQOI2011]动态逆序对</h4><p><a href="https://www.luogu.com.cn/problem/P3157">题目传送门 Luogu</a></p><p><a href="https://www.acwing.com/problem/content/2821/">题目传送门 AcWing</a></p><p>其实，使用 CDQ 分治，我们可以构造三维，其中，第三维可以表示时间戳。</p><p>例如本题，我们可以用第三维表示被删除的时间。</p><p>如果有未被删除的数，把时间戳设为大于总删除数即可。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;同样可以使用二维树状数组。&lt;/p&gt;</summary>
    
    
    
    
    <category term="数据结构" scheme="https://mydcwfy.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="分治" scheme="https://mydcwfy.github.io/tags/%E5%88%86%E6%B2%BB/"/>
    
    <category term="CDQ 分治" scheme="https://mydcwfy.github.io/tags/CDQ-%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>仙人掌</title>
    <link href="https://mydcwfy.github.io/2021/12/13/%E4%BB%99%E4%BA%BA%E6%8E%8C/"/>
    <id>https://mydcwfy.github.io/2021/12/13/%E4%BB%99%E4%BA%BA%E6%8E%8C/</id>
    <published>2021-12-13T13:56:38.000Z</published>
    <updated>2021-12-13T14:07:04.450Z</updated>
    
    <content type="html"><![CDATA[<p>同步发表于 P5236 题解。</p><span id="more"></span><h2 id="0-前置知识"><a href="#0-前置知识" class="headerlink" title="0. 前置知识"></a>0. 前置知识</h2><p>本蒟蒻也是最近学习这个 <del>巨毒瘤</del> 的算法，好多地方也是一头雾水，仔细想了几个晚自习后，有些恍然大悟，于是写了这篇题解。</p><p>需要的东西：Tarjan（似乎没有具体的模板）。</p><p>就是一个求边强连通分量的算法，一会我们要利用它并改进为我们所用。</p><p>还有一颗看完我的博客的心~~</p><h2 id="1-圆方树"><a href="#1-圆方树" class="headerlink" title="1. 圆方树"></a>1. 圆方树</h2><p>其实，圆方树就是将环的作用转化为一棵树的作用，使原来的图变为了新图，许多性质没有变化，但处理树会简单许多。</p><p>以例题为例：<a href="https://www.luogu.com.cn/problem/P5236">题目传送门</a></p><p>想一想，怎样将环变为树的样子？</p><p>回归定义的一个特殊性质：</p><blockquote><p>任意一条边至多只出现在一条简单回路的无向连通图称为仙人掌。</p></blockquote><p>翻译成人话（？），就是原图由一些边不相交的环和另外的边构成。</p><p>首先，可以想到的是，将一个环缩为一个点，将整个图缩为一棵树（因为无向图中只有树和环两种形状，没有第三种，又因为没有环套环（边重合），所以一定变为一棵树）。</p><p>但是，环内的边和点间的距离就没法统计了。</p><p>我们假设任意一个点为根，那么一定会有一个点距离根节点最近。</p><p>来看一个图（ <del>盗的例题的图</del> ）</p><p><img src="https://cdn.luogu.com.cn/upload/pic/52854.png"></p><p>假设七号点为根，那么，对于 “1-2-3-4” 的环，三号点距离根节点最近。</p><p>我们设最近的点具有 “A” 性质。</p><p>下面，我们证明一个东西：环内的点到根节点一定经过环内具有 “A” 性质的点。</p><p>显然，如果不经过该点的话，就不可能达到根节点。</p><p>那么，如果在树中，该点如果想向上走的话，必须经过该环的 “A” 节点。</p><p>我们就可以考虑将这种关系转化为树的节点之间的关系。</p><p>环内的节点通向 “A” 节点只可能有两条路径：顺时针和逆时针。</p><p>又由于对于每一个点，长的一条路肯定用不上，那么我们只需要存到 “A” 节点的最短距离即可。</p><p>那么，原图很大程度上就等价于新图了。</p><p>但是，对于一些题来说，我们需要判断原来的边还是环中的边变换过来的。</p><p>那么，我们可以使用 “圆方树”。</p><p>假设原来的点叫做圆点，新建的点叫做方点。</p><p>对于环内的节点，我们可以新建一个方点，向 “A” 的点连接一条权值为 0 的边，在从新点到其他点连接原来应有的权值。</p><p>现在，我们判断是不是原来的边，只需判断是不是有新建的点即可。</p><p>举个例子，上面的仙人掌建为圆方树（7 号是根节点）是：</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/lhd1whrx.png"></p><h2 id="2-Tarjan-算法及变形"><a href="#2-Tarjan-算法及变形" class="headerlink" title="2. Tarjan 算法及变形"></a>2. Tarjan 算法及变形</h2><p>我们刚才讨论的范围，是在能求简单环的基础上，现在，我们的问题是，如何才能找到所有的简单环？</p><p>可能大家都会想到，直接用 Tarjan 算法，就可以去求了。</p><p>但是，有一个问题：Tarjan 求的是边双联通分量，即去掉任意一条边后，原图仍然联通，那么，原图的 “123456”6 个点，满足该要求，但他们并不属于同一个简单环，怎么办呢？</p><p>于是，需要我们改进该算法。</p><p>首先，我们回顾一下原算法。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//来自本人缩点模板题</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dfn[x]=low[x]=++tot;</span><br><span class="line">st[++top]=x, ins[x]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=h[x];~i;i=ne[i])</span><br><span class="line">    <span class="keyword">if</span> (!dfn[e[i]])</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">Tarjan</span>(e[i]);</span><br><span class="line">low[x]=<span class="built_in">min</span>(low[x],low[e[i]]);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ins[e[i]]) low[x] = <span class="built_in">min</span>(low[x], dfn[e[i]]);</span><br><span class="line"><span class="keyword">if</span> (low[x]!=dfn[x]) <span class="keyword">return</span>;</span><br><span class="line">cnt++;<span class="keyword">int</span> now;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">now=st[top--];</span><br><span class="line">ins[now]=<span class="number">0</span>; </span><br><span class="line">bel[now]=cnt;</span><br><span class="line">&#125;<span class="keyword">while</span> (now!=x);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原算法中，只要还在栈中，我们都将所有归为一个边双联通分量。</p><p>但是，现在，如果我们还遇到这种情况的话，就应该一个一个的处理为一个一个的简单环，而不是揉在一起。</p><p>所以，当我们遇到 $low[e[i]]&lt;dfn[x]$ 的时候，我们直接倒回去，就可以倒推出一整个环的情况了。</p><p>请注意，此时 $x$ 也为其中的点。</p><p>具体来说，我们遇到这种情况时，直接 $\operatorname{build-round-square}(x,e[i],w)$，表示从 $e[i]$ 倒推，直到 $x$ 为 “A” 点，其中 $(x,e[i])$ 的权值为 $w$。</p><p>具体来说，我们遇到了这样的情况：</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/vuo9hei8.png"></p><p><del>（好像少标了一条边的权值）</del></p><p>我们知道，Tarjan 算法建了一棵搜索树，在树上进行计算。</p><p>如图，黑边就是搜索树的边，而红边就是非树边。</p><p>肉眼可见，有两个环。</p><p>对于每个节点，我们维护他在搜索树中的父亲，还有到父亲的距离。</p><p>如果相连的节点在他的下面（即不是父亲），并且他的父亲不是该节点，说明有另外一条路径（树边）可达他的儿子，我们就可以 $\operatorname{build-round-square}(x,e[i],w)$ 了。</p><p>举个例子，搜索完 1 节点后，我们找连接点，找到 5 号点，发现满足上面的性质，于是就 $\operatorname{build-round-square}(1,5,2)$ 即可以了。</p><p>如果你还感到费解，请看前面的例图，加以理解。</p><p>如果你对传参有不理解，看一下代码就知道了。</p><p>于是，我们就可以得到这样的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> h[],<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx]=b,ne[idx]=h[a],w[idx]=c,h[a]=idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_round_square</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum=w;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=y;i!=x;i=fa[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// cout&lt;&lt;i&lt;&lt;&#x27; &#x27;;</span></span><br><span class="line">        s[i]=sum;</span><br><span class="line">        sum+=fw[i];</span><br><span class="line">    &#125;</span><br><span class="line">    stot[x]=s[x]=sum;</span><br><span class="line">    <span class="built_in">add</span>(h2,x,++square_node,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=y;i!=x;i=fa[i])</span><br><span class="line">    &#123;</span><br><span class="line">        stot[i]=sum;</span><br><span class="line">        <span class="built_in">add</span>(h2,square_node,i,<span class="built_in">min</span>(s[i],stot[i]-s[i]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> from)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dfn[x]=low[x]=++tot;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=h1[x],j;~i;i=ne[i])</span><br><span class="line">        <span class="keyword">if</span> (!dfn[j=e[i]])</span><br><span class="line">        &#123;</span><br><span class="line">            fa[j]=x,fw[j]=w[i];</span><br><span class="line">            <span class="built_in">tarjan</span>(j,i);</span><br><span class="line">            low[x]=<span class="built_in">min</span>(low[x],low[j]);</span><br><span class="line">            <span class="keyword">if</span> (low[j]&gt;dfn[x]) <span class="built_in">add</span>(h2,x,j,w[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (i!=(from^<span class="number">1</span>)) low[x]=<span class="built_in">min</span>(low[x],dfn[e[i]]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=h1[x],j;~i;i=ne[i])</span><br><span class="line">        <span class="keyword">if</span> (dfn[j=e[i]]&gt;dfn[x]&amp;&amp;fa[j]!=x)</span><br><span class="line">            <span class="built_in">build_round_square</span>(x,j,w[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-回归本题"><a href="#3-回归本题" class="headerlink" title="3. 回归本题"></a>3. 回归本题</h2><h4 id="1）题意"><a href="#1）题意" class="headerlink" title="1）题意"></a>1）题意</h4><ol><li>给定一个仙人掌图，有 $Q$ 次询问，询问 $u$ 和 $v$ 之间的最短路。</li><li>$n,q\leq10^4,m\leq2*10^4,w\leq10^5$。</li></ol><h4 id="2）具体算法"><a href="#2）具体算法" class="headerlink" title="2）具体算法"></a>2）具体算法</h4><p>前面的东西是总体的仙人掌转圆方树的算法，对于不同的题来说，肯定也会有一些细节不同。</p><p>当然，仙人掌的题的大概思路是：</p><ol><li>将仙人掌转化为圆方树。</li><li>结合其他树的算法（树链剖分，点分治等），将本题树的写法写好。</li><li>分情况，看是圆点还是方点，进行算法调整。</li></ol><p>本题也是如此。</p><p>考虑树上怎么做。</p><p>很明显，使用倍增算法，将一个节点的 $2^k$ 次祖先存储下来。</p><p>再利用前缀和的思想，答案即为：$ans=d[a]+d[b]-2d[lca]$。</p><p>现在，我们考虑分类讨论。</p><p>首先，假设 $lca$ 是圆点，直接按上面求即可（因为会在原来的点相会）。</p><p>假设 $lca$ 是方点呢？</p><p>这说明，当到了 $lca$ 的前一层时，两个点是在同一个环上。</p><p>对于每一个节点，可以存储一个前缀和 $s[]$，即从 “A” 性质的点按同一个方向（指一个环中是同一个方向）走到该点的距离。</p><p>特别地，”A” 性质的点记为环的总权值。</p><p>现在我们可以将环间的路径表示为（$x,y$ 分别表示 $a,b$ 环里的节点）：$d=\min(|s[x]-s[y]|,stot[x]-|tot - |s[x] - s[y]||)$。</p><p>现在我们就可以完美的解决了。</p><h2 id="4-代码"><a href="#4-代码" class="headerlink" title="4. 代码"></a>4. 代码</h2><p>还会有一些细节从代码中呈现。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e4</span>+<span class="number">10</span>,M=<span class="number">1e5</span>+<span class="number">10</span>,L=<span class="number">14</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> h1[N],h2[N],e[M],ne[M],w[M],idx,square_node;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">h1,h2分别表示原图和新图的节点的头指针</span></span><br><span class="line"><span class="comment">square_node表示新建的点 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">int</span> dfn[N],low[N],tot;<span class="comment">//Tarjan 算法 </span></span><br><span class="line"><span class="keyword">int</span> stot[N],s[N],fa[N],fw[N];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">stot表示所在环的总权值</span></span><br><span class="line"><span class="comment">s是前缀和 </span></span><br><span class="line"><span class="comment">fa即为搜索树中的父亲</span></span><br><span class="line"><span class="comment">fw表示到父亲的距离 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">int</span> f[N][L+<span class="number">1</span>],depth[N],dis[N];<span class="comment">//倍增算法 </span></span><br><span class="line"><span class="keyword">int</span> n,m,q,A,B;<span class="comment">//A,B表示走到同一个环中的节点 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> h[],<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx]=b,ne[idx]=h[a],w[idx]=c,h[a]=idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_round_square</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum=w;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=y;i!=x;i=fa[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// cout&lt;&lt;i&lt;&lt;&#x27; &#x27;;</span></span><br><span class="line">        s[i]=sum;</span><br><span class="line">        sum+=fw[i];</span><br><span class="line">    &#125;</span><br><span class="line">    stot[x]=s[x]=sum;<span class="comment">//注意s[x]要赋值为总权值 </span></span><br><span class="line">    <span class="built_in">add</span>(h2,x,++square_node,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=y;i!=x;i=fa[i])</span><br><span class="line">    &#123;</span><br><span class="line">        stot[i]=sum;</span><br><span class="line">        <span class="built_in">add</span>(h2,square_node,i,<span class="built_in">min</span>(s[i],stot[i]-s[i]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> from)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dfn[x]=low[x]=++tot;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=h1[x],j;~i;i=ne[i])</span><br><span class="line">        <span class="keyword">if</span> (!dfn[j=e[i]])</span><br><span class="line">        &#123;</span><br><span class="line">            fa[j]=x,fw[j]=w[i];</span><br><span class="line">            <span class="built_in">tarjan</span>(j,i);</span><br><span class="line">            low[x]=<span class="built_in">min</span>(low[x],low[j]);</span><br><span class="line">            <span class="keyword">if</span> (low[j]&gt;dfn[x]) <span class="built_in">add</span>(h2,x,j,w[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (i!=(from^<span class="number">1</span>)) low[x]=<span class="built_in">min</span>(low[x],dfn[e[i]]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=h1[x],j;~i;i=ne[i])</span><br><span class="line">        <span class="keyword">if</span> (dfn[j=e[i]]&gt;dfn[x]&amp;&amp;fa[j]!=x)<span class="comment">//Tarjan算法改进 </span></span><br><span class="line">            <span class="built_in">build_round_square</span>(x,j,w[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span><span class="comment">//倍增算法预处理 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    depth[x]=depth[fa]+<span class="number">1</span>;</span><br><span class="line">    f[x][<span class="number">0</span>]=fa;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=L;++i) f[x][i]=f[f[x][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=h2[x];~i;i=ne[i])</span><br><span class="line">        <span class="keyword">if</span> (e[i]!=fa)</span><br><span class="line">        &#123;</span><br><span class="line">            dis[e[i]]=dis[x]+w[i];</span><br><span class="line">            <span class="built_in">dfs</span>(e[i],x);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (depth[a]&lt;depth[b]) <span class="built_in">swap</span>(a,b);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=L;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">        <span class="keyword">if</span> (depth[f[a][i]]&gt;=depth[b]) a=f[a][i];</span><br><span class="line">    <span class="keyword">if</span> (a==b) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=L;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">        <span class="keyword">if</span> (f[a][i]!=f[b][i]) a=f[a][i],b=f[b][i];</span><br><span class="line">    A=a,B=b;</span><br><span class="line">    <span class="keyword">return</span> f[a][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h1,<span class="number">-1</span>,<span class="keyword">sizeof</span> h1);</span><br><span class="line">    <span class="built_in">memset</span>(h2,<span class="number">-1</span>,<span class="keyword">sizeof</span> h2);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;n,&amp;m,&amp;q);</span><br><span class="line">    <span class="keyword">int</span> a,b,c;</span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">        <span class="built_in">add</span>(h1,a,b,c);<span class="built_in">add</span>(h1,b,a,c);</span><br><span class="line">    &#125;</span><br><span class="line">    square_node=n;</span><br><span class="line">    <span class="built_in">tarjan</span>(<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span> (q--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">        <span class="keyword">int</span> lca=<span class="built_in">LCA</span>(a,b);</span><br><span class="line">        <span class="keyword">if</span> (lca&lt;=n) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,dis[a]+dis[b]<span class="number">-2</span>*dis[lca]);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> res=dis[a]-dis[A]+dis[b]-dis[B];</span><br><span class="line">            res+=<span class="built_in">min</span>(<span class="built_in">abs</span>(s[A]-s[B]),stot[A]-<span class="built_in">abs</span>(s[A]-s[B]));</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;同步发表于 P5236 题解。&lt;/p&gt;</summary>
    
    
    
    
    <category term="题解" scheme="https://mydcwfy.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
    <category term="图论" scheme="https://mydcwfy.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>最小表示法</title>
    <link href="https://mydcwfy.github.io/2021/12/13/%E6%9C%80%E5%B0%8F%E8%A1%A8%E7%A4%BA%E6%B3%95/"/>
    <id>https://mydcwfy.github.io/2021/12/13/%E6%9C%80%E5%B0%8F%E8%A1%A8%E7%A4%BA%E6%B3%95/</id>
    <published>2021-12-13T13:54:44.000Z</published>
    <updated>2021-12-13T13:55:13.296Z</updated>
    
    <content type="html"><![CDATA[<p>似乎比较简单的算法。</p><span id="more"></span><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>一般是对于字符串而定义的。</p><p>我们定义<strong>循环</strong>是指不断将第一个字符放到最后。</p><p>显然，经过循环之后，一共会产生 $n$ 个字符串（$n$ 为字符串长度）。</p><p>其中最小的就是最小表示法。</p><p>暴力是 $O(n^2)$，我们可以通过该算法得到 $O(n)$ 的时间复杂度。</p><h2 id="2-思想"><a href="#2-思想" class="headerlink" title="2. 思想"></a>2. 思想</h2><p>首先，这个相当于是一个环。</p><p>考虑<strong>破环为链</strong>，复制一倍接在后面，那么 $1\sim n$ 开始的长度为 $n$ 的字符串就是我们要找的。</p><p>我们最开始定义两个指针（差不多是双指针算法）：$i=1,j=2$。</p><p>直接暴力比较 $i$ 和 $j$ 开头的字符串的大小。</p><p>假设最后遇到了 $s_{i+k}&gt;s_{j+k}$，那么以 $i$ 开头的一定不是最小表示法。</p><p>同时，我们可以发现，$[i+1,i+k]$ 任意开头的，仍然不是最小表示法。</p><p>明显的，我们找到 $[j+1,j+k]$，可以发现，对应的 $i$ 开头的，一定比对应的 $j$ 开头的更大。</p><p>这时，我们可以直接将 $i$ 跳到 $i+k+1$。</p><p>可以发现，时间复杂度和 $i,j$ 移动的长度是同级的，而显然，$i,j$ 的移动都是 $O(n)$ 的，所以时间复杂度为 $O(n)$。</p><p>但是，我们可能会遇到几个问题：</p><ol><li>一直到 $k=n$ 的时候，都没有遇到 $s_{i+k}\not=s_{j+k}$：说明我们已经找到了更小的循环节，也就是已经遍历完了（后面都一样了）</li><li>$i\leftarrow i+k+1$ 后，$i=j$：$i\leftarrow i+1$，使两串错开。</li></ol><p>就结束了。似乎也没有什么例题：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) str[i + n] = str[i];</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">2</span>, j = <span class="number">1</span>, k;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= n &amp;&amp; j &lt;= n)</span><br><span class="line">&#123;</span><br><span class="line">k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (k &lt; n &amp;&amp; str[i + k] == str[j + k]) k ++;</span><br><span class="line"><span class="keyword">if</span> (k == n) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (str[i + k] &lt; str[j + k]) j += k + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> i += k + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (i == j) i ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="built_in">min</span>(i, j);</span><br><span class="line"><span class="keyword">for</span> (k = ans; k &lt;= ans + n - <span class="number">1</span>; ++ k) cout &lt;&lt; str[k] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;似乎比较简单的算法。&lt;/p&gt;</summary>
    
    
    
    
    <category term="字符串" scheme="https://mydcwfy.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>模拟退火</title>
    <link href="https://mydcwfy.github.io/2021/12/13/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB/"/>
    <id>https://mydcwfy.github.io/2021/12/13/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB/</id>
    <published>2021-12-13T12:52:35.000Z</published>
    <updated>2021-12-13T12:53:07.424Z</updated>
    
    <content type="html"><![CDATA[<p><strong>骗分大法好！</strong></p><span id="more"></span><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>一种神仙的随机算法，在你找不到 DP 的方法时可以使用<del>来骗分</del>。比如我在 NOIP 考场上 T3 就骗了 96 pts（虽然差一点就想到了 DP 正解）。</p><h2 id="2-思想"><a href="#2-思想" class="headerlink" title="2. 思想"></a>2. 思想</h2><p>首先，它本身是在一个很大的 $x$ 取值范围寻找函数的最优解（注意函数不一定是单峰或单调）。</p><p>下面默认寻找最小值。</p><p>算法就是我们找到一个初值，然后一直随机跳，找到最优解。</p><p>再定义一个温度 $t$，可以表示随机的范围。比如当前的区间就是 $[x_0-dt,x_0+dt]$，其中 $d$ 是常数。</p><p>$t$ 会不断衰减，定义一个衰减系数，每一次 $t$ 都会乘上衰减系数，一般很靠近 1。</p><p>假设我们当前是 $x_0$，随机到的点是 $x$，再假设 $f(x)-f(x_0)=\Delta$。</p><ol><li>$\Delta&lt;0$，则 $x_0$ 不优，我们直接跳到 $x$ 即可。</li><li>$\Delta\geq0$，则 $x$ 不优。注意函数可能不止一个峰值，所以有可能 $x$ 的位置更靠近最小值，我们就需要有一定的概率跳过去。$t$ 越小，概率越小，$\Delta$ 越大，概率越小。</li></ol><p>对于第二种情况，这个概率各家都不同，一般来看，可以使用 $e^{-\Delta kt}$ 的概率。其中 $k$ 是常数，需要自己定义。</p><p>很明显，$0&lt;e^{-\Delta kt}&lt;1$。</p><p>好，上面是理论，下面才是重点。（骗分嘛，怎么好怎么来）</p><h2 id="3-实践与经验"><a href="#3-实践与经验" class="headerlink" title="3. 实践与经验"></a>3. 实践与经验</h2><p>诚然，一次的答案确实可能是局部的最优解而不是全局的。</p><p>于是，我们就多做几次，每一次都这么走，那么肯定走到全局的最优解的概率是越大的。</p><p>那么，我们可以得到第一个结论：<strong>时间越多，答案的正确性越大。</strong></p><p>还有很多的题目，是无法控制步长的（甚至连函数都不算），我们经过实验，可以发现：<strong>衰减系数越大，答案的正确性越大。</strong></p><p>然后，<strong>尽可能的推出一些性质（比如贪心构造，即使可能正确性有误），尽量的靠近最优解</strong>。这样的正确性比较高。（比如 NOIP T3）</p><p>下面给出一个简单的模板：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = INF, now;</span><br><span class="line"><span class="keyword">double</span> k = ;<span class="comment">//自定义参数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">double</span> t = <span class="number">1e7</span>; t &gt; <span class="number">1e-7</span>; t *= <span class="number">0.999997</span>)<span class="comment">//衰减参数</span></span><br><span class="line">&#123;<span class="comment">//先生成新解 cur</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">clock</span>() / CLOCKS_PER_SEC &gt; <span class="number">0.9</span>) <span class="keyword">return</span> ans;</span><br><span class="line"><span class="keyword">int</span> cur = <span class="built_in">get_ans</span>();</span><br><span class="line"><span class="keyword">if</span> (cur &lt; now || <span class="built_in">exp</span>(- (cur - now) * t * k) &lt; <span class="built_in">rand</span>() / RAND_MAX) now = cur;<span class="comment">//比较两解，如果大的话有一定概率跳过去</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-例题"><a href="#4-例题" class="headerlink" title="4. 例题"></a>4. 例题</h2><h4 id="T1：-NOIP2021-T3-方差"><a href="#T1：-NOIP2021-T3-方差" class="headerlink" title="T1：[NOIP2021 T3]方差"></a>T1：[NOIP2021 T3]方差</h4><p><a href="https://www.luogu.com.cn/problem/P7962">题目传送门 Luogu</a></p><p>注意至少要推出差分的性质，得分会至少有 50-70 pts。</p><p>给出考场的 96 pts 代码，Luogu 民间数据 88 pts。（去掉了 <code>freopen</code>，中文注释是后来加的）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[N], n, b[N], tmp[N], pre[N], suf[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((c = <span class="built_in">getchar</span>()) &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>;</span><br><span class="line">    x = c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">while</span> ((c = <span class="built_in">getchar</span>()) &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (flag) x = -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">T1</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x, T1 &amp;...x1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x), <span class="built_in">read</span>(x1...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">get_S</span><span class="params">()</span><span class="comment">//得到方差</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++ i) a[i] = a[i - <span class="number">1</span>] + tmp[i - <span class="number">1</span>];</span><br><span class="line">    ll sum1 = <span class="number">0</span>, sum2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i)</span><br><span class="line">        sum1 += a[i], sum2 += a[i] * a[i];</span><br><span class="line">    <span class="keyword">return</span> sum2 * n - sum1 * sum1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*void solve_to_right(int l, int r)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    // for (int times = 1; times &lt;= r - l + 1; ++ times)</span></span><br><span class="line"><span class="comment">        for (int i = l; i &lt;= r; ++ i)</span></span><br><span class="line"><span class="comment">            a[i] = min(a[i], a[i - 1] + a[i + 1] - a[i]);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">void solve_to_left(int l, int r)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    // for (int times = 1; times &lt;= r - l + 1; ++ times)</span></span><br><span class="line"><span class="comment">        for (int i = r; i &gt;= l; -- i)</span></span><br><span class="line"><span class="comment">            a[i] = max(a[i], a[i - 1] + a[i + 1] - a[i]);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">void solve(int l, int r)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    if (r - l + 1 &lt;= 2) return;</span></span><br><span class="line"><span class="comment">    if (r - l + 1 == 3)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        if (a[l] - a[1] &gt; a[n] - a[r]) a[l + 1] = min(a[l + 1], a[l] + a[r] - a[l + 1]);</span></span><br><span class="line"><span class="comment">        else a[l + 1] = max(a[l + 1], a[l] + a[r] - a[l + 1]);</span></span><br><span class="line"><span class="comment">        return;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    if (a[l] - a[1] &gt;= a[n] - a[r]) solve_to_right(l + 1, r - 1), solve_to_left(l + 1, r - 2);</span></span><br><span class="line"><span class="comment">    else solve_to_left(l + 1, r - 1), solve_to_right(l + 2, r - 1);</span></span><br><span class="line"><span class="comment">    solve(l + 1, r - 1);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">double</span> t = <span class="number">1e9</span>; t &gt; <span class="number">1e-7</span>; t *= <span class="number">0.9999997</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; t &lt;&lt; endl;</span></span><br><span class="line">        ll now = <span class="built_in">get_S</span>(), nw;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="built_in">rand</span>() % (n - <span class="number">1</span>) + <span class="number">1</span>, j = <span class="built_in">rand</span>() % (n - <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="number">1.0</span> * <span class="built_in">clock</span>() / CLOCKS_PER_SEC) &gt; <span class="number">0.9</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (tmp[i] == tmp[j]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">swap</span>(tmp[i], tmp[j]);</span><br><span class="line">        nw = <span class="built_in">get_S</span>();</span><br><span class="line">        <span class="comment">// printf(&quot;%lld %lld\n&quot;, now, nw);</span></span><br><span class="line">        <span class="keyword">if</span> (nw &gt; now)</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">exp</span>(-(<span class="number">1.0</span> * nw - now) / now * t) * RAND_MAX &lt; <span class="built_in">rand</span>()) <span class="built_in">swap</span>(tmp[i], tmp[j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//    freopen(&quot;variance.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line"><span class="comment">//    freopen(&quot;variance.out&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line">    <span class="built_in">srand</span>(<span class="number">2206704740U</span>);</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) <span class="built_in">read</span>(a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++ i) b[i] = a[i + <span class="number">1</span>] - a[i];</span><br><span class="line">    <span class="built_in">sort</span>(b + <span class="number">1</span>, b + n);</span><br><span class="line">    <span class="built_in">reverse</span>(b + <span class="number">1</span>, b + n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = n - <span class="number">1</span>, tot = <span class="number">0</span>; i &lt;= j;)</span><br><span class="line">    &#123;<span class="comment">//构造贪心，随意构造，可以不管</span></span><br><span class="line">        <span class="keyword">if</span> (pre[i - <span class="number">1</span>] &lt;= suf[j + <span class="number">1</span>]) tmp[i] = b[++ tot], pre[i] = pre[i - <span class="number">1</span>] + tmp[i], i ++;</span><br><span class="line">        <span class="keyword">else</span> tmp[j] = b[++ tot], suf[j] = suf[j + <span class="number">1</span>] + tmp[j], j --;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sa</span>();</span><br><span class="line">    <span class="comment">// solve(1, n);</span></span><br><span class="line">    <span class="comment">// for (int i = 1; i &lt; n; ++ i) cout &lt;&lt; tmp[i] &lt;&lt; &quot; \n&quot;[i == n - 1];</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">get_S</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;骗分大法好！&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="模拟退火" scheme="https://mydcwfy.github.io/tags/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB/"/>
    
  </entry>
  
  <entry>
    <title>舞蹈链（DLX）</title>
    <link href="https://mydcwfy.github.io/2021/12/13/%E8%88%9E%E8%B9%88%E9%93%BE%EF%BC%88DLX%EF%BC%89/"/>
    <id>https://mydcwfy.github.io/2021/12/13/%E8%88%9E%E8%B9%88%E9%93%BE%EF%BC%88DLX%EF%BC%89/</id>
    <published>2021-12-13T11:36:41.000Z</published>
    <updated>2021-12-16T13:43:20.688Z</updated>
    
    <content type="html"><![CDATA[<p>题型有两种：精确覆盖与重复覆盖。</p><span id="more"></span><h2 id="Dancing-Links"><a href="#Dancing-Links" class="headerlink" title="Dancing Links"></a>Dancing Links</h2><h3 id="1-废话"><a href="#1-废话" class="headerlink" title="1. 废话"></a>1. 废话</h3><p>首先，它有几个名字：DLX,Dancing Links,十字链表，舞蹈链。</p><p>然后，它是一种数据结构。</p><p>精确覆盖是指每一列恰好有一个 1。</p><p>重复覆盖是指每一列至少有一个 1。</p><p>它解决的问题，一般矩阵规模较大，但 1 的个数较少。</p><p>可以通过题目来理解。</p><p><a href="https://www.luogu.com.cn/problem/P4929">题目传送门 Luogu</a></p><p><a href="https://www.acwing.com/problem/content/1069/">题目传送门 AcWing</a></p><h3 id="2-精确覆盖问题"><a href="#2-精确覆盖问题" class="headerlink" title="2. 精确覆盖问题"></a>2. 精确覆盖问题</h3><h4 id="1）如何存储矩阵"><a href="#1）如何存储矩阵" class="headerlink" title="1）如何存储矩阵"></a>1）如何存储矩阵</h4><p>使用十字链表。</p><p>对于每一个 1，都建立一个节点。</p><h4 id="2）初始化"><a href="#2）初始化" class="headerlink" title="2）初始化"></a>2）初始化</h4><p>每一个节点的上下左右都连向该方向的最近链表。（如果没有，就循环找）。</p><p>实际使用时，可以按照一行一行的处理。</p><p>同时，对于最前面，我们建立一个哨兵，全为 1。</p><p>上面的操作就是初始化。</p><h4 id="3）插入一行"><a href="#3）插入一行" class="headerlink" title="3）插入一行"></a>3）插入一行</h4><p>建立当前行的前面和后面，插入时，直接选择即可。</p><p>这里有些难理解，我们结合代码讲。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> &amp;hh,<span class="keyword">int</span> &amp;tt,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">l</span>(idx)=hh,<span class="built_in">r</span>(idx)=tt,<span class="built_in">r</span>(hh)=idx,<span class="built_in">l</span>(tt)=idx;</span><br><span class="line">    <span class="built_in">d</span>(idx)=<span class="built_in">d</span>(y),<span class="built_in">u</span>(idx)=y,<span class="built_in">u</span>(<span class="built_in">d</span>(y))=idx,<span class="built_in">d</span>(y)=idx;</span><br><span class="line">    <span class="built_in">col</span>(idx)=y;<span class="built_in">row</span>(idx)=x;</span><br><span class="line">    tt=idx++;s[y]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,x;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> hh=idx,tt=idx;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">            <span class="keyword">if</span> (x) <span class="built_in">add</span>(hh,tt,i,j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//in main()</span></span><br></pre></td></tr></table></figure><p>最开始时，第一个点的右边和左边都是当前本身，所以初始时都是 idx,更新时直接将 tt 赋值为 idx，就串成了一个循环链表。</p><h4 id="4）搜索"><a href="#4）搜索" class="headerlink" title="4）搜索"></a>4）搜索</h4><p>在 dfs 的过程中，从未选择的行中任意选择一行，搜索一行。</p><p>剪枝：</p><ol><li>比较明显，直接选择包含 1 最少的一列选择一行。</li><li>在选择一列后，将该列删除。</li><li>在选择一行后，将该行包含 1 的列全部删除。</li></ol><p>这里，我们发现，需要 2 个函数：删除一列和恢复一列。</p><h4 id="5）删除一列"><a href="#5）删除一列" class="headerlink" title="5）删除一列"></a>5）删除一列</h4><p>对于哨兵，可以直接删除。</p><p>但是，由于要满足”精确覆盖“，我们要将包含该列的行全部删掉。</p><h4 id="6）恢复一列"><a href="#6）恢复一列" class="headerlink" title="6）恢复一列"></a>6）恢复一列</h4><h4 id="7）Code"><a href="#7）Code" class="headerlink" title="7）Code"></a>7）Code</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e4</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DLX</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,u,d;</span><br><span class="line">    <span class="keyword">int</span> row,col;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> l(i) a[i].l</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> r(i) a[i].r</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> u(i) a[i].u</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> d(i) a[i].d</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> row(i) a[i].row</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> col(i) a[i].col</span></span><br><span class="line">&#125;a[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> s[N];</span><br><span class="line"><span class="keyword">int</span> idx;</span><br><span class="line"><span class="keyword">int</span> ans[N],top;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">l</span>(i)=i<span class="number">-1</span>;<span class="built_in">r</span>(i)=i+<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">u</span>(i)=<span class="built_in">d</span>(i)=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">l</span>(<span class="number">0</span>)=m;<span class="built_in">r</span>(m)=<span class="number">0</span>;</span><br><span class="line">    idx=m+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> &amp;hh,<span class="keyword">int</span> &amp;tt,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">l</span>(idx)=hh,<span class="built_in">r</span>(idx)=tt,<span class="built_in">r</span>(hh)=idx,<span class="built_in">l</span>(tt)=idx;</span><br><span class="line">    <span class="built_in">d</span>(idx)=<span class="built_in">d</span>(y),<span class="built_in">u</span>(idx)=y,<span class="built_in">u</span>(<span class="built_in">d</span>(y))=idx,<span class="built_in">d</span>(y)=idx;</span><br><span class="line">    <span class="built_in">col</span>(idx)=y;<span class="built_in">row</span>(idx)=x;</span><br><span class="line">    tt=idx++;s[y]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">r</span>(<span class="built_in">l</span>(p))=<span class="built_in">r</span>(p),<span class="built_in">l</span>(<span class="built_in">r</span>(p))=<span class="built_in">l</span>(p);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="built_in">d</span>(p);i!=p;i=<span class="built_in">d</span>(i))</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="built_in">r</span>(i);j!=i;j=<span class="built_in">r</span>(j))</span><br><span class="line">        &#123;</span><br><span class="line">            s[<span class="built_in">col</span>(j)]--;</span><br><span class="line">            <span class="built_in">u</span>(<span class="built_in">d</span>(j))=<span class="built_in">u</span>(j),<span class="built_in">d</span>(<span class="built_in">u</span>(j))=<span class="built_in">d</span>(j);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resume</span><span class="params">(<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="built_in">u</span>(p);i!=p;i=<span class="built_in">u</span>(i))</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="built_in">l</span>(i);j!=i;j=<span class="built_in">l</span>(j))</span><br><span class="line">        &#123;</span><br><span class="line">            s[<span class="built_in">col</span>(j)]++;</span><br><span class="line">            <span class="built_in">u</span>(<span class="built_in">d</span>(j))=j,<span class="built_in">d</span>(<span class="built_in">u</span>(j))=j;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">r</span>(<span class="built_in">l</span>(p))=p,<span class="built_in">l</span>(<span class="built_in">r</span>(p))=p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">r</span>(<span class="number">0</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">int</span> p=<span class="built_in">r</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="built_in">r</span>(<span class="number">0</span>);i;i=<span class="built_in">r</span>(i))</span><br><span class="line">        <span class="keyword">if</span> (s[i]&lt;=s[p]) p=i;</span><br><span class="line">    <span class="keyword">if</span> (!p) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">remove</span>(p);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="built_in">d</span>(p);i!=p;i=<span class="built_in">d</span>(i))</span><br><span class="line">    &#123;</span><br><span class="line">        ans[++top]=<span class="built_in">row</span>(i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="built_in">r</span>(i);j!=i;j=<span class="built_in">r</span>(j)) <span class="built_in">remove</span>(<span class="built_in">col</span>(j));</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">dfs</span>()) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="built_in">l</span>(i);j!=i;j=<span class="built_in">l</span>(j)) <span class="built_in">resume</span>(<span class="built_in">col</span>(j));</span><br><span class="line">        top--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">resume</span>(p);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,x;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> hh=idx,tt=idx;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">            <span class="keyword">if</span> (x) <span class="built_in">add</span>(hh,tt,i,j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">dfs</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=top;++i) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,ans[i]);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;No Solution!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-例题"><a href="#3-例题" class="headerlink" title="3. 例题"></a>3. 例题</h3><p>做 Dancing Links 的题，做法如下：</p><ol><li>首先将题目的选择设为行。</li><li>然后将题目的限制设为列。</li><li>使用模板。</li></ol><h4 id="T1：数独2"><a href="#T1：数独2" class="headerlink" title="T1：数独2"></a>T1：数独2</h4><p><a href="https://www.acwing.com/problem/content/171/">题目传送门 AcWing</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DLX</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, u, d, row, col;</span><br><span class="line">&#125;a[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Option</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> row, col, k;</span><br><span class="line">&#125;opt[N];</span><br><span class="line"><span class="keyword">int</span> n, m = <span class="number">1024</span>, sz[<span class="number">1025</span>], idx, ans[N], top;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">21</span>][<span class="number">21</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++ i)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i] = &#123;i - <span class="number">1</span>, i + <span class="number">1</span>, i, i, <span class="number">0</span>, i&#125;;</span><br><span class="line">        sz[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    a[<span class="number">0</span>].l = m, a[<span class="number">0</span>].r = <span class="number">1</span>, a[m].r = <span class="number">0</span>, idx = m + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> &amp;hh, <span class="keyword">int</span> &amp;tt, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a[idx] = &#123;hh, tt, y, a[y].d, x, y&#125;;</span><br><span class="line">    a[a[y].d].u = idx, a[y].d = idx;</span><br><span class="line">    a[hh].r = a[tt].l = idx;</span><br><span class="line">    sz[y] ++, tt = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;<span class="keyword">return</span> x * <span class="number">16</span> + y;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a[a[p].r].l = a[p].l, a[a[p].l].r = a[p].r;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = a[p].d; i != p; i = a[i].d)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = a[i].r; j != i; j = a[j].r)</span><br><span class="line">        &#123;</span><br><span class="line">            sz[a[j].col] --;</span><br><span class="line">            a[a[j].d].u = a[j].u, a[a[j].u].d = a[j].d;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resume</span><span class="params">(<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = a[p].u; i != p; i = a[i].u)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = a[i].l; j != i; j = a[j].l)</span><br><span class="line">        &#123;</span><br><span class="line">            sz[a[j].col] ++;</span><br><span class="line">            a[a[j].d].u = a[a[j].u].d = j;</span><br><span class="line">        &#125;</span><br><span class="line">    a[a[p].l].r = a[a[p].r].l = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!a[<span class="number">0</span>].r) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">int</span> p = a[<span class="number">0</span>].r;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = a[p].r; i; i = a[i].r)</span><br><span class="line">        <span class="keyword">if</span> (sz[i] &lt; sz[p]) p = i;</span><br><span class="line">    <span class="built_in">remove</span>(p);</span><br><span class="line">    top ++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = a[p].d; i != p; i = a[i].d)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[top] = a[i].row;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = a[i].r; j != i; j = a[j].r) <span class="built_in">remove</span>(a[j].col);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">dfs</span>()) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = a[i].l; j != i; j = a[j].l) <span class="built_in">resume</span>(a[j].col);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">resume</span>(p);</span><br><span class="line">    top --;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s[<span class="number">1</span>] + <span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (t) cout &lt;&lt; endl;</span><br><span class="line">        n = top = <span class="number">0</span>, <span class="built_in">init</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">16</span>; ++ i) <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s[i] + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">16</span>; ++ i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">16</span>; ++ j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> x, y;</span><br><span class="line">                <span class="keyword">if</span> (s[i][j] == <span class="string">&#x27;-&#x27;</span>) x = <span class="number">0</span>, y = <span class="number">15</span>;</span><br><span class="line">                <span class="keyword">else</span> x = y = s[i][j] - <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = x; k &lt;= y; ++ k)</span><br><span class="line">                &#123;</span><br><span class="line">                    opt[++ n] = &#123;i, j, k&#125;;</span><br><span class="line">                    <span class="keyword">int</span> hh = idx, tt = idx;</span><br><span class="line">                    <span class="built_in">add</span>(hh, tt, n, <span class="number">256</span> * <span class="number">0</span> + <span class="built_in">get</span>(i - <span class="number">1</span>, j - <span class="number">1</span>) + <span class="number">1</span>);</span><br><span class="line">                    <span class="built_in">add</span>(hh, tt, n, <span class="number">256</span> * <span class="number">1</span> + <span class="built_in">get</span>(i - <span class="number">1</span>, k) + <span class="number">1</span>);</span><br><span class="line">                    <span class="built_in">add</span>(hh, tt, n, <span class="number">256</span> * <span class="number">2</span> + <span class="built_in">get</span>(j - <span class="number">1</span>, k) + <span class="number">1</span>);</span><br><span class="line">                    <span class="built_in">add</span>(hh, tt, n, <span class="number">256</span> * <span class="number">3</span> + <span class="built_in">get</span>((i - <span class="number">1</span>) / <span class="number">4</span> * <span class="number">4</span> + (j - <span class="number">1</span>) / <span class="number">4</span>, k) + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="built_in">dfs</span>();</span><br><span class="line">        <span class="comment">// cout &lt;&lt; dfs() &lt;&lt; &#x27; &#x27; &lt;&lt; top &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= top; ++ i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">auto</span> &amp;op = opt[ans[i]];</span><br><span class="line">            s[op.row][op.col] = op.k + <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">16</span>; ++ i) cout &lt;&lt; s[i] + <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">        t = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T2：-NOI2005-智慧珠游戏"><a href="#T2：-NOI2005-智慧珠游戏" class="headerlink" title="T2：[NOI2005]智慧珠游戏"></a>T2：[NOI2005]智慧珠游戏</h4><p><a href="https://www.luogu.com.cn/problem/P4205">题目传送门 Luogu</a></p><p><a href="https://www.acwing.com/problem/content/958/">题目传送门 AcWing</a></p><p>将每一种摆法的旋转、平移的所有方法，都做成一个行，然后将每一个格子、每一种方法都做成列。</p><p>代码比较繁琐，但是思路不太难。</p><h3 id="4-重复覆盖问题"><a href="#4-重复覆盖问题" class="headerlink" title="4. 重复覆盖问题"></a>4. 重复覆盖问题</h3><p><a href="https://www.acwing.com/problem/content/2715/">题目传送门 AcWing</a></p><p>与精确覆盖问题对比。</p><p>重复覆盖问题的规模较小，而精确覆盖问题的规模较大。</p><p>重复覆盖问题的答案较小，而精确覆盖问题的 1 个数较小。</p><p>为什么答案要求要比较小呢？</p><p>因为使用了 IDA* （迭代加深）。</p><p>算法流程如下：</p><ol><li><p>选择一个行数最少的列</p></li><li><p>枚举当前列是 1 的行。</p></li><li><p>枚举当前行，递归。</p></li></ol><p>对比精确覆盖问题，我们发现有不同。</p><p>于是，这个就会慢很多。</p><p>我们又有一个武器：IDA*。</p><p>加上这样一个句： <code>if (k+h()&gt;depth) return false;</code></p><p>这样，我们应该考虑怎样构造 <code>h()</code>。</p><p>请注意，我们要保证 $h()\leq ans$。</p><p>遍历所有未被覆盖的列，选择当前列的所有行，但是计数只记一行。</p><p>这样，我们其实选择了更多，所以答案不可能更大。</p><p>上代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=(<span class="keyword">int</span>)<span class="number">1e4</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DLX</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,u,d,row,col;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> l(i) a[i].l</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> r(i) a[i].r</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> u(i) a[i].u</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> d(i) a[i].d</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> col(i) a[i].col</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> row(i) a[i].row</span></span><br><span class="line">&#125;a[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> idx,n,m,s[<span class="number">105</span>],ans[<span class="number">105</span>];</span><br><span class="line"><span class="keyword">bool</span> st[<span class="number">105</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">l</span>(i)=i<span class="number">-1</span>,<span class="built_in">r</span>(i)=i+<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">col</span>(i)=<span class="built_in">u</span>(i)=<span class="built_in">d</span>(i)=i;</span><br><span class="line">        s[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">l</span>(<span class="number">0</span>)=m,<span class="built_in">r</span>(m)=<span class="number">0</span>;</span><br><span class="line">    idx=m+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> &amp;hh,<span class="keyword">int</span> &amp;tt,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a[idx]=(DLX)&#123;hh,tt,y,<span class="built_in">d</span>(y),x,y&#125;;</span><br><span class="line">    <span class="built_in">u</span>(<span class="built_in">d</span>(y))=idx;<span class="built_in">d</span>(y)=idx;s[y]++;</span><br><span class="line">    <span class="built_in">l</span>(tt)=<span class="built_in">r</span>(hh)=idx;</span><br><span class="line"></span><br><span class="line">    tt=idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="built_in">d</span>(p);i!=p;i=<span class="built_in">d</span>(i))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">l</span>(<span class="built_in">r</span>(i))=<span class="built_in">l</span>(i),<span class="built_in">r</span>(<span class="built_in">l</span>(i))=<span class="built_in">r</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resume</span><span class="params">(<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="built_in">u</span>(p);i!=p;i=<span class="built_in">u</span>(i))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">l</span>(<span class="built_in">r</span>(i))=<span class="built_in">r</span>(<span class="built_in">l</span>(i))=i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">h</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(st,<span class="number">0</span>,<span class="keyword">sizeof</span> st);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="built_in">r</span>(<span class="number">0</span>);i;i=<span class="built_in">r</span>(i))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (st[i]) <span class="keyword">continue</span>;</span><br><span class="line">        st[i]=<span class="literal">true</span>;res++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="built_in">d</span>(i);j!=i;j=<span class="built_in">d</span>(j))</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="built_in">r</span>(j);k!=j;k=<span class="built_in">r</span>(k)) st[<span class="built_in">col</span>(k)]=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> depth)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k+<span class="built_in">h</span>()&gt;depth) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">r</span>(<span class="number">0</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">int</span> p=<span class="built_in">r</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="built_in">r</span>(<span class="number">0</span>);i;i=<span class="built_in">r</span>(i))</span><br><span class="line">        <span class="keyword">if</span> (s[i]&lt;s[p]) p=i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="built_in">d</span>(p);i!=p;i=<span class="built_in">d</span>(i))</span><br><span class="line">    &#123;</span><br><span class="line">        ans[k]=<span class="built_in">row</span>(i);</span><br><span class="line">        <span class="built_in">remove</span>(i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="built_in">r</span>(i);j!=i;j=<span class="built_in">r</span>(j)) <span class="built_in">remove</span>(j);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">dfs</span>(k+<span class="number">1</span>,depth)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="built_in">l</span>(i);j!=i;j=<span class="built_in">l</span>(j)) <span class="built_in">resume</span>(j);</span><br><span class="line">        <span class="built_in">resume</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;<span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x,hh=idx,tt=idx;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">            <span class="keyword">if</span> (x) <span class="built_in">add</span>(hh,tt,i,j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> depth=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">dfs</span>(<span class="number">0</span>,depth)) depth++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,depth);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;depth;++i) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-例题"><a href="#5-例题" class="headerlink" title="5. 例题"></a>5. 例题</h3><h4 id="T1：破坏正方形"><a href="#T1：破坏正方形" class="headerlink" title="T1：破坏正方形"></a>T1：破坏正方形</h4><p><a href="https://www.luogu.com.cn/problem/UVA1603">题目传送门 Luogu(RemoteJudge:UVA)</a></p><p><a href="https://www.acwing.com/problem/content/184/">题目传送门 AcWing</a></p><p> 可以将火柴看做行，将正方形看做列，其实就是一个重复覆盖问题了。</p><p>具体实现时，注意正方形的计算，可能会有些繁琐，需要你认真找规律。</p><p>代码略。</p><h4 id="T2：雷达"><a href="#T2：雷达" class="headerlink" title="T2：雷达"></a>T2：雷达</h4><p><a href="https://www.acwing.com/problem/content/2726/">题目传送门 AcWing</a></p><p>首先，我们发现，答案具有单调性，即小的可以，那么更大的半径一定可以。</p><p>二分到一个答案时，我们将雷达设为行，将城市设为列，如果一行一列为一时，代表该雷达可以覆盖该城市。</p><p>剩下就是一个重复覆盖的模板了。</p><p><strong>注意卡常！</strong></p><p>注意 <code>h()</code> 的时候不要清空，而是每一次使用一个新的编号，这样就可以避免清空。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DLX</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, d, l, r, row, col;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> u(x) a[x].u</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> d(x) a[x].d</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> l(x) a[x].l</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> r(x) a[x].r</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> col(x) a[x].col</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> row(x) a[x].row</span></span><br><span class="line">&#125;a[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Item</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">&#125;p[N];</span><br><span class="line"><span class="keyword">int</span> idx, s[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> n, m, k;</span><br><span class="line"><span class="keyword">int</span> st[<span class="number">1005</span>], stcnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    idx = n + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++ i)</span><br><span class="line">        <span class="built_in">l</span>(i) = i - <span class="number">1</span>, <span class="built_in">r</span>(i) = i + <span class="number">1</span>, s[i] = <span class="number">0</span>, <span class="built_in">u</span>(i) = <span class="built_in">d</span>(i) = <span class="built_in">col</span>(i) = i;</span><br><span class="line">    <span class="built_in">r</span>(n) = <span class="number">0</span>, <span class="built_in">l</span>(<span class="number">0</span>) = n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> &amp;hh, <span class="keyword">int</span> &amp;tt, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a[idx] = &#123;y, <span class="built_in">d</span>(y), hh, tt, x, y&#125;;</span><br><span class="line">    <span class="built_in">r</span>(hh) = <span class="built_in">l</span>(tt) = <span class="built_in">u</span>(<span class="built_in">d</span>(y)) = idx;</span><br><span class="line">    <span class="built_in">d</span>(y) = idx, s[y] ++, tt = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="built_in">d</span>(p); i != p; i = <span class="built_in">d</span>(i))</span><br><span class="line">        <span class="built_in">l</span>(<span class="built_in">r</span>(i)) = <span class="built_in">l</span>(i), <span class="built_in">r</span>(<span class="built_in">l</span>(i)) = <span class="built_in">r</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resume</span><span class="params">(<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="built_in">u</span>(p); i != p; i = <span class="built_in">u</span>(i))</span><br><span class="line">        <span class="built_in">l</span>(<span class="built_in">r</span>(i)) = <span class="built_in">r</span>(<span class="built_in">l</span>(i)) = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">h</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    ++ stcnt;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="built_in">r</span>(<span class="number">0</span>); p; p = <span class="built_in">r</span>(p))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (st[<span class="built_in">col</span>(p)] == stcnt) <span class="keyword">continue</span>;</span><br><span class="line">        st[<span class="built_in">col</span>(p)] = stcnt, res ++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="built_in">d</span>(p); i != p; i = <span class="built_in">d</span>(i))</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="built_in">r</span>(i); j != i; j = <span class="built_in">r</span>(j)) st[<span class="built_in">col</span>(j)] = stcnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> lim)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k + <span class="built_in">h</span>() &gt; lim) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">r</span>(<span class="number">0</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">int</span> p = <span class="built_in">r</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="built_in">r</span>(<span class="number">0</span>); i; i = <span class="built_in">r</span>(i))</span><br><span class="line">        <span class="keyword">if</span> (s[i] &lt; s[p]) p = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="built_in">d</span>(p); i != p; i = <span class="built_in">d</span>(i))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">remove</span>(i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="built_in">r</span>(i); j != i; j = <span class="built_in">r</span>(j)) <span class="built_in">remove</span>(j);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">dfs</span>(k + <span class="number">1</span>, lim)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="built_in">l</span>(i); j != i; j = <span class="built_in">l</span>(j)) <span class="built_in">resume</span>(j);</span><br><span class="line">        <span class="built_in">resume</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dist2</span><span class="params">(<span class="keyword">const</span> Item &amp;a, <span class="keyword">const</span> Item &amp;b)</span></span>&#123;<span class="keyword">return</span> (a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">(<span class="keyword">double</span> mid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(st, <span class="number">0</span>, <span class="keyword">sizeof</span> st), stcnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++ i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> hh = idx, tt = idx;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++ j)</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">1.0</span> * <span class="built_in">dist2</span>(p[i], p[j + m]) &lt;= mid * mid) <span class="built_in">add</span>(hh, tt, i, j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> depth = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (depth &lt;= k &amp;&amp; !<span class="built_in">dfs</span>(<span class="number">0</span>, depth)) depth ++;</span><br><span class="line">    <span class="keyword">return</span> depth &lt;= k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t --)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;p[i + m].x, &amp;p[i + m].y);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++ i) <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;p[i].x, &amp;p[i].y);</span><br><span class="line">        <span class="keyword">double</span> l = <span class="number">0</span>, r = <span class="number">1500</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r - <span class="number">1e-9</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">solve</span>(mid)) r = mid;</span><br><span class="line">            <span class="keyword">else</span> l = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.6lf\n&quot;</span>, l);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;题型有两种：精确覆盖与重复覆盖。&lt;/p&gt;</summary>
    
    
    
    
    <category term="数据结构" scheme="https://mydcwfy.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="DLX" scheme="https://mydcwfy.github.io/tags/DLX/"/>
    
  </entry>
  
  <entry>
    <title>状态压缩 DP</title>
    <link href="https://mydcwfy.github.io/2021/12/13/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9-DP/"/>
    <id>https://mydcwfy.github.io/2021/12/13/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9-DP/</id>
    <published>2021-12-13T11:34:04.000Z</published>
    <updated>2021-12-13T11:38:44.513Z</updated>
    
    <content type="html"><![CDATA[<p>分为两种：基于连通性的 DP（棋盘式）和集合式（表示一个元素是否在集合内）。</p><span id="more"></span><h2 id="状态压缩-DP"><a href="#状态压缩-DP" class="headerlink" title="状态压缩 DP"></a>状态压缩 DP</h2><h3 id="2-例题"><a href="#2-例题" class="headerlink" title="2. 例题"></a>2. 例题</h3><h4 id="T1：蒙德里安的梦想"><a href="#T1：蒙德里安的梦想" class="headerlink" title="T1：蒙德里安的梦想"></a>T1：蒙德里安的梦想</h4><p><a href="https://www.acwing.com/problem/content/293/">题目传送门 AcWing</a></p><h4 id="T2：最短-Hamilton-路径"><a href="#T2：最短-Hamilton-路径" class="headerlink" title="T2：最短 Hamilton 路径"></a>T2：最短 Hamilton 路径</h4><p><a href="https://www.acwing.com/problem/content/description/93/">题目传送门 AcWing</a></p><p>上面两个题都比较简单，这里不再做详细的讲解。</p><h4 id="T3：骑士"><a href="#T3：骑士" class="headerlink" title="T3：骑士"></a>T3：骑士</h4><p><a href="https://loj.ac/p/10170">题目传送门 LOJ</a></p><p>观察到，第 $i$ 行的放置情况和 $i-1$ 相关。</p><p>所以，我们可以考虑将第 $i-1$ 行的情况存储下来，对于每一个 $i-1$ 的情况，都剋容易地求出 $i$ 行的情况，就可以转移了。</p><p>首先考虑，怎样存储当前行的状态。</p><p>观察到 $n$ 很小，于是我们可以将 $n$ 个 01 按位压缩为一个二进制数。</p><p>具体地，如果 $j$ 位为 1，则第 $j$ 个摆放了国王。</p><p>回到本题，还要考虑放了几个国王，于是还要存储，可以表示为 $f[i,j,sta]$ 表示处理到第 $i$ 行，摆放了 $j$ 个国王，且第 $i$ 行状态为 $sta$ 的总种类数。</p><p>再考虑转移，我们首先要保证当前行本身是合法的。</p><p>其次，我们要保证 $i$ 行与 $i-1$ 行是合法的。</p><p>时间复杂度为 $O(2^n\times n\times k)$，实际远远达不到。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">12</span>,K=N*N,S=(<span class="number">1</span>&lt;&lt;N);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> f[N][K][S];</span><br><span class="line"><span class="keyword">bool</span> st[S];</span><br><span class="line"><span class="keyword">int</span> num[S];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> bit=<span class="number">0</span>;bit&lt;<span class="number">12</span>;++bit)</span><br><span class="line">        <span class="keyword">if</span> ((s&gt;&gt;bit&amp;<span class="number">1</span>)&amp;(s&gt;&gt;bit+<span class="number">1</span>&amp;<span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k;<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> s=<span class="number">0</span>;s&lt;(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>;++s)</span><br><span class="line">    &#123;</span><br><span class="line">        st[s]=<span class="built_in">check</span>(s);</span><br><span class="line">        <span class="keyword">if</span> (st[s])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> tmp=s;</span><br><span class="line">            <span class="keyword">while</span> (tmp)</span><br><span class="line">            &#123;</span><br><span class="line">                num[s]++;</span><br><span class="line">                tmp-=(tmp&amp;-tmp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> s=<span class="number">0</span>;s&lt;(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>;++s)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!st[s]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> ls=<span class="number">0</span>;ls&lt;(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>;++ls)</span><br><span class="line">                <span class="keyword">if</span> (st[ls]&amp;&amp;!(s&amp;(ls&lt;&lt;<span class="number">1</span>))&amp;&amp;!(s&amp;ls)&amp;&amp;!((s&lt;&lt;<span class="number">1</span>)&amp;ls))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j=num[s];j&lt;=k;++j) f[i][j][s]+=f[i<span class="number">-1</span>][j-num[s]][ls];</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> s=<span class="number">0</span>;s&lt;(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>;++s) res+=f[n][k][s];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T4：玉米田"><a href="#T4：玉米田" class="headerlink" title="T4：玉米田"></a>T4：玉米田</h4><p><a href="https://www.acwing.com/problem/content/329/">题目传送门 AcWing</a></p><p>是上一题的变式与扩展。其实差不多。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;algorithm&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">14</span>,S=(<span class="number">1</span>&lt;&lt;N);</span><br><span class="line"><span class="keyword">const</span> ll Mod=<span class="number">1e8</span>;</span><br><span class="line">ll f[N][S];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">bool</span> a[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">valid</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">        <span class="keyword">if</span> ((!a[l][i])&amp;(s&gt;&gt;i<span class="number">-1</span>&amp;<span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m<span class="number">-1</span>;++i)</span><br><span class="line">        <span class="keyword">if</span> ((s&gt;&gt;i&amp;<span class="number">1</span>)&amp;(s&gt;&gt;i+<span class="number">1</span>&amp;<span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i][j]);</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> s=<span class="number">0</span>;s&lt;(<span class="number">1</span>&lt;&lt;m);++s)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">valid</span>(i,s)) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> ls=<span class="number">0</span>;ls&lt;(<span class="number">1</span>&lt;&lt;m);++ls)</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">valid</span>(i<span class="number">-1</span>,ls)&amp;&amp;!(s&amp;ls))</span><br><span class="line">                    f[i][s]+=f[i<span class="number">-1</span>][ls];</span><br><span class="line">        &#125;</span><br><span class="line">    ll res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> s=<span class="number">0</span>;s&lt;(<span class="number">1</span>&lt;&lt;m);++s) res=(res+f[n][s])%Mod;</span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T5：-NOI2001-炮兵阵地"><a href="#T5：-NOI2001-炮兵阵地" class="headerlink" title="T5：[NOI2001]炮兵阵地"></a>T5：[NOI2001]炮兵阵地</h4><p><a href="https://www.luogu.com.cn/problem/P2704">题目传送门 Luogu</a></p><p><a href="https://www.acwing.com/problem/content/294/">题目传送门 AcWing</a></p><p>本题和上面的题比较类似，但是还是有一些区别：</p><ol><li>射程变为了 2 格。</li><li>是求最大放置数。</li></ol><p>一个很明显的想法就是维护上面 2 行的信息。</p><p>使用 $f[i,j,k]$ 表示处理到第 $i$ 行，且第 $i$ 行状态是 $j$，第 $i-1$ 行的状态是 $k$。</p><p>状态之间转移时，我们可以根据第 $i-2$ 行来计算。</p><p>又有了第 $i-1$ 行的状态，我们就可以计算了。</p><p>但是，时间复杂度为 $O(2^{3m}\times n)$，已经超出了时间限制。</p><p> 于是，我们可以先将合法的情况先存下来，再进行计算。</p><p>另外，空间 $O(2^{2m}\times n)$，可能超过空间限制，我们使用滚动数组。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">101</span>,S=<span class="number">1</span>&lt;&lt;<span class="number">10</span>;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">2</span>][S][S];</span><br><span class="line"><span class="keyword">int</span> v[N],n,m;</span><br><span class="line"><span class="keyword">int</span> cnt[S];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">valid</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)</span><br><span class="line">        <span class="keyword">if</span> ((s&gt;&gt;i&amp;<span class="number">1</span>)+(s&gt;&gt;i+<span class="number">1</span>&amp;<span class="number">1</span>)+(s&gt;&gt;i+<span class="number">2</span>&amp;<span class="number">1</span>)&gt;=<span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">num</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (s)</span><br><span class="line">    &#123;</span><br><span class="line">        res++;</span><br><span class="line">        s-=(s&amp;-s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> op[<span class="number">14</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,op);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;++j) v[i]|=(op[j]!=<span class="string">&#x27;P&#x27;</span>)&lt;&lt;j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> s=<span class="number">0</span>;s&lt;(<span class="number">1</span>&lt;&lt;m);++s)</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">valid</span>(s))</span><br><span class="line">        &#123;</span><br><span class="line">            st.<span class="built_in">push_back</span>(s);</span><br><span class="line">            cnt[st.<span class="built_in">size</span>()<span class="number">-1</span>]=<span class="built_in">num</span>(s);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i0=<span class="number">0</span>;i0&lt;st.<span class="built_in">size</span>();++i0)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i1=<span class="number">0</span>;i1&lt;st.<span class="built_in">size</span>();++i1)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> &amp;s0=st[i0],&amp;s1=st[i1];</span><br><span class="line">                <span class="keyword">if</span> ((s0&amp;v[i])|(s1&amp;v[i<span class="number">-1</span>])|(s0&amp;s1)) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i2=<span class="number">0</span>;i2&lt;st.<span class="built_in">size</span>();++i2)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">int</span> &amp;s2=st[i2];</span><br><span class="line">                    <span class="keyword">if</span> ((s2&amp;v[i<span class="number">-2</span>])|(s0&amp;s2)|(s1&amp;s2)) <span class="keyword">continue</span>;</span><br><span class="line">                    f[i&amp;<span class="number">1</span>][i0][i1]=<span class="built_in">max</span>(f[i<span class="number">-1</span>&amp;<span class="number">1</span>][i1][i2]+cnt[i0],f[i&amp;<span class="number">1</span>][i0][i1]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;st.<span class="built_in">size</span>();++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;st.<span class="built_in">size</span>();++j)</span><br><span class="line">            res=<span class="built_in">max</span>(res,f[n&amp;<span class="number">1</span>][i][j]);</span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T6：-NOIP2016-愤怒的小鸟"><a href="#T6：-NOIP2016-愤怒的小鸟" class="headerlink" title="T6：[NOIP2016]愤怒的小鸟"></a>T6：[NOIP2016]愤怒的小鸟</h4><p><a href="https://www.luogu.com.cn/problem/P2831">题目传送门 Luogu</a></p><p><a href="https://www.acwing.com/problem/content/526/">题目传送门 AcWing</a></p><p>前面讲的都是棋盘型的状态压缩 DP，现在我们开始讲集合型。</p><p>首先，函数为 $y=ax^2+bx(a&lt;0,b&gt;0)$ 只要确定了两个点，就可以求出抛物线。</p><p>观察到 $n\leq18$，所以我们可以首先将 $\dfrac{n(n-1)}{2}$ 个抛物线以及经过的点预处理出来。</p><p>然后，本题就转化为了重复覆盖问题。</p><p>可以使用 Dancing Links 求解，也可以使用状态压缩 DP 求解。</p><p><a href="http://localhost:4000/2021/12/13/%E8%88%9E%E8%B9%88%E9%93%BE%EF%BC%88DLX%EF%BC%89/#more">我的 Dancing Links Blog</a></p><p>这里讲一下状态压缩 DP。</p><p>首先，我们考虑 DFS.</p><p>在此基础上，我们将其改为一个记忆化搜索，用一个二进制数来表示各个元素是否在集合里。</p><p>于是就可以 DP（记忆化搜索）了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">19</span>, S = (<span class="number">1</span> &lt;&lt; <span class="number">18</span>) + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> f[S];</span><br><span class="line"><span class="keyword">int</span> n, tmp, tot;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line">&#125;p[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Line</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> a, b;</span><br><span class="line">    <span class="keyword">int</span> sta;</span><br><span class="line">&#125;l[N * N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">F</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">const</span> Line &amp;bd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * x * bd.a + x * bd.b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">OnLine</span><span class="params">(<span class="keyword">const</span> Point &amp;pg, <span class="keyword">const</span> Line &amp;bd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fabs</span>(<span class="built_in">F</span>(pg.x, bd) - pg.y) &lt; eps;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> Line <span class="title">calc</span><span class="params">(<span class="keyword">const</span> Point &amp;p1, <span class="keyword">const</span> Point &amp;p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> X1 = p1.x, X2 = p2.x, Y1 = p1.y, Y2 = p2.y;</span><br><span class="line">    Line res;</span><br><span class="line">    res.a = (Y2 * X1 - Y1 * X2) / (X1 * X2 * (X2 - X1));</span><br><span class="line">    res.b = (Y1 - X1 * X1 * res.a) / X1;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= (<span class="number">1</span> &lt;&lt; n); ++ i) f[i] = INF;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t --)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; tmp;</span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf&quot;</span>, &amp;p[i].x, &amp;p[i].y);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) l[++ tot].sta = (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++ i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; ++ j)</span><br><span class="line">            &#123;</span><br><span class="line">                l[++ tot] = <span class="built_in">calc</span>(p[i], p[j]);</span><br><span class="line">                Line &amp;now = l[tot];</span><br><span class="line">                <span class="keyword">if</span> (now.a &gt; -eps)</span><br><span class="line">                &#123;</span><br><span class="line">                    tot --;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++ k)</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">OnLine</span>(p[k], now)) now.sta |= <span class="number">1</span> &lt;&lt; k;</span><br><span class="line">            &#125;</span><br><span class="line">        f[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; ++ i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; (<span class="number">1</span> &lt;&lt; n); ++ j)</span><br><span class="line">                f[j | l[i].sta] = <span class="built_in">min</span>(f[j | l[i].sta], f[j] + <span class="number">1</span>);</span><br><span class="line">        cout &lt;&lt; f[(<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;分为两种：基于连通性的 DP（棋盘式）和集合式（表示一个元素是否在集合内）。&lt;/p&gt;</summary>
    
    
    
    
    <category term="DP 及其优化" scheme="https://mydcwfy.github.io/tags/DP-%E5%8F%8A%E5%85%B6%E4%BC%98%E5%8C%96/"/>
    
    <category term="状态压缩" scheme="https://mydcwfy.github.io/tags/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9/"/>
    
  </entry>
  
  <entry>
    <title>区间 DP</title>
    <link href="https://mydcwfy.github.io/2021/12/13/%E5%8C%BA%E9%97%B4-DP/"/>
    <id>https://mydcwfy.github.io/2021/12/13/%E5%8C%BA%E9%97%B4-DP/</id>
    <published>2021-12-13T11:31:33.000Z</published>
    <updated>2021-12-13T11:33:16.261Z</updated>
    
    <content type="html"><![CDATA[<p>比价灵活的一种 DP，复杂度比较高。</p><span id="more"></span><h2 id="区间-DP"><a href="#区间-DP" class="headerlink" title="区间 DP"></a>区间 DP</h2><h3 id="1-分类"><a href="#1-分类" class="headerlink" title="1. 分类"></a>1. 分类</h3><ol><li>环形 DP 转线性 DP</li><li>记录方案数</li><li>区间 DP + 高精度</li><li>二维区间 DP</li></ol><h3 id="2-例题"><a href="#2-例题" class="headerlink" title="2. 例题"></a>2. 例题</h3><h4 id="T1：-NOI1995-石子合并"><a href="#T1：-NOI1995-石子合并" class="headerlink" title="T1：[NOI1995] 石子合并"></a>T1：[NOI1995] 石子合并</h4><p><a href="https://www.luogu.com.cn/problem/P1880">题目传送门 Luogu</a></p><p><a href="https://www.acwing.com/problem/content/284/">题目传送门 AcWing</a></p><p>是一个模板题，大致思路是 $f[i][j]= \max(f[i][k]+f[k+1][j])+a[l][r](i\leq k&lt;j)$。</p><p>时间复杂度 $O(n^3)$。</p><p>不详细讲了。</p><h4 id="T2：环形石子合并"><a href="#T2：环形石子合并" class="headerlink" title="T2：环形石子合并"></a>T2：环形石子合并</h4><p><a href="https://acwing.com/problem/content/1070/">题目传送门 AcWing</a></p><p>和上一题其实没有大区别，只是可以首尾合并。</p><p>现在怎么办呢？</p><p>首先，我们可以发现，合并完后，一定会有相邻的两个点是没有合并的。</p><p>于是，我们可以枚举相邻的两个点，从中间断开，就可以转换成链了。</p><p>但是，这个的复杂度为 $O(n\times n^3=n^4)$，会超时。</p><p>怎么优化呢？</p><p>我们将整个的环断开，复制一倍在末尾。</p><p>按链来计算，我们再枚举起点，$f[i][i+n-1]$ 即为答案。</p><h4 id="T3：-NOIP2006-能量项链"><a href="#T3：-NOIP2006-能量项链" class="headerlink" title="T3：[NOIP2006] 能量项链"></a>T3：[NOIP2006] 能量项链</h4><p><a href="https://www.luogu.com.cn/problem/P1063">题目传送门 Luogu</a></p><p><a href="https://www.acwing.com/problem/content/322/">题目传送门 AcWing</a></p><p>可能很多同学都会想到贪心，但是是有问题的。</p><p>其实还是一个区间 DP，和上一题没有大区别。</p><p>考虑边界问题，有一些不同。</p><p>$f[i][j]=\max(f[i][k]+f[k][j]+a[i]*a[k]*a[j])i&lt;k&lt;j$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">205</span>;</span><br><span class="line"><span class="keyword">int</span> a[N],f[N][N],n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,a+i);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) a[i+n]=a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> len=<span class="number">1</span>;len&lt;=<span class="number">2</span>*n;++len)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*n-len+<span class="number">1</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> j=i+len<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">if</span> (len==<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                f[i][j]=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k=i+<span class="number">1</span>;k&lt;j;++k)</span><br><span class="line">                f[i][j]=<span class="built_in">max</span>(f[i][j],f[i][k]+f[k][j]+a[i]*a[k]*a[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) res=<span class="built_in">max</span>(res,f[i][i+n]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T4：凸多边形的划分"><a href="#T4：凸多边形的划分" class="headerlink" title="T4：凸多边形的划分"></a>T4：凸多边形的划分</h4><p><a href="https://loj.ac/p/10149">题目传送门 LOJ</a></p><p>看似无从下手。</p><p>现在，我们先考虑对于一条边，我们必须找到一个点来使这条边构成一个三角形。</p><p>枚举这个点，我们发现可以将整个图转化为三个部分，于是就划分为了三个子问题。</p><p>于是，我们就可以区间 DP 了！</p><p>具体来说，我们选取 $[L,R]$ 这条边，然后枚举对应的点，然后划分为 $[L,i],[i,R],(L,i,R)$ 三部分。</p><p>最后要注意的是，答案很大，需要使用该精度。</p><h4 id="T5：-NOIP2003-加分二叉树"><a href="#T5：-NOIP2003-加分二叉树" class="headerlink" title="T5：[NOIP2003] 加分二叉树"></a>T5：[NOIP2003] 加分二叉树</h4><p><a href="https://www.acwing.com/problem/content/481/">题目传送门 AcWing</a></p><p><a href="https://www.luogu.com.cn/problem/P1040">题目传送门 Luogu</a></p><p>题目本身不难，但是我们要学习区间 DP 的思想。</p><p>我们发现，在中序遍历中，左子树一定会根节点的左边，右子树一定在根节点的右边。</p><p>于是，我们可以枚举当前的根节点，然后就可以划分为几个了。</p><p>$f[i,j]=\max(f[i][k-1]\times f[k+1][j]+a[k])(i&lt;k&lt;j)$。</p><p>同时，我们要记录答案的来源。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">35</span>;</span><br><span class="line">ll f[N][N];</span><br><span class="line"><span class="keyword">int</span> n,g[N][N],a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l&gt;r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,g[l][r]);</span><br><span class="line">    <span class="keyword">if</span> (l==r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (l!=g[l][r]) <span class="built_in">print</span>(l,g[l][r]<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span> (r!=g[l][r]) <span class="built_in">print</span>(g[l][r]+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> len=<span class="number">1</span>;len&lt;=n;++len)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l=<span class="number">1</span>;l&lt;=n-len+<span class="number">1</span>;++l)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> r=l+len<span class="number">-1</span>;</span><br><span class="line">            ll &amp;val=f[l][r];</span><br><span class="line">            <span class="keyword">if</span> (l==r)</span><br><span class="line">            &#123;</span><br><span class="line">                val=a[l];</span><br><span class="line">                g[l][r]=l;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (f[l+<span class="number">1</span>][r]+a[l]&gt;=f[l][r<span class="number">-1</span>]+a[r])</span><br><span class="line">            &#123;</span><br><span class="line">                val=f[l+<span class="number">1</span>][r]+a[l];</span><br><span class="line">                g[l][r]=l;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                val=f[l][r<span class="number">-1</span>]+a[r];</span><br><span class="line">                g[l][r]=r;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k=l+<span class="number">1</span>;k&lt;r;++k)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (val&lt;f[l][k<span class="number">-1</span>]*f[k+<span class="number">1</span>][r]+a[k])</span><br><span class="line">                &#123;</span><br><span class="line">                    val=f[l][k<span class="number">-1</span>]*f[k+<span class="number">1</span>][r]+a[k];</span><br><span class="line">                    g[l][r]=k;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,f[<span class="number">1</span>][n]);</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T6：-NOI1999-棋盘分割"><a href="#T6：-NOI1999-棋盘分割" class="headerlink" title="T6：[NOI1999] 棋盘分割"></a>T6：[NOI1999] 棋盘分割</h4><p><a href="https://www.luogu.com.cn/problem/P5752">题目传送门 Luogu</a></p><p><a href="https://www.acwing.com/problem/content/323/">题目传送门 AcWing</a></p><p>首先一阵推导：<br>$$<br>ans^2=\dfrac{\sum_{i=1}^{n}(x_i -\overline x)}{n}\ =\dfrac1n(\sum_{i=1}^n(x_i^2-2x_i\overline x+\overline x^2))<br>$$</p><p>$$<br>=\dfrac1n(\sum_{i=1}^nx_i^2-2\overline x\sum_{i=1}^nx_i+n \overline x^2)<br>$$</p><p>$$<br>=\dfrac {\sum_{i=1}^nx_i^2}n-\overline x^2<br>$$</p><p>于是，我们就是要使  $\sum_{i=1}^nx_i^2$ 最小。</p><p>首先，分为横切和纵切。</p><p>然后，我们还要看是哪一边继续切割，就递归统计答案。</p><p>对于另一边，我们可以使用二维前缀和快速计算。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) (x*x)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">20</span>,M=<span class="number">9</span>,INF=<span class="number">0x3f3f3f3f</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n=<span class="number">8</span>,k;</span><br><span class="line"><span class="keyword">int</span> s[M][M];</span><br><span class="line"><span class="keyword">double</span> f[M][M][M][M][N],X;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">get_matrix</span><span class="params">(<span class="keyword">int</span> xa,<span class="keyword">int</span> ya,<span class="keyword">int</span> xb,<span class="keyword">int</span> yb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> t=(<span class="keyword">double</span>)s[xb][yb]-s[xa<span class="number">-1</span>][yb]-s[xb][ya<span class="number">-1</span>]+s[xa<span class="number">-1</span>][ya<span class="number">-1</span>]-X;</span><br><span class="line">    <span class="keyword">return</span> t*t/k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dp</span><span class="params">(<span class="keyword">int</span> xa,<span class="keyword">int</span> ya,<span class="keyword">int</span> xb,<span class="keyword">int</span> yb,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> &amp;v=f[xa][ya][xb][yb][k];</span><br><span class="line">    <span class="keyword">if</span> (v&gt;=<span class="number">0</span>) <span class="keyword">return</span> v;</span><br><span class="line">    <span class="keyword">if</span> (k==<span class="number">1</span>) <span class="keyword">return</span> v=(<span class="built_in">get_matrix</span>(xa,ya,xb,yb));</span><br><span class="line">    v=<span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=xa;i&lt;xb;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        v=<span class="built_in">min</span>(v,(<span class="built_in">get_matrix</span>(xa,ya,i,yb))+<span class="built_in">dp</span>(i+<span class="number">1</span>,ya,xb,yb,k<span class="number">-1</span>));</span><br><span class="line">        v=<span class="built_in">min</span>(v,(<span class="built_in">get_matrix</span>(i+<span class="number">1</span>,ya,xb,yb))+<span class="built_in">dp</span>(xa,ya,i,yb,k<span class="number">-1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=ya;i&lt;yb;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        v=<span class="built_in">min</span>(v,(<span class="built_in">get_matrix</span>(xa,ya,xb,i))+<span class="built_in">dp</span>(xa,i+<span class="number">1</span>,xb,yb,k<span class="number">-1</span>));</span><br><span class="line">        v=<span class="built_in">min</span>(v,(<span class="built_in">get_matrix</span>(xa,i+<span class="number">1</span>,xb,yb))+<span class="built_in">dp</span>(xa,ya,xb,i,k<span class="number">-1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// printf(&quot;%d %d %d %d %d:%d\n&quot;,xa,ya,xb,yb,k,v);</span></span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;s[i][j]);</span><br><span class="line">            s[i][j]-=s[i<span class="number">-1</span>][j<span class="number">-1</span>]-s[i][j<span class="number">-1</span>]-s[i<span class="number">-1</span>][j];</span><br><span class="line">        &#125;</span><br><span class="line">    X=(<span class="keyword">double</span>)s[n][n]/k;</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">-1</span>,<span class="keyword">sizeof</span> f);</span><br><span class="line">    <span class="comment">// printf(&quot;%.3lf\n&quot;,(double)dp(1,1,n,n,k));</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.3lf\n&quot;</span>,<span class="built_in">sqrt</span>(<span class="built_in">dp</span>(<span class="number">1</span>,<span class="number">1</span>,n,n,k)));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;比价灵活的一种 DP，复杂度比较高。&lt;/p&gt;</summary>
    
    
    
    
    <category term="DP 及其优化" scheme="https://mydcwfy.github.io/tags/DP-%E5%8F%8A%E5%85%B6%E4%BC%98%E5%8C%96/"/>
    
    <category term="区间 DP" scheme="https://mydcwfy.github.io/tags/%E5%8C%BA%E9%97%B4-DP/"/>
    
  </entry>
  
  <entry>
    <title>树形 DP</title>
    <link href="https://mydcwfy.github.io/2021/12/13/%E6%A0%91%E5%BD%A2-DP/"/>
    <id>https://mydcwfy.github.io/2021/12/13/%E6%A0%91%E5%BD%A2-DP/</id>
    <published>2021-12-13T11:19:50.000Z</published>
    <updated>2021-12-13T11:30:36.499Z</updated>
    
    <content type="html"><![CDATA[<p>题型多而杂，我们通过学习例题的方式看一下。</p><span id="more"></span><h4 id="T1：树的直径"><a href="#T1：树的直径" class="headerlink" title="T1：树的直径"></a>T1：树的直径</h4><p>考虑树形 DP。</p><p>对于每一个子树，我们都可以求出在该子树的最长路径。</p><p>对于根节点，他的所有儿子都会有一个向下的最大路径。</p><p>然后，我们维护这些路径的最大值和次大值，就可以求出经过该点且在该点里的最大路径。</p><h4 id="T2：树的中心"><a href="#T2：树的中心" class="headerlink" title="T2：树的中心"></a>T2：树的中心</h4><p>直接考虑怎样求从一个点出发走到的最远距离。</p><p>对于一个点，他向下走的最大距离是很好求的，直接模仿上一题。</p><p>接下来，我们考虑向上走。</p><p>首先，走到父亲节点时，他有两种选择：继续向上走或者向下走。</p><p>向上走的部分就可以递归了，但是向下走有问题：如果向下的最大距离是经过当前点怎么办？</p><p>我们再维护一个次大值，向下的最大路径如果经过当前点的话，就给次大值。</p><h4 id="T3：数字变换"><a href="#T3：数字变换" class="headerlink" title="T3：数字变换"></a>T3：数字变换</h4><p><a href="https://loj.ac/p/10155">题目传送门 LOJ</a></p><p>将问题抽象为一颗树的形式：假设较小的数是较大的数的父亲。</p><p>那么，每一个数，一定只有一个父亲，且一定不会形成一个环。</p><p>所以，按小到大的顺序建好树后，就可以直接求树的直径了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e4</span>+<span class="number">10</span>,M=<span class="number">1e5</span>+<span class="number">10</span>,INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> h[N],e[M],ne[M],idx;</span><br><span class="line"><span class="keyword">int</span> sum[N],d[N],ans,n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx]=b,ne[idx]=h[a],h[a]=idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (d[x]&gt;=<span class="number">0</span>) <span class="keyword">return</span> d[x];</span><br><span class="line">    <span class="keyword">int</span> &amp;d1=d[x],d2=-INF;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=h[x];~i;i=ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t=<span class="built_in">dfs</span>(e[i])+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (t&gt;=d1) d2=d1,d1=t;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (t&gt;d2) d2=t;</span><br><span class="line">    &#125;</span><br><span class="line">    ans=<span class="built_in">max</span>(ans,d1+d2);</span><br><span class="line">    <span class="comment">// printf(&quot;%d %d %d\n&quot;,x,d1,d2);</span></span><br><span class="line">    <span class="keyword">if</span> (d1&lt;<span class="number">0</span>) d1=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> d1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="built_in">memset</span>(d,<span class="number">0xcf</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">2</span>;j&lt;=n/i;++j) sum[i*j]+=i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">if</span> (sum[i]&lt;i) <span class="built_in">add</span>(sum[i],i);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">if</span> (d[i]&lt;<span class="number">0</span>) <span class="built_in">dfs</span>(i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T4：二叉苹果树"><a href="#T4：二叉苹果树" class="headerlink" title="T4：二叉苹果树"></a>T4：二叉苹果树</h4><p><a href="https://loj.ac/p/10153">题目传送门 LOJ</a></p><p>这个是一个比较简单的树形（有依赖的）背包问题。</p><p>考虑计算一个节点。</p><p>对于他的所有儿子来说，都相当于是一个分组的物品。</p><p>直接分组背包即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">150</span>,M=<span class="number">300</span>;</span><br><span class="line"><span class="keyword">int</span> h[N],e[M],ne[M],w[M],idx;</span><br><span class="line"><span class="keyword">int</span> n,k,f[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx]=b,ne[idx]=h[a],w[idx]=c,h[a]=idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=h[x];~i;i=ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (e[i]==fa) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(e[i],x);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=k;j;--j)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> l=<span class="number">0</span>;l+<span class="number">1</span>&lt;=j;++l)</span><br><span class="line">                f[x][j]=<span class="built_in">max</span>(f[x][j],f[x][j-l<span class="number">-1</span>]+f[e[i]][l]+w[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,x,y,c;i&lt;n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;x,&amp;y,&amp;c);</span><br><span class="line">        <span class="built_in">add</span>(x,y,c);<span class="built_in">add</span>(y,x,c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">    cout&lt;&lt;f[<span class="number">1</span>][k]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T5：战略游戏"><a href="#T5：战略游戏" class="headerlink" title="T5：战略游戏"></a>T5：战略游戏</h4><p><a href="https://loj.ac/p/10156">题目传送门 LOJ</a></p><p>记录 $f[i,0]$ 为 $i$ 节点不放士兵的最小代价，$f[i,1]$ 为 $i$ 节点放士兵的最小代价。</p><p>那么，就可以得到：<br>$$<br>f[i,1]=\sum_{(i,j)\in E}{\min (f[j,0],f[j,1])}<br>$$</p><p>$$<br>f[i,0]=\sum_{(i,j)\in E}{f[j,1]}<br>$$</p><p>就可以计算了。</p><p>（话说我尝试了一下新型的码风）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1505</span>, M = <span class="number">2</span> * N;</span><br><span class="line"><span class="keyword">int</span> h[N], e[M], ne[M], idx;</span><br><span class="line"><span class="keyword">int</span> n, f[N][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, ne[idx] = h[a], h[a] = idx ++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    f[x][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; ~i; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">dfs</span>(e[i]);</span><br><span class="line">        f[x][<span class="number">0</span>] += f[e[i]][<span class="number">1</span>];</span><br><span class="line">        f[x][<span class="number">1</span>] += <span class="built_in">min</span>(f[e[i]][<span class="number">0</span>], f[e[i]][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++ i )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> b, id, tot;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;id, &amp;tot);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (tot -- )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b);</span><br><span class="line">            <span class="built_in">add</span>(id, b);</span><br><span class="line">            st[b] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> rt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (st[rt]) rt ++ ;</span><br><span class="line">    <span class="built_in">dfs</span>(rt);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">min</span>(f[rt][<span class="number">1</span>], f[rt][<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T6：皇宫看守"><a href="#T6：皇宫看守" class="headerlink" title="T6：皇宫看守"></a>T6：皇宫看守</h4><p><a href="https://loj.ac/p/10157">题目传送门 LOJ</a></p><p>这个题大概要使用到状态自动机模型<del>（但是我没写）</del></p><p>其实也不难，就是不同的状态之间的转化。</p><p>设 $0$ 状态为儿子节点看守本节点， $1$ 状态为本节点看守，$2$ 状态为父亲节点看守。</p><p>每一个节点的三种状态，都可以通过儿子节点算出来。</p><p>具体请读者自行实现，或者看代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1505</span>, M = <span class="number">2</span> * N;</span><br><span class="line"><span class="keyword">int</span> h[N], e[M], ne[M], idx;</span><br><span class="line"><span class="keyword">int</span> f[N][<span class="number">3</span>], v[N], n;</span><br><span class="line"><span class="keyword">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, ne[idx] = h[a], h[a] = idx ++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    f[x][<span class="number">1</span>] = v[x];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; ~i; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">dfs</span>(e[i]);</span><br><span class="line">        f[x][<span class="number">1</span>] += <span class="built_in">min</span>(<span class="built_in">min</span>(f[e[i]][<span class="number">1</span>], f[e[i]][<span class="number">2</span>]), f[e[i]][<span class="number">0</span>]);</span><br><span class="line">        f[x][<span class="number">2</span>] += <span class="built_in">min</span>(f[e[i]][<span class="number">1</span>], f[e[i]][<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; ~i; i = ne[i])</span><br><span class="line">        tot += <span class="built_in">min</span>(f[e[i]][<span class="number">1</span>], f[e[i]][<span class="number">0</span>]);</span><br><span class="line">    f[x][<span class="number">0</span>] = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; ~i; i = ne[i])</span><br><span class="line">        f[x][<span class="number">0</span>] = <span class="built_in">min</span>(f[x][<span class="number">0</span>], tot - <span class="built_in">min</span>(f[e[i]][<span class="number">1</span>], f[e[i]][<span class="number">0</span>]) + f[e[i]][<span class="number">1</span>]);</span><br><span class="line">    <span class="comment">// printf(&quot;%d %d %d %d\n&quot;, x, f[x][0], f[x][1], f[x][2]);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n; ++ i )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> id, b, tot;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;id);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;v[id], &amp;tot);</span><br><span class="line">        <span class="keyword">while</span> (tot -- )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b);</span><br><span class="line">            <span class="built_in">add</span>(id, b);</span><br><span class="line">            st[b] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> rt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (st[rt]) rt ++ ;</span><br><span class="line">    <span class="built_in">dfs</span>(rt);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">min</span>(f[rt][<span class="number">0</span>],f[rt][<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;题型多而杂，我们通过学习例题的方式看一下。&lt;/p&gt;</summary>
    
    
    
    
    <category term="DP 及其优化" scheme="https://mydcwfy.github.io/tags/DP-%E5%8F%8A%E5%85%B6%E4%BC%98%E5%8C%96/"/>
    
    <category term="树形 DP" scheme="https://mydcwfy.github.io/tags/%E6%A0%91%E5%BD%A2-DP/"/>
    
  </entry>
  
  <entry>
    <title>数位 DP</title>
    <link href="https://mydcwfy.github.io/2021/12/13/%E6%95%B0%E4%BD%8D-DP/"/>
    <id>https://mydcwfy.github.io/2021/12/13/%E6%95%B0%E4%BD%8D-DP/</id>
    <published>2021-12-13T11:16:13.000Z</published>
    <updated>2021-12-13T11:17:01.895Z</updated>
    
    <content type="html"><![CDATA[<p>比较套路的一种 DP。</p><span id="more"></span><h2 id="数位-DP"><a href="#数位-DP" class="headerlink" title="数位 DP"></a>数位 DP</h2><h3 id="1-通用思路"><a href="#1-通用思路" class="headerlink" title="1. 通用思路"></a>1. 通用思路</h3><h4 id="1）通用问法"><a href="#1）通用问法" class="headerlink" title="1）通用问法"></a>1）通用问法</h4><ol><li>首先，题目会让你求一个区间中满足一个条件的数。</li><li>该条件可以被拆分为逐数位考虑的方法。</li></ol><h4 id="2）通用解法"><a href="#2）通用解法" class="headerlink" title="2）通用解法"></a>2）通用解法</h4><ol><li>$[L,R]\Rightarrow[1,R]-[1,L-1]$</li><li>考虑填入第 $i$ 位时，可以分为 $[0,a_{i}-1]$ 和 $a_i$ 两种情况，其中 $a_i$ 表示限制数目第 $i$ 位的数字。</li></ol><h3 id="2-例题"><a href="#2-例题" class="headerlink" title="2. 例题"></a>2. 例题</h3><h4 id="T1：度的数量"><a href="#T1：度的数量" class="headerlink" title="T1：度的数量"></a>T1：度的数量</h4><p><a href="https://www.acwing.com/problem/content/1083/">题目传送门 AcWing</a></p><p>按上面的做法来分析，如果选 $0$，那么答案为 $\binom{n-1}k$，如果选 $1$ 且 $a_i\not=1$，那么答案为 $\binom{n-1}{k-1}$。</p><p>如果 $a_i=1$，那么就填上 1，递归即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">35</span>;</span><br><span class="line"><span class="keyword">int</span> f[N][N];</span><br><span class="line"><span class="keyword">int</span> K, B, l, r;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++ i )</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; ++ j )</span><br><span class="line">            <span class="keyword">if</span> (!j) f[i][j] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> f[i][j] = f[i - <span class="number">1</span>][j] + f[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dp</span><span class="params">(<span class="keyword">int</span> maxn)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!maxn) <span class="keyword">return</span> !K;</span><br><span class="line"></span><br><span class="line">    vector &lt;<span class="keyword">int</span>&gt; nums;</span><br><span class="line">    <span class="keyword">int</span> tmp = maxn;</span><br><span class="line">    <span class="keyword">while</span> (tmp) nums.<span class="built_in">push_back</span>(tmp % B), tmp /= B;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>, last = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = nums.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; -- i )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> &amp;x = nums[i];</span><br><span class="line">        <span class="keyword">if</span> (x)</span><br><span class="line">        &#123;</span><br><span class="line">            res += f[i][K - last];</span><br><span class="line">            <span class="keyword">if</span> (x &gt; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (K &gt;= last + <span class="number">1</span>) res += f[i][K - last - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                last ++ ;</span><br><span class="line">                <span class="keyword">if</span> (last &gt; K) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!i &amp;&amp; last == K) res ++ ; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; l &gt;&gt; r &gt;&gt; K &gt;&gt; B;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="built_in">dp</span>(r) - <span class="built_in">dp</span>(l - <span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T2：-SCOI2009-Windy-数"><a href="#T2：-SCOI2009-Windy-数" class="headerlink" title="T2：[SCOI2009] Windy 数"></a>T2：[SCOI2009] Windy 数</h4><p><a href="https://www.luogu.com.cn/problem/P2657">题目传送门 Luogu</a></p><p><a href="https://www.acwing.com/problem/content/1085/">题目传送门 AcWing</a></p><p><a href="https://loj.ac/p/10165">题目传送门 LOJ</a></p><p>本题同样是数位 DP 的经典题目。</p><p>仍然从高到低枚举每一位，分为 $[0,a_i-1]$ 和 $a_i$ 两种情况。</p><p>首先，我们发现，当前的位既不能超过 $a_i$，又必须与 $a_{i+1}$ 差值至少为 2。</p><p>枚举当前位即可，后面的位就与当前数无关，就可以预处理了。</p><p>具体来说，我们预处理 $f[i,j]$ 为位数为 $i$，且最高位为 $j$ 的总数。</p><p>这个显然不难，一个简单的递推即可。</p><p>但是，本题还有一个问题：不含前导零怎么处理？</p><p>首先，我们将和当前限制的数的相同位数的算出来（即第一位至少为 1，后面可以为 0），然后再将低于当前限制位数算出来，很明显我们已经预处理了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">int</span> f[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">9</span>; ++ j ) f[<span class="number">1</span>][j] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; N; ++ i )</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">9</span>; ++ j )</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">9</span>; ++ k )</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">abs</span>(k - j) &gt;= <span class="number">2</span>) f[i][j] += f[i - <span class="number">1</span>][k];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dp</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    vector &lt;<span class="keyword">int</span>&gt; nums;</span><br><span class="line">    nums.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">while</span> (n) nums.<span class="built_in">push_back</span>(n % <span class="number">10</span>), n /= <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>, last = <span class="number">-2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = nums.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; -- i )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> &amp;x = nums[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i == nums.<span class="built_in">size</span>() - <span class="number">1</span>; j &lt; x; ++ j )</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">abs</span>(j - last) &gt;= <span class="number">2</span>) res += f[i + <span class="number">1</span>][j];</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">abs</span>(x - last) &gt;= <span class="number">2</span>) last = x;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (!i) res ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// printf(&quot;%d\n&quot;, res);</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = nums.<span class="built_in">size</span>() - <span class="number">2</span>; i &gt;= <span class="number">0</span>; -- i )</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">9</span>; ++ j ) res += f[i + <span class="number">1</span>][j];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">    cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">dp</span>(r) - <span class="built_in">dp</span>(l - <span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T3：数字游戏"><a href="#T3：数字游戏" class="headerlink" title="T3：数字游戏"></a>T3：数字游戏</h4><p><a href="https://loj.ac/p/10166">题目传送门 LOJ</a></p><p>可以发现，所有数位 DP 的题目其实差不多。</p><p>直接预处理 $i$ 位数，最高位是 $j$，且模 $n$ 是 $k$ 的总个数。</p><p>然后和上题差不多。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">105</span>;</span><br><span class="line"></span><br><span class="line">ll f[<span class="number">12</span>][<span class="number">10</span>][N];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Mod</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (s % n + n) % n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; ++ i) f[<span class="number">1</span>][i][i % n] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; <span class="number">12</span>; ++ i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">9</span>; ++ j)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++ k)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt;= <span class="number">9</span>; ++l)</span><br><span class="line">                    f[i][j][k] += f[i - <span class="number">1</span>][l][<span class="built_in">Mod</span>(k - j)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">dp</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!x) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    vector &lt;<span class="keyword">int</span>&gt; nums;</span><br><span class="line">    <span class="keyword">while</span> (x) nums.<span class="built_in">push_back</span>(x % <span class="number">10</span>), x /= <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> last = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = nums.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; -- i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> &amp;x = nums[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; x; ++ j)</span><br><span class="line">            res += f[i + <span class="number">1</span>][j][<span class="built_in">Mod</span>(-last)];</span><br><span class="line">        last = <span class="built_in">Mod</span>(last + x);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!i &amp;&amp; !last) res ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; a &gt;&gt; b &gt;&gt; n) <span class="built_in">init</span>(), <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">dp</span>(b) - <span class="built_in">dp</span>(a - <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>剩下几个题作为练习的题目，不再做讲解，有疑问的同学可以看代码。</p><h4 id="T4：不要-62"><a href="#T4：不要-62" class="headerlink" title="T4：不要 62"></a>T4：不要 62</h4><p><a href="https://loj.ac/p/10167">题目传送门 LOJ</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">int</span> f[N][<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; ++ i) f[<span class="number">1</span>][i] = i != <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; N; ++ i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">9</span>; ++ j)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">9</span>; ++ k)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (j == <span class="number">4</span> || k == <span class="number">4</span> || (j == <span class="number">6</span> &amp;&amp; k == <span class="number">2</span>)) <span class="keyword">continue</span>;</span><br><span class="line">                f[i][j] += f[i - <span class="number">1</span>][k];</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dp</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!n) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    vector &lt;<span class="keyword">int</span>&gt; nums;</span><br><span class="line">    <span class="keyword">while</span> (n) nums.<span class="built_in">push_back</span>(n % <span class="number">10</span>), n /= <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>, last = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = nums.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; -- i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> &amp;x = nums[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; x; ++ j)</span><br><span class="line">            <span class="keyword">if</span> ((j != <span class="number">2</span> || last != <span class="number">6</span>) &amp;&amp; (j != <span class="number">4</span>))</span><br><span class="line">                res += f[i + <span class="number">1</span>][j];</span><br><span class="line">        <span class="keyword">if</span> ((last == <span class="number">6</span> &amp;&amp; x == <span class="number">2</span>) || (x == <span class="number">4</span>)) <span class="keyword">break</span>;</span><br><span class="line">        last = x;</span><br><span class="line">        <span class="keyword">if</span> (!i) res ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; a &gt;&gt; b, a || b) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">dp</span>(b) - <span class="built_in">dp</span>(a - <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T5：恨-7-不成妻"><a href="#T5：恨-7-不成妻" class="headerlink" title="T5：恨 7 不成妻"></a>T5：恨 7 不成妻</h4><p><a href="https://loj.ac/p/10168">题目传送门 LOJ</a></p><p>维护 $s0,s1,s2$ 分别表示所有的 0 次方（及个数），1 次方（和），2 次方。</p><p>比较难写，特别注意是模什么。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod(x, y) ((x) % (y) + (y)) % (y)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">25</span>;</span><br><span class="line"><span class="keyword">const</span> ll Mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ll s0, s1, s2;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">adjust</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        s0 = <span class="built_in">mod</span>(s0, Mod);</span><br><span class="line">        s1 = <span class="built_in">mod</span>(s1, Mod);</span><br><span class="line">        s2 = <span class="built_in">mod</span>(s2, Mod);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Node f[N][<span class="number">10</span>][<span class="number">8</span>][<span class="number">8</span>];</span><br><span class="line">ll p7[N], pm[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(Node &amp;v1, <span class="keyword">const</span> Node &amp;v2, <span class="keyword">int</span> j, ll p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    v1.s0 = (v1.s0 + v2.s0) % Mod;</span><br><span class="line">    v1.s1 = ((v1.s1 + v2.s1) % Mod + v2.s0 * p % Mod * (ll)j % Mod) % Mod;</span><br><span class="line">    v1.s2 = (v1.s2 + v2.s2</span><br><span class="line">            +<span class="number">2ll</span> * p % Mod * v2.s1 % Mod * (ll)j % Mod</span><br><span class="line">            +((ll)j * p % Mod) * ((ll)j * p % Mod) % Mod * v2.s0 % Mod) % Mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(f));</span><br><span class="line">    p7[<span class="number">0</span>] = pm[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++ i) p7[i] = (p7[i - <span class="number">1</span>] * <span class="number">10ll</span>) % <span class="number">7ll</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++ i) pm[i] = (pm[i - <span class="number">1</span>] * <span class="number">10ll</span>) % Mod;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; ++ i)</span><br><span class="line">    &#123;</span><br><span class="line">        Node &amp;v1 = f[<span class="number">1</span>][i][i % <span class="number">7</span>][i % <span class="number">7</span>];</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">7</span>) <span class="keyword">continue</span>;</span><br><span class="line">        v1.s0 ++, v1.s1 += i, v1.s2 += i * i;</span><br><span class="line">    &#125;</span><br><span class="line">    ll p = <span class="number">10ll</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; N; ++ i, p *= <span class="number">10ll</span>, p %= Mod)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">9</span>; ++ j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">7</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">9</span>; ++ k)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">7</span>; ++ x)</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="number">7</span>; ++ y)</span><br><span class="line">                    <span class="keyword">if</span> (k != <span class="number">7</span>) <span class="built_in">merge</span>(f[i][j][x][y],</span><br><span class="line">                     f[i - <span class="number">1</span>][k][<span class="built_in">mod</span>(x - j, <span class="number">7ll</span>)][<span class="built_in">mod</span>(y - p7[i - <span class="number">1</span>] * j, <span class="number">7ll</span>)], j, p);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node <span class="title">calc</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll s0 = <span class="number">0</span>, s1 = <span class="number">0</span>, s2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">7</span>; ++ k)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; <span class="number">7</span>; ++ l)</span><br><span class="line">            <span class="keyword">if</span> (k != x &amp;&amp; l != y)</span><br><span class="line">            &#123;</span><br><span class="line">                Node &amp;v = f[i][j][k][l];</span><br><span class="line">                s0 = (s0 + v.s0) % Mod;</span><br><span class="line">                s1 = (s1 + v.s1) % Mod;</span><br><span class="line">                s2 = (s2 + v.s2) % Mod;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">return</span> (Node)&#123;s0, s1, s2&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">dp</span><span class="params">(ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    ll tmp = n;n %= Mod;</span><br><span class="line">    vector &lt;<span class="keyword">int</span>&gt; nums;</span><br><span class="line">    <span class="keyword">while</span> (tmp) nums.<span class="built_in">push_back</span>(tmp % <span class="number">10</span>), tmp /= <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    ll last0 = <span class="number">0</span>, last1 = <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = nums.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; -- i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> &amp;x = nums[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; x; ++ j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">7</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> a = <span class="built_in">mod</span>(-last0, <span class="number">7</span>), b = <span class="built_in">mod</span>(-(last1 % <span class="number">7</span>) * p7[i + <span class="number">1</span>], <span class="number">7</span>);</span><br><span class="line">            Node v = <span class="built_in">calc</span>(i + <span class="number">1</span>, j, a, b);</span><br><span class="line">            res = (res + (last1 % Mod) * (last1 % Mod) % Mod * pm[i + <span class="number">1</span>] % Mod * pm[i + <span class="number">1</span>] % Mod * v.s0 % Mod</span><br><span class="line">            + <span class="number">2</span> * (last1 % Mod) % Mod * pm[i + <span class="number">1</span>] % Mod * v.s1 % Mod + v.s2) % Mod;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; res &lt;&lt; endl;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">7</span>) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        last1 = last1 * <span class="number">10</span> + x;last0 += x;</span><br><span class="line">        <span class="keyword">if</span> (!i &amp;&amp; last1 % <span class="number">7</span> &amp;&amp; last0 % <span class="number">7</span>) res = (res + n * n % Mod) % Mod;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;L10168.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;myans.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line"></span><br><span class="line">    ll t, l, r;cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t --)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">mod</span>(<span class="built_in">dp</span>(r) - <span class="built_in">dp</span>(l - <span class="number">1</span>), Mod) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;比较套路的一种 DP。&lt;/p&gt;</summary>
    
    
    
    
    <category term="DP 及其优化" scheme="https://mydcwfy.github.io/tags/DP-%E5%8F%8A%E5%85%B6%E4%BC%98%E5%8C%96/"/>
    
    <category term="数位 DP" scheme="https://mydcwfy.github.io/tags/%E6%95%B0%E4%BD%8D-DP/"/>
    
  </entry>
  
  <entry>
    <title>斜率优化 DP</title>
    <link href="https://mydcwfy.github.io/2021/12/13/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96-DP/"/>
    <id>https://mydcwfy.github.io/2021/12/13/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96-DP/</id>
    <published>2021-12-13T11:11:29.000Z</published>
    <updated>2021-12-13T11:12:32.641Z</updated>
    
    <content type="html"><![CDATA[<p>DP 优化。</p><span id="more"></span><h2 id="斜率优化-DP"><a href="#斜率优化-DP" class="headerlink" title="斜率优化 DP"></a>斜率优化 DP</h2><h3 id="1-主要思想"><a href="#1-主要思想" class="headerlink" title="1. 主要思想"></a>1. 主要思想</h3><p>斜率优化和单调队列、倍增、数据结构优化差不多，都是为了优化算法瓶颈的复杂度。</p><h3 id="2-方法"><a href="#2-方法" class="headerlink" title="2. 方法"></a>2. 方法</h3><h4 id="T1：任务安排"><a href="#T1：任务安排" class="headerlink" title="T1：任务安排"></a>T1：任务安排</h4><p><a href="https://www.luogu.com.cn/problem/P2365">例题1：(Luogu)</a></p><p><a href="https://acwing.com/problem/content/302/">例题1：(AcWing)</a></p><p>这题是斜率优化模板题的前身。</p><p>首先，我们发现启动一次，会对后面的所有都有影响。</p><p>所以，我们可以首先将该费用提前计算，为后面所有的费用乘上启动时间。</p><p>于是，我们较为简单地写出状态转移：<br>$$<br>f[i]=\min(f[j]+S*(sumc[n]-sumc[j])+ (sumc[i]-sumc[j])*sumt[i])<br>$$</p><p>就可以了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n, sumt[N], sumc[N], f[N], S;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;S);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;sumt[i], &amp;sumc[i]);</span><br><span class="line">        sumt[i] += sumt[i - <span class="number">1</span>];</span><br><span class="line">        sumc[i] += sumc[i - <span class="number">1</span>]; </span><br><span class="line">    &#125;</span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; ++ j)</span><br><span class="line">            f[i] = <span class="built_in">min</span>(f[i], f[j] + S * (sumc[n] - sumc[j]) + sumt[i] * (sumc[i] - sumc[j]));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, f[n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h4><p><a href="https://loj.ac/p/10185">题目传送门 LOJ</a></p><p>这个就是斜率优化最经典的题目了。</p><p>我们来看一下：<br>$$<br>f[i]=\min(f[j]+S*(sumc[n]-sumc[j])+ (sumc[i]-sumc[j])*sumt[i])<br>$$<br>在求 $f[i]$ 的时候，可以认为 $i$ 相关的是常量，与 $j$ 相关的是变量。</p><p>所以，“参变分离”，可得：<br>$$<br>f[i]=f[j]-(S+sumt[i])<em>sumc[j]+S</em> sumc[n]+sumc[i]*sumt[i]<br>$$<br>将 $f[j]$ 看作 $y$，$sumc[j]$ 为 $x$，那么原式可以为：<br>$$<br>f[j]=(S+sumt[i])*sumc[j]+f[i]-sumt[i]<em>sumc[i]-S</em>sumt[n]<br>$$<br>那么，每一个决策都可以看作一个点，为 $(f[j],sumc[j])$。</p><p>我们现在想要 $f[i]$ 最小，即截距要最小。</p><p>然后，对于同一个 $i$ 来说，斜率是不变的。</p><p>那么，我们让斜率为 $S+sumt[i]$ 的一条直线一直向上移，当碰到第一个点时，就是最优决策了。</p><p>所以，对于每一个 $i$ 来说，都是这样来计算即可。</p><p>根据<strong>动态规划的优化根本原则</strong>，就是<strong>及时删除不需要的决策</strong>。</p><p>那些是不需要的决策呢？</p><p>首先，将所有点按横坐标排序（本题就是递增的）。</p><p>然后，将相邻两个点的<strong>斜率</strong>算出来。</p><p>注意，这里的斜率和上面的不同，定义是有区别的，务必分清！</p><p>以示区分，我在这里用<strong>横纵比</strong>表示这里的斜率（名字不好，凑合着用一下吧）</p><p>然后，如果相邻的纵横比是递减的，那么中间的点一定不会用到。</p><p>这个得到的图形就是凸包。</p><p>这里是难点，请务必理解。</p><p>画个图。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/m4afde28.png"></p><p>然后，我们在凸包中找答案。</p><p>可以证明，答案一定是满足这样性质的点：他与前面点的横纵比小于斜率，与后面的点的纵横比大于斜率。</p><p>如果不理解的话，看一下上面的图就可以了。</p><p>于是，我们只要维护一个凸包即可，用平衡树维护即可，复杂度为 $O(n\log n)$。</p><p>其实，这也是 Graham 算法。</p><p>这个就是斜率优化的精髓。</p><p>然后，我们回归本题。</p><p>因为插入的点的横坐标一定是递增的，所以我们一定可以将点向后插入，就不需要平衡树了。</p><p>同时，因为本题查询的斜率也一定是递增的，所以如果有小于当前斜率的横纵比，直接就删除该点即可，就是上面被绿色叉掉的点。</p><p>在本题中，可以做到 $O(n)$，其他题可以优化到 $O(n\log n)$。</p><p>所有的题目，使用斜率优化时，都要弄清状态转移方程的 $y,x,k$ 再做。</p><p>代码不太长，但是细节有点多。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span> + <span class="number">10</span>;</span><br><span class="line">ll f[N], sumt[N], sumc[N];</span><br><span class="line"><span class="keyword">int</span> n, q[N], S;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;S);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld&quot;</span>, &amp;sumt[i], &amp;sumc[i]);</span><br><span class="line">        sumt[i] += sumt[i - <span class="number">1</span>];</span><br><span class="line">        sumc[i] += sumc[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> hh = <span class="number">0</span>, tt = <span class="number">0</span>;</span><br><span class="line">    q[<span class="number">0</span>] = <span class="number">0</span>;<span class="comment">//f[j] = f[i] + (sumt[i] + S) * sumc[j] - sumc[n] * S - sumt[i] * sumc[i]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (hh &lt; tt &amp;&amp; (f[q[hh + <span class="number">1</span>]] - f[q[hh]]) &lt;= (sumt[i] + S) * (sumc[q[hh + <span class="number">1</span>]] - sumc[q[hh]]))</span><br><span class="line">            hh ++;</span><br><span class="line">        f[i] = f[q[hh]] - (sumt[i] + S) * sumc[q[hh]] + sumc[n] * S + sumt[i] * sumc[i];</span><br><span class="line">        <span class="keyword">while</span> (hh &lt; tt &amp;&amp; (f[q[tt]] - f[q[tt - <span class="number">1</span>]]) * (sumc[i] - sumc[q[tt]]) &lt;= </span><br><span class="line">        (f[i] - f[q[tt]]) * (sumc[q[tt]] - sumc[q[tt - <span class="number">1</span>]])) tt --;</span><br><span class="line">        q[++ tt] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, f[n]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h4><p><a href="https://www.luogu.com.cn/problem/P5785">题目传送门 Luogu</a></p><p><a href="https://loj.ac/p/10186">题目传送门 LOJ</a></p><p>这个就是刚才的题的加强版。</p><p>$T&lt;0$，会发生什么呢？</p><p>看到上面的分析，我们发现就是斜率就不再具有单调性。</p><p>所以，我们不能删除横纵比小于当前斜率的点，于是就必须二分查找。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span> + <span class="number">10</span>;</span><br><span class="line">ll sumt[N], sumc[N], f[N];</span><br><span class="line"><span class="keyword">int</span> S, q[N], n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;S);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld&quot;</span>, &amp;sumt[i], &amp;sumc[i]);</span><br><span class="line">        sumt[i] += sumt[i - <span class="number">1</span>];</span><br><span class="line">        sumc[i] += sumc[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> hh = <span class="number">0</span>, tt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> l = hh, r = tt;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> ((f[q[mid + <span class="number">1</span>]] - f[q[mid]]) &gt;= (sumt[i] + S) * (sumc[q[mid + <span class="number">1</span>]] - sumc[q[mid]]))</span><br><span class="line">                r = mid;</span><br><span class="line">            <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> j = q[r];</span><br><span class="line">        f[i] = f[j] - (sumt[i] + S) * sumc[j] + S * sumc[n] + sumc[i] * sumt[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (hh &lt; tt &amp;&amp; (f[q[tt]] - f[q[tt - <span class="number">1</span>]]) * (sumc[i] - sumc[q[tt]]) &gt;=</span><br><span class="line">        (f[i] - f[q[tt]]) * (sumc[q[tt]] - sumc[q[tt - <span class="number">1</span>]])) tt --;</span><br><span class="line">        q[++ tt] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, f[n]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T4：运输小猫"><a href="#T4：运输小猫" class="headerlink" title="T4：运输小猫"></a>T4：运输小猫</h4><p><a href="https://www.acwing.com/problem/content/305/">题目传送门 AcWing</a></p><p>首先，我们求 $d_{1,i}$，即一个前缀和。</p><p>然后，假设 $S$ 为饲养员出发的时间。</p><p>那么，就可以得到 $S+d_i\geq t_i$，即 $S\geq t_i-d_i$。</p><p>令 $a_i=t_i-d_i$，那么每只小猫要求饲养员的出发时间的最大值。</p><p>再按照 $a_i$ 排序，于是就可以排成序列。</p><p>于是就转化为了一个较为经典的 DP 了。</p><p>设 $f[i,j]$ 为接走前 $i$ 只小猫用了 $j$ 个饲养员所需的最小等待时间。</p><p>用前缀和 $s_i$ 表示 $\sum_{j=1}^{i}a[i]$。</p><p>那么就可以得到：<br>$$<br>f[i,j]=\min(f[k,j-1]+a[i]*(i-k)-(s[i]-s[k]))<br>$$<br>接着，可以改写为：<br>$$<br>f[k,j-1]+s[k]=a[i]*k+f[i,j]-a[i]*i+s[i]<br>$$<br>就是一个斜率优化了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, P = <span class="number">110</span>;</span><br><span class="line">ll d[N], a[N], f[P][N], s[N];</span><br><span class="line"><span class="keyword">int</span> n, m, p, q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;n, &amp;m, &amp;p);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++ i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;d[i]);</span><br><span class="line">        d[i] += d[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, id; i &lt;= m; ++ i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;id, &amp;a[i]);</span><br><span class="line">        a[i] -= d[id];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + m + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++ i) s[i] = s[i - <span class="number">1</span>] + a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= p; ++ j)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++ i) f[j][i] = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= p; ++ j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> hh = <span class="number">0</span>, tt = <span class="number">0</span>;</span><br><span class="line">        q[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++ i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (hh &lt; tt &amp;&amp; (f[j - <span class="number">1</span>][q[hh + <span class="number">1</span>]] + s[q[hh + <span class="number">1</span>]] - f[j - <span class="number">1</span>][q[hh]] - s[q[hh]])</span><br><span class="line">            &lt;= a[i] * (q[hh + <span class="number">1</span>] - q[hh]))</span><br><span class="line">                hh ++;</span><br><span class="line">            f[j][i] = f[j - <span class="number">1</span>][q[hh]] + a[i] * (i - q[hh]) - s[i] + s[q[hh]];</span><br><span class="line">            <span class="keyword">while</span> (hh &lt; tt &amp;&amp; (f[j - <span class="number">1</span>][q[tt]] + s[q[tt]] - f[j - <span class="number">1</span>][q[tt - <span class="number">1</span>]] - s[q[tt - <span class="number">1</span>]]) * (i - q[tt])</span><br><span class="line">            &gt;= (f[j - <span class="number">1</span>][i] + s[i] - f[j - <span class="number">1</span>][q[tt]] - s[q[tt]]) * (q[tt] - q[tt - <span class="number">1</span>]))</span><br><span class="line">                tt --;</span><br><span class="line">            q[++ tt] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ll res = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= p; ++ i) res = <span class="built_in">min</span>(res, f[i][m]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, res);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;DP 优化。&lt;/p&gt;</summary>
    
    
    
    
    <category term="DP 及其优化" scheme="https://mydcwfy.github.io/tags/DP-%E5%8F%8A%E5%85%B6%E4%BC%98%E5%8C%96/"/>
    
    <category term="斜率优化" scheme="https://mydcwfy.github.io/tags/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>群论和 Pólya 定理</title>
    <link href="https://mydcwfy.github.io/2021/12/13/%E7%BE%A4%E8%AE%BA%E5%92%8C-Polya-%E5%AE%9A%E7%90%86/"/>
    <id>https://mydcwfy.github.io/2021/12/13/%E7%BE%A4%E8%AE%BA%E5%92%8C-Polya-%E5%AE%9A%E7%90%86/</id>
    <published>2021-12-13T11:08:54.000Z</published>
    <updated>2021-12-13T11:10:39.583Z</updated>
    
    <content type="html"><![CDATA[<p>本章节不再讲述非常难的群论基础，仅作为学习 Pólya 的工具，基本不涉及证明。</p><span id="more"></span><h2 id="群论和-Polya-定理"><a href="#群论和-Polya-定理" class="headerlink" title="群论和 Pólya 定理"></a>群论和 Pólya 定理</h2><h3 id="1-群论基础"><a href="#1-群论基础" class="headerlink" title="1. 群论基础"></a>1. 群论基础</h3><h4 id="1）置换"><a href="#1）置换" class="headerlink" title="1）置换"></a>1）置换</h4><p>其实就是一个函数，或者是映射。</p><p>我们首先有一个 $1\sim n$ 的排列，然后我们将顺序打乱，然后前后的变化就是一个置换。</p><p>写为标准的格式，就是<br>$$<br>\binom{1\ 2\ 3…\ n}{a_1\ a_2…\ a_n}<br>$$</p><h4 id="2）循环置换"><a href="#2）循环置换" class="headerlink" title="2）循环置换"></a>2）循环置换</h4><p>就是将一个置换循环（？）。</p><p>具体来说，就是 1 变 2，2 变 3，…，$n-1$ 变 $n$，$n$ 变 1。</p><p>这样大概理解了吧。</p><p>我们将其投射到图上，会发现每一个置换可以看作一张图中沿有向图的方向行走一个。</p><p>循环置换中，就是 1 连 2，2 连 3，这样，就会构成一个环。</p><p>每一个置换都是有几个环构成的。</p><h4 id="3）置换群"><a href="#3）置换群" class="headerlink" title="3）置换群"></a>3）置换群</h4><p>就是所有置换的集合。</p><p>注意，他的子集也可以是置换群。</p><h3 id="2-Burnside-引理"><a href="#2-Burnside-引理" class="headerlink" title="2. Burnside 引理"></a>2. Burnside 引理</h3><p>求解的问题是某类本质不同的方案数。</p><p>本质相同比如：翻转、旋转能重合的。</p><p><strong>引理：不同方案数就是每个置换的不动点的平均值。</strong></p><p>首先，这里的置换就是从一个方案转换到另一种方案的过程。</p><p>这里可能有一些抽象，后面结合例题一起来看。</p><p>比如，我们看一个简单的例子。</p><blockquote><p>给定一串珠子，给它染上 3 种颜色，求本质不同的方案数。</p></blockquote><p>置换过后，如果该方案是没有变化的，那么就称该方案在该置换下是不动点。</p><p>我们对于每一个置换，都求一下不动点的个数，最后求一下平均值，就是本质不同的方案数。</p><h3 id="3-Polya-定理"><a href="#3-Polya-定理" class="headerlink" title="3. Pólya 定理"></a>3. Pólya 定理</h3><p>刚才的 Burnside 引理，还需要求不动点。</p><p>首先，我们将这个置换拆成多个循环。</p><p>然后，对于每一个循环，我们只要染上同一种颜色，就是不动点。</p><p>所以，不动点个数就为 $c^k$，其中 $c$ 表示颜色，$k$ 表示循环数。</p><p>这样，我们只需要求每一个置换的循环数，就可以求出不动点了。</p><h3 id="4-例题"><a href="#4-例题" class="headerlink" title="4. 例题"></a>4. 例题</h3><h4 id="T1：串珠子-【模板】Polya-定理"><a href="#T1：串珠子-【模板】Polya-定理" class="headerlink" title="T1：串珠子/【模板】Pólya 定理"></a>T1：串珠子/【模板】Pólya 定理</h4><p><a href="https://www.luogu.com.cn/problem/P4980">题目传送门 Luogu</a></p><p>第一种：旋转。</p><p>可以旋转 0 格，1 格，……，$n-1$ 格。</p><p>那么，$k$ 格之后，$x$ 会转到 $x+k$ 的位置。</p><p>设 $d=\gcd(n,k)$，那么转 $\dfrac{n}{d}$ 次后就会产生重叠，所以循环节长度就为 $\dfrac{n}{d}$。</p><p>于是，画个图就可以理解，一共有 $d$ 个循环节。</p><p>所以，不动点就为 $m^{\gcd(n,k)}$。</p><p>第二种：翻转。</p><p>首先，我们要分类。</p><p>如果 $n\equiv1\pmod2$，于是对称轴一定穿过每个点。</p><p>就有 $n$ 种情况，每一种情况的循环个数为 $1+\dfrac{n-1}{2}=\dfrac{n+1}{2}$。</p><p>如果 $n\equiv0\pmod2$，于是对称轴可能是穿过每个点，或者是穿过两个点的中间。</p><p>如果对称轴穿过一个点，就是 $2+\dfrac{n-2}{2}=\dfrac{n}{2}+1$。</p><p>如果对称轴穿过中间，就是 $\dfrac{n}{2}$。</p><p>至此，我们就将所有不动点的情况全部计算了出来。</p><p>（这是 Luogu 的代码，还要出来一下 后面的公式推导）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll Mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">Gcd</span><span class="params">(ll a, ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!b) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Gcd</span>(b, a % b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) res *= a, res %= Mod;</span><br><span class="line">        a *= a;a %= Mod;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_phi</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n / i; ++ i)</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ans = ans / i * (i - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">while</span> (n % i == <span class="number">0</span>) n /= i;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> (n != <span class="number">1</span>) ans = ans / n * (n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, n;cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n / i; ++ i)</span><br><span class="line">            <span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ans = (ans + <span class="built_in">qpow</span>(n, i) * <span class="built_in">get_phi</span>(n / i) % Mod) % Mod;</span><br><span class="line">                <span class="keyword">if</span> (i * i != n) ans = (ans + <span class="built_in">qpow</span>(n, n / i) * <span class="built_in">get_phi</span>(i) % Mod) % Mod;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans * <span class="built_in">qpow</span>(n, Mod - <span class="number">2</span>) % Mod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T2：魔法手链"><a href="#T2：魔法手链" class="headerlink" title="T2：魔法手链"></a>T2：魔法手链</h4><p><a href="https://www.acwing.com/problem/content/3137/">题目传送门 AcWing</a></p><p>这道题，我们不能使用 Pólya 定理，因为 Pólya 不能满足这些限制。</p><p>于是，我们使用 Burnside 引理。</p><p>怎样找不动点呢？</p><p>首先，我们考虑 $k$ 旋转之后得到的置换。</p><p>然后，对于每一个点，我们都有每 $d=\gcd(n,k)$ 都是当前点可能达到的。</p><p>于是，我们如果要不动点的话，这每 $d$ 个点出现一次的点一定都要相等。</p><p>纵观全局，这个循环是 $\dfrac{n}{d}$ 长度的。</p><p>于是，就是 $d$ 个互不相同的循环。</p><p>问题就变为了 $0\sim d-1$ 的颜色将会被复制 $\dfrac{n}{d}$ 次使得填满该环。</p><p>于是，我们只需要关注这个小段即可，而且他首尾相连。</p><p>也就是长度为 $d$ 的环染色数量就是不动点的数量。</p><p>这样，我们可以考虑 DP 了。</p><p>首先，我们初始化，首先定义 $d$ 的颜色，枚举即可。</p><p>然后，我们直接暴力枚举每一种颜色和前面的颜色，只要可以放在一起就累计答案。</p><p>最后，取 $d$ 的颜色的累计答案，就可以了。</p><p>但是，本题 $n\leq10^9$，无法通过。</p><p>所以，我们可以预处理长度为 $1\sim n$ 的环的答案。</p><p>这个就是一个简单的矩阵快速幂优化 DP 了。</p><p>但是，本体中，我们还不能枚举 $k$。</p><p>观察到 $k$ 的答案仅与 $d$ 的取值相关。</p><p>所以，我们枚举 $d|n$，然后找到 $k=k’*d$ 使得 $k’$ 与 $\dfrac nd$ 互质。</p><p>这不就是 $\varphi(\dfrac nd)$ 吗！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">11</span>, Mod = <span class="number">9973</span>;</span><br><span class="line"><span class="keyword">int</span> M;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Matrix</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> a[N][N], n, m;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">clean</span><span class="params">(<span class="keyword">int</span> _n, <span class="keyword">int</span> _m)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a);</span><br><span class="line">        n = _n, m = _m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> Matrix <span class="keyword">operator</span> *(<span class="keyword">const</span> Matrix &amp;b)<span class="keyword">const</span>&#123;</span><br><span class="line">        Matrix c;c.<span class="built_in">clean</span>(n, b.m);</span><br><span class="line">        <span class="keyword">if</span> (m != b.n) <span class="keyword">return</span> c;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= b.m; ++ j)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= m; ++ k)</span><br><span class="line">                    c.a[i][j] = (c.a[i][j] + a[i][k] * b.a[k][j]) % Mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> Matrix <span class="keyword">operator</span> ^(<span class="keyword">int</span> x)<span class="keyword">const</span>&#123;</span><br><span class="line">        Matrix res, tmp = *<span class="keyword">this</span>;res.<span class="built_in">clean</span>(n, m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) res.a[i][i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (x &amp; <span class="number">1</span>) res = res * tmp;</span><br><span class="line">            x &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            tmp = tmp * tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;F0, ed;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_phi</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n / i; ++ i)</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ans = ans / i * (i - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">while</span> (n % i == <span class="number">0</span>) n /= i;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> (n != <span class="number">1</span>) ans = ans / n  *(n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (k &amp; <span class="number">1</span>) res = res * a % Mod;</span><br><span class="line">        a = a * a % Mod;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">inv</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">qpow</span>(x, Mod - <span class="number">2</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ed = F0 ^ x;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= M; ++ i) sum += ed.a[i][i], sum %= Mod;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, n, k;cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t --)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; M &gt;&gt; k;</span><br><span class="line">        F0.<span class="built_in">clean</span>(M, M);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= M; ++ i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= M; ++ j) F0.a[i][j] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (k --)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x, y;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">            F0.a[x][y] = F0.a[y][x] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n / i; ++ i)</span><br><span class="line">            <span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                res = (res + <span class="built_in">calc</span>(i) * (<span class="built_in">get_phi</span>(n / i) % Mod) % Mod) % Mod;</span><br><span class="line">                <span class="keyword">if</span> (i == n / i) <span class="keyword">continue</span>;</span><br><span class="line">                res = (res + <span class="built_in">calc</span>(n / i) * (<span class="built_in">get_phi</span>(i) % Mod) % Mod) % Mod;</span><br><span class="line">            &#125;</span><br><span class="line">        cout &lt;&lt; <span class="function">res * <span class="title">inv</span><span class="params">(n)</span> % Mod &lt;&lt; endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本章节不再讲述非常难的群论基础，仅作为学习 Pólya 的工具，基本不涉及证明。&lt;/p&gt;</summary>
    
    
    
    
    <category term="数论" scheme="https://mydcwfy.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
    <category term="Polya 定理" scheme="https://mydcwfy.github.io/tags/Polya-%E5%AE%9A%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>后缀自动机（SAM）总结</title>
    <link href="https://mydcwfy.github.io/2021/12/13/%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA%EF%BC%88SAM%EF%BC%89%E6%80%BB%E7%BB%93/"/>
    <id>https://mydcwfy.github.io/2021/12/13/%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA%EF%BC%88SAM%EF%BC%89%E6%80%BB%E7%BB%93/</id>
    <published>2021-12-13T08:53:58.000Z</published>
    <updated>2021-12-13T11:04:21.198Z</updated>
    
    <content type="html"><![CDATA[<p>自认为写得还行。</p><span id="more"></span><h3 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h3><p>本文不比前面的学习笔记 <a href="https://www.luogu.com.cn/blog/mydcwfy-342891/suffix-automation">后缀自动机笔记</a>，这篇文章大概能保证你能理解。</p><p>本文同样不会给出证明，但是会亲近读者，尽可能让读者看懂。</p><p>图片建议新标签页打开看一下。因为用的是 Luogu，github 上会挂。</p><h3 id="1-职能"><a href="#1-职能" class="headerlink" title="1. 职能"></a>1. 职能</h3><p>这个就是一个可以快速查找一个字符串的子串，1 号点是根节点，走 1 号点可以走到所有的子串。</p><p>预处理和寻找都是线性 $O(n)$ 的。</p><h3 id="2-前置知识"><a href="#2-前置知识" class="headerlink" title="2. 前置知识"></a>2. 前置知识</h3><p>$\text{endpos}$ 的一些基本定义和性质。</p><p>顾名思义，$\text{endpos}$ 对于字符串中的一个子串而定义，是指所有出现的地方的最后一个字符的位置。</p><p>（可能有些绕，看一下下面的解释</p><p>首先，我们定义，$\text{endpos}$ 相同的作为一个等价类，可以看做同一个状态，对应在 SAM 中是同一个结点。</p><p>比如，我们还是来看一个实例 $\texttt{abcbc}$：</p><ul><li>${\texttt{abcbc},\texttt{bcbc},\texttt{cbc} }$ 的 $\text{endpos}$ 都是 ${5}$。</li><li>${\texttt{bc},\texttt{c} }$ 的 $\text{endpos}$ 都是 ${3,5}$。</li></ul><p>当然没有列举完，读者可以自己推一下（？</p><p>可以发现，$\text{endpos}$ 有一个性质，就是如果 $\text{endpos}$ 相同的，一定是长度递减的字符串。</p><p>还是看上面的实例：</p><ul><li>${\texttt{abcbc},\texttt{bcbc},\texttt{cbc} }$ 是长度递减的字符串，且后面一个是前面一个的后缀。</li><li>${\texttt{bc},\texttt{c} }$ 是长度递减的字符串，且后面一个是前面一个的后缀。</li></ul><p>现在，大概理解了 $\text{endpos}$ 的基本性质了吧。</p><h3 id="3-SAM-的构造"><a href="#3-SAM-的构造" class="headerlink" title="3. SAM 的构造"></a>3. SAM 的构造</h3><p>这里我们先贴代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> len, fa;</span><br><span class="line">    <span class="keyword">int</span> ch[<span class="number">26</span>];</span><br><span class="line">&#125;tr[N];</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">1</span>, tot = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> str[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">extend</span><span class="params">(<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> p = last;<span class="keyword">int</span> np = ++ tot;</span><br><span class="line">f[tot] = <span class="number">1</span>;</span><br><span class="line">tr[np].len = tr[p].len + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (; p &amp;&amp; !tr[p].ch[c]; p = tr[p].fa) tr[p].ch[c] = np;</span><br><span class="line">last = tot;</span><br><span class="line"><span class="keyword">if</span> (!p) tr[np].fa = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> q = tr[p].ch[c];</span><br><span class="line"><span class="keyword">if</span> (tr[q].len == tr[p].len + <span class="number">1</span>) tr[np].fa = q;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> nq = ++ tot;</span><br><span class="line">tr[nq] = tr[q], tr[nq].len = tr[p].len + <span class="number">1</span>;</span><br><span class="line">tr[q].fa = tr[np].fa = nq;</span><br><span class="line"><span class="keyword">for</span> (; p &amp;&amp; tr[p].ch[c] == q; p = tr[p].fa) tr[p].ch[c] = nq;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主函数调用的时候，直接 <code>for (int i = 1; str[i]; ++ i) extend(str[i] - &#39;a&#39;);</code> （这里假设只有小写字母）。</p><p><del>可以先背代码，再看下面的讲解</del>。</p><p>下面一点一点的讲解：</p><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> len, fa;</span><br><span class="line">    <span class="keyword">int</span> ch[<span class="number">26</span>];</span><br><span class="line">&#125;tr[N];</span><br></pre></td></tr></table></figure><p>说明一下每一个变量的含义：</p><p><code>tr[N]</code>：前面所讲的 $\text{endpos}$ 相同的子串将会被放入同一个结点，也就是说这些子串遍历时会走到这个结点停止。</p><p><code>ch[26]</code>：指所有的结点的转移。</p><p><code>len</code>：指所有的子串的最大长度。</p><p><code>fa</code>：可以看做 <code>fail</code>，也就是匹配失败的时候会走到哪个结点（现在大概用不到，有点像 KMP）。</p><p><strong>性质</strong>：$fa$ 指向的结点的最长长度就是当前结点所代表的子串的最短长度减 1。</p><p>还是拿 $\texttt{abcbc}$ 来说：</p><p>${\texttt{abcbc},\texttt{bcbc},\texttt{cbc} }$ 的最短长度是 3，那么这个结点的 $fa$ 是 $\texttt{bc}$ 所在的结点， 长度为 2。</p><p>这里有一些重要，请务必理解。（其实认真读一下上面的定义就可以了）</p><p>然后，还有一个<strong>重要的性质</strong>：如果当前所代表的最长子串是 $s$，那么按照 $fa$ 一直跳的话，所有遍历到的结点所代表的子串一定都是 $s$ 的后缀，且 $s$ 的后缀一定都被遍历到。</p><p>拿 ${\texttt{abcbc},\texttt{bcbc},\texttt{cbc} }$ 为例：这个结点的 $fa$ 会指向 $\texttt{bc}$ 所在的结点，然后 ${\texttt{bc},\texttt{c}}$ 是一个结点，然后 $fa$ 是 $\varnothing$。可以发现，整个遍历到的是 ${\texttt{abcbc,bcbc,cbc,bc,c},\varnothing }$，恰好是 $\texttt{abcbc}$ 的后缀的所有。 </p><hr><p><code>last = tot = 1</code>：这里表示开始已经有了一个节点，我们定义最开始结点的 $fa$ 是 0，长度也是 0。</p><hr><p><code>int p = last, np = ++ tot; ...; last = tot; </code>：$p$ 表示前面的结点，$np$ 表示当前的结点，处理完当前结点的时候要将 $last$ 更新。</p><hr><p><code>for (; p &amp;&amp; !tr[p].ch[c]; p = tr[p].fa) tr[p].ch[c] = np;</code></p><p>根据刚才的性质：</p><blockquote><p>如果当前所代表的最长子串是 $s$，那么按照 $fa$ 一直跳的话，所有遍历到的结点所代表的子串一定都是 $s$ 的后缀，且 $s$ 的后缀一定都被遍历到。</p></blockquote><p>有了这个结论的话，这里就比较简单了：直接一直按照 $fa$ 跳，将所有的结点都加上当前字符 $c$。</p><p>为什么要加上 <code>!tr[p].ch[c]</code> 呢？</p><p>因为如果出现了相同的字符，我们就有可能出现 $\text{endpos}$ 不是当前结点的，我们要特殊处理。</p><p>这个稍微有点复杂，现在可以理解为有原来的指向了，如果再赋值就会导致一些被覆盖，我们等一下再讲。</p><hr><p><code>if (!p) tr[np].fa = 1;</code>：这个说明程序退出循环是因为 $p=0$，所以说明 $last$ 结点所代表的最长子串，也就是原串（每一次扩展时 $last$ 都赋值给了最新的那个，也就是最长的那个），原串的所有后缀都加了当前字符 $c$，然后到了 $np$ 这个结点。</p><p>所以，$np$ 所代表的子串的长度一定从 $1$ 到最长长度。</p><p>比如，原来的串是 $\texttt{abc}$，加上了 $\texttt{d}$，那么 $\texttt{abc},\texttt{bc},\texttt{c},\varnothing$ 都会加上 $d$ 这个字符。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/u717hbc3.png"></p><p>（黑色边代表 $ch[]$，绿色边代表 $fa$）</p><p>前面没有理解可以看一下这个图。</p><p>那么，$np$ 的 $fa$ 就是长度为 $0$ 的串在的结点，也就是 $1$。</p><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> q = tr[p].ch[c];</span><br><span class="line"><span class="keyword">if</span> (tr[q].len == tr[p].len + <span class="number">1</span>) tr[np].fa = q;</span><br></pre></td></tr></table></figure><p>这里就有些难理解了，我们首先填一下前面的坑。</p><p>因为 $p$ 既可以转移到 $q$，也可以转移到 $np$，那么可以得到结论：$p$ 转移的 $ch[c]$ 有两个出现。</p><p>这里我们用一下前面的例子，在前面的基础 $\texttt{ab}$ 加上 $\texttt{b}$。</p><p>当循环到 $p=1$ 的时候，我们发现已经有了 $b$ 的转移边，这意味着 $\varnothing+\texttt{b}$ 已经出现了一次，这里又一次出现了，也就是说，$\text{endpos}$ 结果是不同于 $q$ 本身的 $\text{endpos}$ 了，所以要特殊处理。</p><p>这里明显是遇上了也有 $c$ 转移的。</p><p>我们首先记录下 $ch[c]$ 的位置 $q$。</p><p>首先，为什么 <code>tr[q].len = tr[p].len + 1</code> 与 <code>tr[q].len != tr[p].len + 1</code> 是不同的呢？</p><p>画一个图。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/eolba4ep.png"></p><p>根据前面所讲，$\texttt{b}$ 的 $\text{endpos}$ 是 ${2,3}$，不同于原来 3 号结点的 $\text{endpos}$。</p><p>但是，这里判断的 <code>tr[q].len = tr[p].len + 1</code> 是什么意思呢？</p><p>前面讲到，$len$ 的意思是一个结点所代表的子串的最长长度。</p><p>如果 <code>tr[q].len == tr[p].len + 1</code> 的话，那么这里只有长度为 $tr[q].len$ 的一个子串！</p><p>所以我们可以直接将这个结点的 $\text{endpos}$ 改为新的子串。</p><p>比如说，前面的 $q=3$ 的 $\text{endpos}$ 为 2，但是又添加了 $b$ 这个字符，我们就将 $q=3$ 的 $\text{endpos}$ 直接改为 ${2,3}$ 就可以了。</p><p>很明显，3 号结点所代表的子串仍然是 ${\texttt{ab},\texttt{b}}$，然后 $np=4$ 所代表的子串是 ${\texttt{abb}}$，比较明显，4 的 $fa$ 是 3。</p><hr><p>（你以为完了？还多着呢</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> nq = ++ tot;</span><br><span class="line">tr[nq] = tr[q], tr[nq].len = tr[p].len + <span class="number">1</span>;</span><br><span class="line">tr[q].fa = tr[np].fa = nq;</span><br><span class="line"><span class="keyword">for</span> (; p &amp;&amp; tr[p].ch[c] == q; p = tr[p].fa) tr[p].ch[c] = nq;</span><br></pre></td></tr></table></figure><p>这里是前面情况的相反情况，也就是 <code>tr[q].len != tr[p].len + 1</code>。</p><p>那么，我们这里就需要将 $q$ 结点拆为两个结点。</p><p>其中一个仍然是 $q$，另一个是 $nq$，也就是新建结点。</p><p>我们再画一个图，建的是 $\texttt{abcb}$ 的后缀自动机。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/hib4zlyo.png"></p><p><code>tr[nq] = tr[q]</code>：这一个比较简单，因为就是复制过来即可。</p><p><code>tr[nq].len = tr[p].len + 1</code>：这里是指将 $q$ 的长度为 $tr[p].len+1$ 的子串。</p><p><code>tr[q].fa = tr[np].fa = nq</code>：首先，我们从例子中学习。</p><p>很明显，$q$ 的最短子串是 $\texttt{ab}$，也就是长度减 1 的就是 $\texttt{b}$，同理，$np$ 的最短子串是 $\texttt{cb}$，长度减 1 也是 $\texttt{b}$。</p><p>再从证明入手。</p><p>前面说到，$nq$ 这个结点是从 $q$ 这个结点分离出来的，且是最短的子串被分离了的。</p><p>所以，$q$ 的 $fa$ 就应该是 $q$，这个显然 <del>（显然大法）</del>。</p><p>然后，因为 $np$ 本来应该也是有 $nq$ 这个结点所代表的子串的。</p><p>那么，我们也可以说 $nq$ 是从 $np$ 分离出来的。</p><p>所以，这一句显然。</p><hr><p><code>for (; p &amp;&amp; tr[p].ch[c] == q; p = tr[p].fa) tr[p].ch[c] = nq;</code></p><p> 这里是指，既然 $p$ 这个结点所代表的最长子串都是重复了的，那么 $p$ 的所有 $fa$（前提是原来是 $tr[p].ch[c] == q$）都应该有 $ch[c]$ 指到 $nq$ 这个结点。</p><p>看一下上面的例子。</p><p>$p$ 所代表的是 $\varnothing$，它接上 $\texttt{b}$ 也应该属于 $nq$，所以 $tr[p].ch[‘b’-‘a’]=nq$。</p><p>$p$ 的 $fa$ 是 0，所以结束。</p><hr><h3 id="4-SAM-时空复杂度的理解与简要证明"><a href="#4-SAM-时空复杂度的理解与简要证明" class="headerlink" title="4. SAM 时空复杂度的理解与简要证明"></a>4. SAM 时空复杂度的理解与简要证明</h3><p>这里，只说明 $tot\leq 2\operatorname{strlen}(s) - 1$。</p><p>很明显，每一次最多只会多 2 个结点。</p><p>查询也是线性，不用多说。</p><hr><h3 id="5-结语"><a href="#5-结语" class="headerlink" title="5. 结语"></a>5. 结语</h3><p>如果你还没有理解的话，<del>请喷作者</del>并发再评论。</p><p>希望能帮助到你。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;自认为写得还行。&lt;/p&gt;</summary>
    
    
    
    
    <category term="字符串" scheme="https://mydcwfy.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="后缀自动机" scheme="https://mydcwfy.github.io/tags/%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>后缀自动机（SAM）</title>
    <link href="https://mydcwfy.github.io/2021/12/13/%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA%EF%BC%88SAM%EF%BC%89/"/>
    <id>https://mydcwfy.github.io/2021/12/13/%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA%EF%BC%88SAM%EF%BC%89/</id>
    <published>2021-12-13T08:52:24.000Z</published>
    <updated>2021-12-13T08:53:15.514Z</updated>
    
    <content type="html"><![CDATA[<p>写得比较差，建议看另一篇。</p><span id="more"></span><h2 id="后缀自动机-SAM"><a href="#后缀自动机-SAM" class="headerlink" title="后缀自动机(SAM)"></a>后缀自动机(SAM)</h2><h3 id="1-主要思想"><a href="#1-主要思想" class="headerlink" title="1. 主要思想"></a>1. 主要思想</h3><p>可以类比于 Trie，但它是一个有向无环图。</p><p>可以用来存储一个串的所有子串。</p><h3 id="2-性质"><a href="#2-性质" class="headerlink" title="2. 性质"></a>2. 性质</h3><p>从起点出发，从普通边，可以得到所有子串。</p><p>同时，所有边和点的数量在 $O(n)$ 级别。</p><p>终点就是包含后缀的点，同时每一个点对应的是不止一个子串。</p><p>但所有每一个点对应的子串满足：按长度降序排序后，我们发现每一个串都是前面一个串的后缀。</p><p>还有一种边：$Link/Father$。</p><p>这种边构成一棵树。</p><p>将一个点所对应的最短的子串的首字母去掉，得到的子串所对应的节点，再由原来节点指向这个节点。</p><p>首先定义 $endpos(s)$ 为子串 s 在原串所有出现的位置（尾字母）下标集合。</p><p>如果有两个子串的 $endpos$ 相同，则我们可以将其看为一个等价类。</p><p>SAM 的状态与所有的等价类一一对应。</p><p><strong>证明1</strong>：如果 $|s1|\leq|s2|$，则 $s1$ 是 $s2$ 的后缀当且仅当 $endpos(s1) \supseteq endpos(s2)$。</p><p>$s1$ 不是 $s2$ 的后缀当且仅当 $endpos(s1)\cap endpos(s2)= \varnothing$。</p><p>这两个易证。</p><p><strong>证明2：</strong>两个不同子串的 $endpos$ 要么包含要么无交集。</p><p>易得，如果不为交集，那么必有一个 $pos$ 使两个都满足，则必有一个是另一个的子集。</p><p><strong>证明3：</strong> 对于每一个等价类 $st$，最长的子串为 $longest$，最短的为 $shortest$，若 $shortest\leq |s|\leq longest$，则 $s$ 也是属于该等价类。</p><h3 id="3-构造方法"><a href="#3-构造方法" class="headerlink" title="3. 构造方法"></a>3. 构造方法</h3><p>本人能力不够，也是云里雾里，只能帮到这了（ <del>逃</del> ）。</p><p>自己去理解吧。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e6</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> len,fa;</span><br><span class="line">    <span class="keyword">int</span> ch[<span class="number">26</span>];</span><br><span class="line">&#125;tr[N];</span><br><span class="line"><span class="keyword">char</span> str[N];</span><br><span class="line">ll f[N],ans;</span><br><span class="line"><span class="keyword">int</span> h[N],e[N],ne[N],idx,last=<span class="number">1</span>,tot=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx]=b,ne[idx]=h[a],h[a]=idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">extend</span><span class="params">(<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p=last;<span class="keyword">int</span> np=++tot;</span><br><span class="line">    f[tot]=<span class="number">1</span>;</span><br><span class="line">    tr[np].len=tr[p].len+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (;p&amp;&amp;!tr[p].ch[c];p=tr[p].fa) tr[p].ch[c]=np;</span><br><span class="line">    last=tot;</span><br><span class="line">    <span class="keyword">if</span> (!p) tr[np].fa=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> q=tr[p].ch[c];</span><br><span class="line">        <span class="keyword">if</span> (tr[q].len==tr[p].len+<span class="number">1</span>) tr[np].fa=q;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> nq=++tot;</span><br><span class="line">            tr[nq]=tr[q],tr[nq].len=tr[p].len+<span class="number">1</span>;</span><br><span class="line">            tr[q].fa=tr[np].fa=nq;</span><br><span class="line">            <span class="keyword">for</span> (;p&amp;&amp;tr[p].ch[c]==q;p=tr[p].fa) tr[p].ch[c]=nq;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=h[x];~i;i=ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">dfs</span>(e[i]);f[x]+=f[e[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (f[x]&gt;<span class="number">1</span>) ans=<span class="built_in">max</span>(ans,f[x]*tr[x].len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;str[i];++i) <span class="built_in">extend</span>(str[i]-<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=tot;++i) <span class="built_in">add</span>(tr[i].fa,i);</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-例题"><a href="#4-例题" class="headerlink" title="4. 例题"></a>4. 例题</h3><h4 id="T1：玄武密码"><a href="#T1：玄武密码" class="headerlink" title="T1：玄武密码"></a>T1：玄武密码</h4><p><a href="https://www.luogu.com.cn/problem/P5231">题目传送门 Luogu</a></p><p><a href="https://www.acwing.com/problem/content/1285/">题目传送门 AcWing</a></p><p>比模板还要裸。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e7</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> fa,len;</span><br><span class="line">    <span class="keyword">int</span> ch[<span class="number">4</span>];</span><br><span class="line">&#125;tr[N];</span><br><span class="line"><span class="keyword">int</span> last=<span class="number">1</span>,tot=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> str[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">extend</span><span class="params">(<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p=last,np=last=++tot;</span><br><span class="line">    tr[np].len=tr[p].len+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (;p&amp;&amp;!tr[p].ch[c];p=tr[p].fa) tr[p].ch[c]=np;</span><br><span class="line">    <span class="keyword">if</span> (!p) tr[np].fa=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> q=tr[p].ch[c];</span><br><span class="line">        <span class="keyword">if</span> (tr[q].len==tr[p].len+<span class="number">1</span>) tr[np].fa=q;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> nq=++tot;</span><br><span class="line">            tr[nq]=tr[q],tr[nq].len=tr[p].len+<span class="number">1</span>;</span><br><span class="line">            tr[q].fa=tr[np].fa=nq;</span><br><span class="line">            <span class="keyword">for</span> (;p&amp;&amp;tr[p].ch[c]==q;p=tr[p].fa) tr[p].ch[c]=nq; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span> (c)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;W&#x27;</span>:<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;N&#x27;</span>:<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;E&#x27;</span>:<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;S&#x27;</span>:<span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p=<span class="number">1</span>,i;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;str[i]&amp;&amp;tr[p].ch[<span class="built_in">get</span>(str[i])];++i) p=tr[p].ch[<span class="built_in">get</span>(str[i])];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,i);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i) <span class="built_in">extend</span>(<span class="built_in">get</span>(str[i]));</span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str);</span><br><span class="line">        <span class="built_in">dfs</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T2：最长公共子串"><a href="#T2：最长公共子串" class="headerlink" title="T2：最长公共子串"></a>T2：最长公共子串</h4><p><a href="https://www.acwing.com/problem/content/2813/">题目传送门 AcWing</a></p><p><a href="https://loj.ac/p/171">题目传送门 LOJ</a></p><p>将第一个建后缀自动机，和后面的进行比较即可。</p><p>注意要标记回传，否则更新可能不及时。</p><p>注意其中的最大最小：</p><ol><li>每一次走到一个节点时，应该和当前的取最大值。</li><li>不同的字符串之间，一个节点的值应取最小值。</li><li>最后得出答案时，应该把不同的节点所保存的值取最大输出。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>,INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> len,fa;</span><br><span class="line">    <span class="keyword">int</span> ch[<span class="number">26</span>];</span><br><span class="line">&#125;tr[<span class="number">2</span>*N];</span><br><span class="line"><span class="keyword">int</span> last=<span class="number">1</span>,tot=<span class="number">1</span>,now[N],ans[N];</span><br><span class="line"><span class="keyword">char</span> str[N];</span><br><span class="line"><span class="keyword">int</span> h[N],e[N],ne[N],idx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">extend</span><span class="params">(<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p=last,np=last=++tot;</span><br><span class="line">    tr[np].len=tr[p].len+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (;p&amp;&amp;!tr[p].ch[c];p=tr[p].fa) tr[p].ch[c]=np;</span><br><span class="line">    <span class="keyword">if</span> (!p) tr[np].fa=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> q=tr[p].ch[c];</span><br><span class="line">        <span class="keyword">if</span> (tr[q].len==tr[p].len+<span class="number">1</span>) tr[np].fa=q;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> nq=++tot;</span><br><span class="line">            tr[nq]=tr[q],tr[nq].len=tr[p].len+<span class="number">1</span>;</span><br><span class="line">            tr[q].fa=tr[np].fa=nq;</span><br><span class="line">            <span class="keyword">for</span> (;p&amp;&amp;tr[p].ch[c]==q;p=tr[p].fa) tr[p].ch[c]=nq;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx]=b,ne[idx]=h[a],h[a]=idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tree</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=h[x];~i;i=ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">tree</span>(e[i]);</span><br><span class="line">        now[x]=<span class="built_in">max</span>(now[x],now[e[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,p=<span class="number">1</span>,t=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(now,<span class="number">0</span>,<span class="keyword">sizeof</span> now);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;str[i];++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> c=str[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">while</span> (p&gt;<span class="number">1</span>&amp;&amp;!tr[p].ch[c]) p=tr[p].fa,t=tr[p].len; </span><br><span class="line">        <span class="keyword">if</span> (tr[p].ch[c]) p=tr[p].ch[c],t++;</span><br><span class="line">        now[p]=<span class="built_in">max</span>(now[p],t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">tree</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;++i) ans[i]=<span class="built_in">min</span>(ans[i],now[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;n--;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str);<span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;str[i];++i) <span class="built_in">extend</span>(str[i]-<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;++i) ans[i]=tr[i].len;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=tot;++i) <span class="built_in">add</span>(tr[i].fa,i);</span><br><span class="line">    <span class="keyword">while</span> (n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str);</span><br><span class="line">        <span class="built_in">calc</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> finalres=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;++i) finalres=<span class="built_in">max</span>(finalres,ans[i]);</span><br><span class="line">    cout&lt;&lt;finalres&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;写得比较差，建议看另一篇。&lt;/p&gt;</summary>
    
    
    
    
    <category term="字符串" scheme="https://mydcwfy.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="后缀自动机" scheme="https://mydcwfy.github.io/tags/%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>莫比乌斯反演</title>
    <link href="https://mydcwfy.github.io/2021/12/12/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
    <id>https://mydcwfy.github.io/2021/12/12/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/</id>
    <published>2021-12-12T08:49:31.000Z</published>
    <updated>2021-12-12T08:55:58.448Z</updated>
    
    <content type="html"><![CDATA[<p>容斥原理的升级版。</p><span id="more"></span><h2 id="1-莫比乌斯函数的定义与主要思想"><a href="#1-莫比乌斯函数的定义与主要思想" class="headerlink" title="1. 莫比乌斯函数的定义与主要思想"></a>1. 莫比乌斯函数的定义与主要思想</h2><p>$\mu(x)$ 来表示莫比乌斯函数。</p><p>其实就是容斥原理的升级版。</p><p>定义为：（假设 $x=p1^{a1}p2^{a2}…pk^{ak}$）</p><ol><li>$\exists i, ai\geq2,\mu(x)=0$</li><li>$\forall i,ai=1,\mu(x)=(-1)^k$</li></ol><p>顺便讲一下积性函数：</p><p>如果 $\gcd(i,j)=1,f(i*j)=f(i)*f(j)$，那么 $f$ 就是积性函数。</p><p>$\mu(x)$ 就是一个积性函数。</p><p>原因很简单：</p><ol><li>如果有 $\mu(i)=0$ 或 $\mu(j)=0$，那么 $i * j$ 一定有一个质因数的次数 $\geq2$，所以 $\mu(i*j)=0$</li><li>如果没有，设 $i$ 的质因数个数（即上面的 $k$）为 $x$，$j$ 为 $y$，又因为 $\gcd(i,j)=1$，所以没有相同的质因数，所以 $i * j$ 的质因数个数为 $x+y$，且没有次数 $&gt;1$ 的。所以 $\mu(i * j)=(-1)^{x+y}$。</li></ol><p>那么，我们就可以在线性筛的时候求出 $\mu(x)$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mu[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;N;++i)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">if</span> (!st[i]) mu[i]=<span class="number">-1</span>,prime[cnt++]=i;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cnt&amp;&amp;i*prime[j]&lt;N;++j)</span><br><span class="line">       &#123;</span><br><span class="line">           st[i*prime[j]]=<span class="number">1</span>;</span><br><span class="line">           <span class="keyword">if</span> (!(i%prime[j]))</span><br><span class="line">           &#123;</span><br><span class="line">               mu[i*prime[j]]=<span class="number">0</span>;<span class="comment">//break1</span></span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           mu[i*prime[j]]=-mu[i];<span class="comment">//break2</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>这就是一个简单的线性筛模板了。</p><p><code>break1</code>：这时，$i * prime[j]$ 的 $prime[j]$ 的次数一定大于 1，所以 $\mu(i*prime[j])$ 为 0。</p><p><code>break2</code>：这是，可以使用积性函数的性质 $\mu(i * prime[j])=\mu(i) * \mu(prime[j])$。</p><h2 id="2-函数的一些性质"><a href="#2-函数的一些性质" class="headerlink" title="2. 函数的一些性质"></a>2. 函数的一些性质</h2><h3 id="一）"><a href="#一）" class="headerlink" title="一）"></a>一）</h3><p>定义 $smu(n)=\sum_{d|n}\mu(d)$，那么可以得到：</p><ol><li>$n=1\Rightarrow smu(n)=1$</li><li>$n\not=1,smu(n)=0$</li></ol><p>简要的证明一下（前置知识：二项式定理）：</p><p>$n=1$ 的情况略过。</p><p>假设 $n&gt;1$，那么 $k\geq1$（前面的 $k$，即质因数个数）</p><p>首先，如果 $\forall i,0\leq bi\leq ai$，那么 $x=p1^{b1}p2^{b2}…pk^{bk}$ 一定是 $n$ 的因数。</p><p>如果 $\exists bi&gt;1$，那么 $\mu(x)=0$。</p><p>所以，我们只需要考虑 $0\leq bi\leq1$ 的情况。</p><p>假设有 $t$ 个 1，则 $\mu(x)=(-1)^t$。（不懂的回去看一下前面的定义）</p><p>对于每一个 $t$，其实都有 $C_k^t$ 种情况（就是 $k$ 个中选取 $t$ 个，就是组合数了）</p><p>那么，$smu(n)=C_k^0(-1)^0+C_k^1(-1)^1+…+C_k^{k-1}(-1)^{k-1}+C_k^k(-1)^k$。</p><p>又由二项式定义得到：$(a+b)^k=C_k^0a^0b^k+C_k^1a^1b^{k-1}+…+C_k^ka^kb_0$。</p><p>用 $-1$ 代替 $a$，$1$ 代替 $b$，我们发现， 右边就是 $smu(n)$，左边就是 $(-1+1)^k=0$！</p><p>得证。</p><h2 id="3-莫比乌斯反演"><a href="#3-莫比乌斯反演" class="headerlink" title="3. 莫比乌斯反演"></a>3. 莫比乌斯反演</h2><p>直接扔式子。<br>$$<br>F(n)=\sum_{d|n}f(d)\Rightarrow f(n)=\sum_{d|n}\mu(d)*F(\dfrac{n}{d})<br>$$<br>这个是比较常见的式子。</p><p>简要的证明一下：<br>$$<br>\sum_{d|n}\mu(d)F(\dfrac{n}{d})=\sum_{d|n}\mu(d)\sum_{x|\frac{n}{d}}f(x)<br>$$<br>上面的式子就是我们根据所给条件从右边开始的。</p><p>现在，我们要做一件事情：将 $d$ 和 $x$ 交换一下！</p><p>先给出结论：<br>$$<br>\sum_{d|n}\mu(d)\sum_{x|\frac{n}{d}}f(x)=\sum_{x|n}f(x)\sum_{d|\frac{n}{x}}\mu(d)<br>$$<br>为什么是对的呢？</p><p>这里，我们假设一下：首先有一个 $d$，然后我们枚举了 $\dfrac{n}{d}$ 的因数 $x$，然后我们将 $\mu(d)f(x)$ 加入了答案。</p><p>$x|\dfrac{n}{d}\Leftrightarrow xd|n$，那么，$xd|n\Leftrightarrow d|\dfrac{n}{x}$。</p><p>所以，我们枚举每一个 $x$，其实和枚举每一个 $d$ 其实是一样的，因为每个枚举到的 $(x,d)$ 在先枚举 $d$ 的时候都会枚举到！</p><p>那么，原式变为了：<br>$$<br>\sum_{x|n}f(x)\sum_{d|\frac{n}{x}}\mu(d)<br>$$<br>观察右边的 $\displaystyle \sum_{d|\frac{n}{x}}\mu(d)$，和上面我们得到的式子 $smu(n)$ 其实是一样的！</p><p>所以，只有在 $\dfrac{n}{x}=1$，即 $x=n$ 时后面才为 1，其余为 0。</p><p>那么，原式得证。</p><p><del>你以为就结束了吗？</del></p><p>还有一个式子：<br>$$<br>F(n)=\sum_{n|d}f(d)\Rightarrow f(n)=\sum_{n|d}\mu(\dfrac{d}{n})F(d)<br>$$<br>和上面的式子略微不同，但本质一样。</p><p>还是一波操作（中间步骤的推导留给读者 <del>逃</del>）：<br>$$<br>\sum_{n|d}\mu(\dfrac{n}{d})F(d)=\sum_{n|d}\mu(\dfrac{d}{n})\sum_{d|x}f(x)<br>$$<br>设 $t=\dfrac{d}{n}$，$y=\dfrac{x}{d}$，则：<br>$$<br>\sum_{t=1}\mu(t)\sum_{y=1}f(t * y * n)<br>$$<br>那么，我们在枚举 $t$ 再枚举 $y$ 的时候，统计答案为 $\mu(t) * f(t * y * n)$，我们也可以先枚举 $t * y$，在枚举 $t$，其实相当于枚举了 $t,y$。</p><p>所以，一波操作（设 $z=t * y$）：<br>$$<br>\sum_{z=1}f(z * n)\sum_{t|z}\mu(t)<br>$$<br>所以又看到后面的式子，实在是熟悉不过了。</p><p>于是 $z=1$ 时右边为 $1$。</p><p>所以就是 $f(n)$ 了。</p><h2 id="3-例题"><a href="#3-例题" class="headerlink" title="3. 例题"></a>3. 例题</h2><h4 id="T1：-HAOI-2011-Problem-b"><a href="#T1：-HAOI-2011-Problem-b" class="headerlink" title="T1：[HAOI 2011]Problem b"></a>T1：[HAOI 2011]Problem b</h4><p><a href="https://www.luogu.com.cn/problem/P2522">题目传送门 Luogu</a></p><p><a href="https://www.acwing.com/problem/content/2704/">题目传送门 AcWing</a></p><p>首先，看到 $x\in[a,b],y\in[c,d]$，可以想到二维前缀和（还是差分，记不清楚了 qwq</p><p>所以，假设 $F(a,b)$ 表示 $x\in[1,a],y\in[1,b]$ 满足 $\gcd(x,y)=k$ 的个数，可以得到：<br>$$<br>ans=F(b,d)-F(a-1,d)-F(b,c-1)+F(a-1,b-1)<br>$$<br>然后开始正题，求 $F(a,b)$。</p><p>又是一波操作：<br>$$<br>F(a,b)=\sum_{x=1}^{\frac{a}{k}}\sum_{y=1}^{\frac{b}{k}}[\gcd(x,y)=1]<br>$$<br>首先，$[\gcd(x,y)=1]$ 表示 $\gcd(x,y)=1$ 取值为 $1$，否则为 $0$。</p><p>那么，设 $m=\dfrac{a}{k},n=\dfrac{b}{k}$，于是就是：<br>$$<br>F(a,b)=\sum_{x=1}^m\sum_{y=1}^n[\gcd(x,y)=1]<br>$$<br>定义 $f(d)$ 为 $\sum_{x=1}^m\sum_{y=1}^n[\gcd(x,y)=d]$，$g(d)=\sum_{x=1}^m\sum_{y=1}^n[d|\gcd(x,y)]$。</p><p>所以 $F(a,b)=f(1)$，$g(x)=\lfloor\dfrac{m}{x}\rfloor\lfloor\dfrac{n}{x}\rfloor$。（直接取 $x$ 的倍数就是了</p><p>还有一个：<br>$$<br>g(x)=\sum_{x|d}f(d)<br>$$<br>意义很简单：$\gcd(a1,a2)$ 可以等于 $x,2x,…$，就是这个式子的意思。</p><p>根据套路：<br>$$<br>f(x)=\sum_{x|d}\mu(\dfrac{d}{x})g(d)<br>$$<br>所以，$f(1)=\sum_{d=1}^n\mu(d)g(d)$</p><p>直接求的话，大概也是能过的。</p><p>还有一些优化，比如整除分块，就是 $g(d)$ 相同的可以一起计算。</p><p>如果当前的值为 $a$，那么当前值为 $\dfrac{n}{a}$，那么最大的 $x$ 满足 $\dfrac{n}{x}=\dfrac{n}{a}$ 为 $x=\dfrac{n}{\frac{n}{a}}$。（证明略复杂，跳过</p><p>加入 $m$ 的话，满足 $\dfrac{n}{a}*\dfrac{m}{a}=\dfrac{n}{x}*\dfrac{n}{x}$ 的最大 $x$ 为 $\min(\dfrac{n}{\frac{n}{a}},\dfrac {m}{\frac{m}{a}})$。</p><p>时间复杂度：$O(\sqrt{n})$。</p><p>放个代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">calc</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a/=k,b/=k;</span><br><span class="line">    ll res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="built_in">min</span>(a,b);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> l=<span class="number">1</span>,r;l&lt;=n;l=r+<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        r=<span class="built_in">min</span>(n,<span class="built_in">min</span>(a/(a/l),b/(b/l)));</span><br><span class="line">        res+=(sum[r]-sum[l<span class="number">-1</span>])*(ll)(a/l)*(b/l);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T2：-SDOI-2015-约数个数和"><a href="#T2：-SDOI-2015-约数个数和" class="headerlink" title="T2：[SDOI 2015]约数个数和"></a>T2：[SDOI 2015]约数个数和</h4><p><a href="https://www.luogu.com.cn/problem/P3327">题目传送门 Luogu</a></p><p><a href="https://www.acwing.com/problem/content/1360/">题目传送门 AcWing</a></p><p><strong>前方高能！</strong></p><p>首先，得到结论：<br>$$<br>d(i*j)=\sum_{x|i}\sum_{y|j}[\gcd(x,y)=1]<br>$$<br>简要证明：</p><p>假设对于每一个质因数 $p$，$i$ 的次数为 $a$，$j$ 的次数为 $b$。</p><p>对于左边，显然 $p$ 的存在可以使答案乘上 $a+b+1$（可以选择 $0\sim a+b$ 次方）。</p><p>对于右边，可以有以下的方法：</p><ol><li>都选择 $0$ 次，贡献为 $1$。</li><li>如果 $i$ 选择 $0$ 次，那么 $j$ 可以选择 $1\sim b$，贡献为 $b$。</li><li>如果 $j$ 选择 $0$ 次，那么 $i$ 可以选择 $1\sim a$，贡献为 $a$。</li></ol><p>综上，$p$ 的存在使得答案乘上了 $a+b+1$。</p><p>既然对于每一个 $p$，左右相乘的数是相等的。</p><p>得证。</p><p>接下来，一波操作：<br>$$<br>ans=\sum_{i=1}^N\sum_{j=1}^M\sum_{x|i}\sum_{y|j}[\gcd(x,y)=1]<br>$$<br>根据上面的结论得到的。<br>$$<br>=\sum_{x=1}^N\sum_{y=1}^M[\gcd(x,y)=1]\lfloor\dfrac{N}{x}\rfloor\lfloor\dfrac{M}{y}\rfloor<br>$$<br>直接提出 $x,y$，枚举 $i,j$ 贡献其实就是 $\lfloor\dfrac{N}{x}\rfloor\lfloor\dfrac{M}{y}\rfloor$。</p><p>令 $f(d)=\sum_{x=1}^N\sum_{y=1}^M[\gcd(x,y)=1]\lfloor\dfrac{N}{x}\rfloor\lfloor\dfrac{M}{y}\rfloor,F(d)=\sum_{x=1} ^N\sum_{y=1}^M[d|\gcd(x,y)]\lfloor\dfrac{N}{x}\rfloor\lfloor\dfrac{M}{y}\rfloor$。</p><p>还可以根据套路推 $F$ 得到：<br>$$<br>F(d)=\sum_{k=1}^{\frac{N}{d}}\sum_{l=1}^{\frac{M}{d}}\lfloor\dfrac{N}{dk} \rfloor\lfloor\dfrac{M}{dl}\rfloor<br>$$<br>接着令 $N1=\dfrac{N}{d},M1=\dfrac{M}{d}$，则：<br>$$<br>F(d)=\sum_{k=1}^{N1}\sum_{l=1}^{M1}\lfloor\dfrac{N1}{k}\rfloor\lfloor\dfrac{M1}{l}\rfloor<br>$$<br>$g(n)=\sum_{k=1}^{N}\lfloor\dfrac{N}{k}\rfloor$ 是可以预处理的。对于每一个 $g(n)$，直接整除分块，复杂度 $O(n\sqrt{n})$。</p><p>可以得到：$F(d)=g(\dfrac{N}{d})g(\dfrac{M}{d})$</p><p>莫比乌斯的反演套路大都如此：构造出 $f,F$，引入 $\mu$ 来简化运算，$f(1)$ 一般为所求，$\mu$ 一般要预处理。</p><p>接着：<br>$$<br>ans=f(1)=\sum_{d=1}\mu(d)F(d)<br>$$<br>可以 $O(n)$ 求，但还不够优秀。</p><p>带入 $g$，即得：<br>$$<br>ans=\sum_{d=1}\mu(d)g(\dfrac{N}{d})g(\dfrac{M}{d})<br>$$<br>发现可以整除分块，单次复杂度为 $O(\sqrt{n})$，可以通过。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e4</span> + <span class="number">10</span>;</span><br><span class="line">ll g[N];</span><br><span class="line"><span class="keyword">int</span> prime[N], cnt, mu[N], n, m, s[N];</span><br><span class="line"><span class="keyword">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = N - <span class="number">1</span>;</span><br><span class="line">    mu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++ i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!st[i]) prime[cnt ++] = i, mu[i] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt &amp;&amp; prime[j] * i &lt;= n; ++ j)</span><br><span class="line">        &#123;</span><br><span class="line">            st[i * prime[j]] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % prime[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            mu[i * prime[j]] = -mu[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) s[i] = s[i - <span class="number">1</span>] + mu[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">1</span>; d &lt;= n; ++ d)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>, r; l &lt;= d; l = r + <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            r = d / (d / l);</span><br><span class="line">            g[d] += (r - l + <span class="number">1</span>) * (d / l);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="keyword">if</span> (n &gt; m) <span class="built_in">swap</span>(n, m);</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>, r; l &lt;= n; l = r + <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            r = <span class="built_in">min</span>(n / (n / l), m / (m / l));</span><br><span class="line">            ans += (s[r] - s[l - <span class="number">1</span>]) * g[n / l] * g[m / l];</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面给出几道题目与得到的公式，就不展开了。</p><h4 id="T3：P3312-SDOI2014-数表"><a href="#T3：P3312-SDOI2014-数表" class="headerlink" title="T3：P3312 [SDOI2014]数表"></a>T3：P3312 [SDOI2014]数表</h4><p><a href="https://www.luogu.com.cn/problem/P3312">题目传送门 Luogu</a><br>$$<br>\sum_{T=1}^n[\dfrac{n}{T}][\dfrac{m}{T}]\sum_{d|T}[g(d)\leq a]\mu(\dfrac{T}{d})d<br>$$</p><p>$g(d)$ 表示 $d$ 的约数和。</p><h4 id="T4：P3704-SDOI2017-数字表格"><a href="#T4：P3704-SDOI2017-数字表格" class="headerlink" title="T4：P3704 [SDOI2017]数字表格"></a>T4：P3704 [SDOI2017]数字表格</h4><p><a href="https://www.luogu.com.cn/problem/P3704">题目传送门 Luogu</a><br>$$<br>\prod_{T=1}^n(\prod_{d|t}f(d)^{\mu(\frac{T}{d})})^{^{\lfloor\frac{n}{T}\rfloor\lfloor\frac{m}{T}\rfloor}}<br>$$</p><h4 id="T5：P3768-简单的数学题"><a href="#T5：P3768-简单的数学题" class="headerlink" title="T5：P3768 简单的数学题"></a>T5：P3768 简单的数学题</h4><p><a href="https://www.luogu.com.cn/problem/P3768">题目传送门 Luogu</a><br>$$<br>\begin{aligned}\\ans &amp; =<br>\sum_{T=1}^nsum(\dfrac{n}{T})^2\times T^2\sum_{d|T}d\times\mu(\dfrac{T}{d})<br>\\ &amp; =\sum_{T=1}^n\sum(\dfrac{n}{T})^2\times T^2\varphi(T)<br>\end{aligned}<br>$$<br>后面使用杜教筛等。</p><p>化简为：<br>$$<br>\begin{aligned}<br>S(n) &amp;=\sum_{T=1}^nT^2\varphi(T) \\ &amp;=\sum_{i=1}^ni^3-\sum_{i=1}^ni^2S(\dfrac{n}{i})<br>\end{aligned}<br>$$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e7</span> + <span class="number">10</span>;</span><br><span class="line">ll Mod, sphi[N], n, inv2, inv6;</span><br><span class="line"><span class="keyword">int</span> prime[N], cnt, phi[N];</span><br><span class="line"><span class="keyword">bool</span> st[N];</span><br><span class="line">map &lt;ll, ll&gt; Sphi;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">phi[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; N; ++ i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!st[i]) prime[cnt ++] = i, phi[i] = i - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt &amp;&amp; i * prime[j] &lt; N; ++ j)</span><br><span class="line">&#123;</span><br><span class="line">st[i * prime[j]] = <span class="number">1</span>, phi[i * prime[j]] = phi[i] * phi[prime[j]];</span><br><span class="line"><span class="keyword">if</span> (i % prime[j] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">phi[i * prime[j]] = phi[i] * prime[j];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++ i) sphi[i] = (sphi[i - <span class="number">1</span>] + phi[i] * (ll)i % Mod * i % Mod) % Mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a, ll k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (k &amp; <span class="number">1</span>) res = res * a % Mod;</span><br><span class="line">a = a * a % Mod;</span><br><span class="line">k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">sum1</span><span class="params">(ll n)</span></span>&#123;<span class="keyword">return</span> (n % Mod) * ((n + <span class="number">1</span>) % Mod) % Mod * inv2 % Mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">sum2</span><span class="params">(ll n)</span></span>&#123;<span class="keyword">return</span> (n % Mod) * ((n + <span class="number">1</span>) % Mod) % Mod * ((<span class="number">2</span> * n + <span class="number">1</span>) % Mod) % Mod * inv6 % Mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">sum3</span><span class="params">(ll n)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">sum1</span>(n) * <span class="built_in">sum1</span>(n) % Mod;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">get_sphi</span><span class="params">(ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n &lt; N) <span class="keyword">return</span> sphi[n];</span><br><span class="line"><span class="keyword">if</span> (Sphi.<span class="built_in">find</span>(n) != Sphi.<span class="built_in">end</span>()) <span class="keyword">return</span> Sphi[n];</span><br><span class="line">ll ans = <span class="built_in">sum3</span>(n);</span><br><span class="line"><span class="keyword">for</span> (ll l = <span class="number">2</span>, r; l &lt;= n; l = r + <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">r = n / (n / l);</span><br><span class="line">ans = (-(<span class="built_in">sum2</span>(r) - <span class="built_in">sum2</span>(l - <span class="number">1</span>)) * <span class="built_in">get_sphi</span>(n / l) % Mod + ans + Mod) % Mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Sphi[n] = ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin &gt;&gt; Mod &gt;&gt; n;</span><br><span class="line">inv2 = <span class="built_in">qpow</span>(<span class="number">2</span>, Mod - <span class="number">2</span>), inv6 = <span class="built_in">qpow</span>(<span class="number">6</span>, Mod - <span class="number">2</span>);</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line">ll res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (ll l = <span class="number">1</span>, r; l &lt;= n; l = r + <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">r = n / (n / l);</span><br><span class="line">res = (res + <span class="built_in">sum1</span>(n / l) * <span class="built_in">sum1</span>(n / l) % Mod</span><br><span class="line">        * ((<span class="built_in">get_sphi</span>(r) - <span class="built_in">get_sphi</span>(l - <span class="number">1</span>) + Mod) % Mod) % Mod) % Mod;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;容斥原理的升级版。&lt;/p&gt;</summary>
    
    
    
    
    <category term="数论" scheme="https://mydcwfy.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
    <category term="莫比乌斯反演" scheme="https://mydcwfy.github.io/tags/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
    
  </entry>
  
</feed>
