<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>多项式汇总</title>
      <link href="/2021/12/12/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E6%B1%87%E6%80%BB/"/>
      <url>/2021/12/12/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<p>大杂烩。建议先学 FFT 和 NTT。</p><p>也可以来这里找代码。</p><p><strong>注意清空数组！</strong></p><p><strong>会不断更新。</strong></p><span id="more"></span><p>这里汇总了所有<del>我所学过的</del>多项式的板子。</p><p>既是存代码，也是简单的讲解。</p><p>首先甩一个 NTT 在这里。</p><p>前置知识：FFT。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a, ll k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (k &amp; <span class="number">1</span>) res = res * a % Mod;</span><br><span class="line">        a = a * a % Mod;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_rev</span><span class="params">(<span class="keyword">int</span> bit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; (<span class="number">1</span> &lt;&lt; bit); ++ i)</span><br><span class="line">        rev[i] = (rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (bit - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NTT</span><span class="params">(ll *a, <span class="keyword">int</span> bit, <span class="keyword">int</span> inv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">get_rev</span>(bit);</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">1</span> &lt;&lt; bit;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++ i)</span><br><span class="line">        <span class="keyword">if</span> (rev[i] &lt; i) <span class="built_in">swap</span>(a[rev[i]], a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> mid = <span class="number">1</span>; mid &lt; tot; mid &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ll ak = <span class="built_in">qpow</span>(<span class="number">3</span>, (Mod - <span class="number">1</span>) / (mid &lt;&lt; <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span> (inv == <span class="number">-1</span>) ak = <span class="built_in">qpow</span>(ak, Mod - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; i += (mid &lt;&lt; <span class="number">1</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            ll now = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; mid; ++ j, now = now * ak % Mod)</span><br><span class="line">            &#123;</span><br><span class="line">                ll x = a[i + j], y = a[i + j + mid] * now % Mod;</span><br><span class="line">                a[i + j] = (x + y) % Mod, a[i + j + mid] = (x - y + Mod) % Mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (inv == <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    ll Inv = <span class="built_in">qpow</span>(tot, Mod - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++ i) a[i] = a[i] * Inv % Mod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-多项式求逆"><a href="#1-多项式求逆" class="headerlink" title="1. 多项式求逆"></a>1. 多项式求逆</h2><p>可以考虑倍增。</p><p>默认 $\dfrac{n}{2}=\lfloor\dfrac{n+1}{2}\rfloor$</p><p>假设我们已经求出了 $h(x)\equiv f(x)^{-1}\pmod{x^{\frac{n}{2}}}$。</p><p>我们需要求 $g(x)\equiv f(x)^{-1}\pmod{x^n}$。</p><p>很明显，可以得到：$g(x)-h(x)\equiv 0\pmod {x^{\frac{n}{2} } }$。</p><p>平方一下，就是 $g^2(x)-2g(x)h(x)+h^2(x)\equiv 0\pmod {x^n}$。</p><p>有一个 $g^2(x)$，我们考虑搞掉一个，所以乘一个 $f(x)$，也就是 $g(x)-2h(x)+h^2(x)f(x)\equiv 0\pmod {x^n}$。</p><p>于是：$g(x)\equiv h(x)(2-h(x)f(x))\pmod {x^n}$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_ni</span><span class="params">(ll *a, ll *b, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        b[<span class="number">0</span>] = <span class="built_in">qpow</span>(a[<span class="number">0</span>], Mod - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> bit = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((<span class="number">1</span> &lt;&lt; bit) &lt; (len &lt;&lt; <span class="number">1</span>)) bit ++;</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">1</span> &lt;&lt; bit;</span><br><span class="line">    <span class="built_in">get_ni</span>(a, b, (len + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">static</span> ll c[N];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = (len + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>; i &lt; tot; ++ i) b[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++ i)</span><br><span class="line">        <span class="keyword">if</span> (i &lt; len) c[i] = a[i];</span><br><span class="line">        <span class="keyword">else</span> c[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">NTT</span>(c, bit, <span class="number">1</span>), <span class="built_in">NTT</span>(b, bit, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++ i)</span><br><span class="line">        b[i] = (<span class="number">2</span> - b[i] * c[i] % Mod + Mod) % Mod * b[i] % Mod;</span><br><span class="line">    <span class="built_in">NTT</span>(b, bit, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; ++ i) b[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-多项式-ln"><a href="#2-多项式-ln" class="headerlink" title="2. 多项式 ln"></a>2. 多项式 ln</h2><p>考虑：$g(x)=\ln f(x)$。</p><p>同时求导：$g’(x)=\ln f(x)$。</p><p>看做复合函数，$h(x)=\ln x$，那么 $\ln f(x) = h(f(x)) = \dfrac{1}{f(x)} \cdot f’(x)$。</p><p>然后又有求导和积分公式：<br>$$<br>\begin{aligned}<br>x^{a’}&amp;=ax^{a-1}\<br>\int x^a dx &amp;= \dfrac{1}{a+1}x^{a+1}<br>\end{aligned}<br>$$<br>顺便把求导的和积分的放进来。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_dao</span><span class="params">(ll *a, ll *b, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; ++ i) b[i - <span class="number">1</span>] = a[i] * i % Mod;</span><br><span class="line">    b[len - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_ji</span><span class="params">(ll *a, ll *b, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; ++ i) b[i] = a[i - <span class="number">1</span>] * <span class="built_in">qpow</span>(i, Mod - <span class="number">2</span>) % Mod;</span><br><span class="line">    b[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_ln</span><span class="params">(ll *a, ll *b, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ll c[N], d[N];</span><br><span class="line">    <span class="built_in">get_dao</span>(a, c, len), <span class="built_in">get_ni</span>(a, d, len);</span><br><span class="line">    <span class="keyword">int</span> bit = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((<span class="number">1</span> &lt;&lt; bit) &lt; (len &lt;&lt; <span class="number">1</span>)) bit ++;</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">1</span> &lt;&lt; bit;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; ++ i) c[i] = d[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">NTT</span>(c, bit, <span class="number">1</span>), <span class="built_in">NTT</span>(d, bit, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++ i) c[i] = c[i] * d[i] % Mod;</span><br><span class="line">    <span class="built_in">NTT</span>(c, bit, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; ++ i) c[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">get_ji</span>(c, b, len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; ++ i) b[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-多项式-exp"><a href="#3-多项式-exp" class="headerlink" title="3. 多项式 exp"></a>3. 多项式 exp</h2><p>这个需要牛顿迭代。</p><p>假设我们要找到一个函数的零点，我们当前找到的值为 $x_0$，怎样才能逼近更优解呢？</p><p>画一个图。</p><img src="/2021/12/12/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E6%B1%87%E6%80%BB/%E7%89%9B%E9%A1%BF%E8%BF%AD%E4%BB%A3%E5%9B%BE.png" class=""><p>看到上面的函数图像，我们发现，可以直接对该点进行求导，然后交到 $x$ 轴的位置，会更靠近答案。</p><p>于是我们可以得到式子：<br>$$<br>x_1 = x_0 - \dfrac{y_0}{f’(x_0)}<br>$$<br>精度就可以不断提高。</p><p>回到本题，<del>经过我不会的证明</del>，可以得到，单次牛顿迭代后，答案可以由 $\pmod{x ^ { \frac{n} {2} } }$ 变为 $\pmod{ x^n }$。</p><p>那么，假设我们已经确定了 $h(x) = e ^ {f(x)} \pmod {x ^ {\frac {n}{2} } }$，要求 $g(x) = e ^{f(x)} \pmod {x ^ n}$。</p><p>我们考虑构造 $A(x) = \ln g(x) - f(x) = 0$，求 $g(x)$，现在我们已经找到了一个近似的 $h(x)$。</p><p>带入上面的式子，就是：<br>$$<br>\begin{aligned}<br>g(x) &amp;\equiv h(x) - \dfrac{A(h(x))} {A’(h(x))}<br>\\ &amp;\equiv h(x) - A(h(x))h(x)<br>\\ &amp;\equiv h(x) - (\ln h(x) - f(x))h(x)<br>\\ &amp;\equiv h(x)(1 - \ln h(x) + f(x))<br>\\ &amp;\pmod {x^n}<br>\end{aligned}<br>$$<br>直接 NTT 就可以了。注意保证 $f(0) = 0$，也就是常数项为 1。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_exp</span><span class="params">(ll *a, ll *b, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        b[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> bit = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((<span class="number">1</span> &lt;&lt; bit) &lt; (len &lt;&lt; <span class="number">1</span>)) bit ++;</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">1</span> &lt;&lt; bit;</span><br><span class="line">    <span class="built_in">get_exp</span>(a, b, (len + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">static</span> ll d[N];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++ i) d[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">get_ln</span>(b, d, len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++ i) d[i] = (a[i] - d[i] + Mod) % Mod;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; ++ i) d[i] = <span class="number">0</span>;</span><br><span class="line">    d[<span class="number">0</span>] ++;</span><br><span class="line">    <span class="built_in">NTT</span>(d, bit, <span class="number">1</span>), <span class="built_in">NTT</span>(b, bit, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++ i)</span><br><span class="line">        b[i] = b[i] * d[i] % Mod;</span><br><span class="line">    <span class="built_in">NTT</span>(b, bit, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; ++ i) b[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-多项式快速幂"><a href="#4-多项式快速幂" class="headerlink" title="4. 多项式快速幂"></a>4. 多项式快速幂</h2><p>比较简单。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 多项式 </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>斯特林数</title>
      <link href="/2021/12/12/%E6%96%AF%E7%89%B9%E6%9E%97%E6%95%B0/"/>
      <url>/2021/12/12/%E6%96%AF%E7%89%B9%E6%9E%97%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>后面比较难理解，但是前面比较简单。</p><span id="more"></span><h2 id="1-第一类斯特林数"><a href="#1-第一类斯特林数" class="headerlink" title="1. 第一类斯特林数"></a>1. 第一类斯特林数</h2><h3 id="一）定义"><a href="#一）定义" class="headerlink" title="一）定义"></a>一）定义</h3><p>是指将 $n$ 个不同的数划分成 $k$ 个圆排列的方案数，记作 $s(n,k)$ 或者 $n\brack m$。</p><h3 id="二）求法"><a href="#二）求法" class="headerlink" title="二）求法"></a>二）求法</h3><p>使用递推的方法。</p><p>第一种情况是 $n$ 专门放入 1 个圆排列，剩下的 $n-1$ 放入剩下的 $k-1$ 的圆排列中，这一类答案的贡献是 $s(n-1,k-1)$。</p><p>第二种情况是 $n$ 放入已有的 $k$ 个圆排列中。因为每一个数是不同的，所以可以发现，在一个圆排列中，可以放的位置（且不重复）恰好等于当前圆排列的大小。前面放的 $n-1$ 个数，所以有 $n-1$ 种方法，贡献为 $(n-1)\times s(n-1,k)$。</p><p>那么，我们就可以得到递推公式：</p><p>$$<br>s(n,k)=s(n-1,k-1)+(n-1)\times s(n-1,k)<br>$$</p><h3 id="三）性质"><a href="#三）性质" class="headerlink" title="三）性质"></a>三）性质</h3><ol><li><p>$s(n,n)=1$：显然，每一个数放一个圆排列。</p></li><li><p>$s(n,1)=(n-1)!$：首先，不考虑旋转的话，就是 $n!$，但是每一种会对应 $n$ 种相同的，所以就是 $(n-1)!$。</p></li><li><p>$s(n, n-2) = 2\binom{n}{3}+3\binom{n}{4}$：其实都是一些简单的推导了。此处略去。</p></li><li><p>$\sum_{k=0}^ns(n,k)=n!$：这个需要用到第一类斯特林数的另一种表示方法，我们等一下再讲。</p></li></ol><p>首先，我们定义一个 $x^{\bar n}=x(x+1)…(x+n-1)$，也就是上升幂。</p><p><strong>定理</strong>：$x^{\bar{n}}=\sum_{k=0}^ns(n,k)x^k$。</p><p>证明：使用递推的方法，我们假设最后一个乘的是 $x$ 而不是 $n-1$，那么，对于 $x^k$ 的贡献就是剩下的 $x^{\overline{n-1}}$ 在 $x^{k-1}$ 的贡献。</p><p>如果最后乘的是 $n-1$，那么对于 $x^k$ 的贡献就是 $x^{\overline{n-1}}$ 在 $x^k$ 的贡献再乘上 $n-1$。</p><p>综上，我们发现和 $s(n,k)$ 的递推公式一模一样，所以定理得证。</p><p>接着，利用定理，我们令 $x=1$，那么可以化为：</p><p>$$<br>n!=\sum_{k=0}^ns(n,k)<br>$$</p><h2 id="2-第二类斯特林数"><a href="#2-第二类斯特林数" class="headerlink" title="2. 第二类斯特林数"></a>2. 第二类斯特林数</h2><h3 id="一）定义-1"><a href="#一）定义-1" class="headerlink" title="一）定义"></a>一）定义</h3><p>是指将 $n$ 个不同的数划分 $k$ 个子集的方案数，记为 $S(n,k)$ 或 $n\brace m$。</p><h3 id="二）求法-1"><a href="#二）求法-1" class="headerlink" title="二）求法"></a>二）求法</h3><p>如果我们单独将 $n$ 放入一个集合，就是 $S(n-1,k-1)$。</p><p>如果我们将 $n$ 归入前面的 $k$ 个集合，就是 $k\times S(n-1,k)$。</p><p>于是，递推式就是：</p><p>$$<br>S(n,k)=S(n-1,k-1)+k\times S(n-1,k)<br>$$</p><h2 id="3-例题"><a href="#3-例题" class="headerlink" title="3. 例题"></a>3. 例题</h2><h4 id="T1：-FJOI2016-建筑师"><a href="#T1：-FJOI2016-建筑师" class="headerlink" title="T1：[FJOI2016]建筑师"></a>T1：[FJOI2016]建筑师</h4><p><a href="https://www.luogu.com.cn/problem/P4609">题目传送门 Luogu</a></p><p>首先，一个显然的东西是：最高的肯定不会被挡住。</p><p>所以，我们可以将 $n$ 的位置枚举，然后左边可以看到 $A-1$ 个，右边可以看到 $B-1$ 个（均没有计算 $n$ 的贡献）。</p><p>然后，我们可以将这些可以看到的建筑以及它后面被挡住的分为一组。</p><p>可以在这一组中，因为最高的一定放在最前面。如果接在一起，可以看做一个圆排列，并且贡献就是 $1$。</p><p>这不就是第一类斯特林数吗！</p><p>我们就是将 $n-1$ 个放入 $A+B-2$ 个圆排列，贡献就是 ${n-1}\brack{A+B-2}$。</p><p>然后，我们要选择 $A-1$ 个放在前面，于是就是 ${A+B-2}\choose {A-1}$。</p><p>答案就是<br>$$<br>{ {n - 1} \brack {A + B - 2} } \times { { A + B - 2} \choose {A - 1} }<br>$$</p><p>直接递推，时间复杂度为 $O(nk)$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e4</span> + <span class="number">10</span>, K = <span class="number">205</span>, Mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">ll s[N][K], C[K][K];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++ i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; K; ++ j)</span><br><span class="line">            s[i][j] = (s[i - <span class="number">1</span>][j - <span class="number">1</span>] + (i - <span class="number">1</span>) * s[i - <span class="number">1</span>][j]) % Mod;</span><br><span class="line">    C[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; K; ++ i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; K; ++ j)</span><br><span class="line">            <span class="keyword">if</span> (!j) C[i][j] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> C[i][j] = (C[i - <span class="number">1</span>][j] + C[i - <span class="number">1</span>][j - <span class="number">1</span>]) % Mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="comment">// cout &lt;&lt; C[5][3] &lt;&lt; &#x27; &#x27; &lt;&lt; s[4][1] &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">int</span> t, n, a, b;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;n, &amp;a, &amp;b);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, s[n - <span class="number">1</span>][a + b - <span class="number">2</span>] * C[a + b - <span class="number">2</span>][a - <span class="number">1</span>] % Mod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有 Luogu 上的几道神仙题（一紫三黑），我们简单的讲一下。</p><h4 id="T1：第二类斯特林数-·-行"><a href="#T1：第二类斯特林数-·-行" class="headerlink" title="T1：第二类斯特林数 · 行"></a>T1：第二类斯特林数 · 行</h4><p><a href="https://www.luogu.com.cn/problem/P5395">题目传送门 Luogu</a></p><p>我们可以这样考虑：<br>$$<br>{n \brace m} = \sum_{i=0}^m\dfrac{(-1)^i}{i!}\cdot \dfrac{(m-i)^n}{(m-i)!}<br>$$<br>发现可以先构造左边的 $f(x)=\sum_{i=0}^n \dfrac{(-1)^i}{i!},g(x)=\sum_{i=0}^n \dfrac{i^n}{i!}$，直接 NTT 卷积即可，就可以得到每一项 $h_m$ 所对应的项。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++ i) a[i] = <span class="built_in">qpow</span>(i, n) * infact[i] % Mod;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++ i) b[i] = (i &amp; <span class="number">1</span> ? Mod - infact[i] : infact[i]);</span><br><span class="line">    <span class="keyword">int</span> bit = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span> &lt;&lt; bit &lt; (n &lt;&lt; <span class="number">1</span>)) bit ++;</span><br><span class="line">    <span class="built_in">NTT</span>(a, bit, <span class="number">1</span>), <span class="built_in">NTT</span>(b, bit, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; bit); ++ i) a[i] = a[i] * b[i] % Mod;</span><br><span class="line">    <span class="built_in">NTT</span>(a, bit, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++ i) <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>, a[i]);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T2：第二类斯特林数-·-列"><a href="#T2：第二类斯特林数-·-列" class="headerlink" title="T2：第二类斯特林数 · 列"></a>T2：第二类斯特林数 · 列</h4><p><a href="https://www.luogu.com.cn/problem/P5396">题目传送门 Luogu</a></p><p>直接考虑指数型生成函数。</p><p>先看做 $n$ 个元素是相同的，$m$ 个盒子是不同的。</p><p>如果只有一个集合，用 $x^n$ 的系数表示方案数，那么就是：<br>$$<br>f(x)=\sum_{i=1}\dfrac{x^i}{i!}<br>$$<br>（注意指数型生成函数本身就要除以 $i!$，才能得到系数）</p><p>可以用 Taylor 展开式得到：$f(x)=e^x-1$（因为不是从 $i=0$ 开始的）。</p><p>那么，有 $m$ 个集合，就是 $g(x)=f(x)^k$，得到的系数再乘以一个 $i!$ 再除以 $m!$ 就可以得到答案了。</p><p>快速幂直接是 $g(x)=e^\left(k\ln f(x) \right)$。多项式 $\ln,\exp$ 结束了。注意第一项是 0，要整体向右平移 1 个单位，最后向左平移 $k$ 个单位。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">int</span> n, k;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    n ++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++ i) f[i] = infact[i + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">static</span> ll c[N];</span><br><span class="line">    <span class="built_in">get_ln</span>(a, c, len);</span><br><span class="line">    <span class="keyword">int</span> bit = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((<span class="number">1</span> &lt;&lt; bit) &lt; (len &lt;&lt; <span class="number">1</span>)) bit ++;</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">1</span> &lt;&lt; bit;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++ i) c[i] = c[i] * k % Mod;</span><br><span class="line">    <span class="built_in">get_exp</span>(c, b, len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= k; -- i) g[i] = g[i - k];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++ i) g[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>, g[i] * fact[i] % Mod * infact[k] % Mod);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T3：第一类斯特林数-·-行"><a href="#T3：第一类斯特林数-·-行" class="headerlink" title="T3：第一类斯特林数 · 行"></a>T3：第一类斯特林数 · 行</h4><p><a href="https://www.luogu.com.cn/problem/P5408">题目传送门 Luogu</a></p><p>首先，<del>由题解</del>可以得到：<br>$$<br>x^{\overline n} = \sum_{i=0}^{n}{n \brack i}x^i<br>$$<br>题目转化为求 $x^{\overline n}$ 的系数。</p><p>考虑倍增的算法。</p><p>已经得到了 $f(x)$，求 $f(x+c)$。</p><p>二项式定理就可以了。<br>$$<br>\begin{aligned}<br>f(x+c)&amp;=\sum_{i=0}^n[x^i]f(x)\sum_{j=0}^i {i \choose j}x^j c^{i-j} \<br>&amp;=\sum_{i=0}^n[x^i]f(x)\sum_{j=0}^i \dfrac{i!}{j!\cdot (i-j)!} x^j c^{i-j}\<br>&amp;=\sum_{j=0}^n \dfrac{x^j}{j!}\cdot \sum_{i=j}^n\dfrac{c^{i-j}}{(i-j)!}[x^i]f(x) i!\<br>\end{aligned}<br>$$<br>很明显可以化为两个式子：$g(x)=\sum_{i=0}^n \dfrac{c^i}{i!}x^i,h(x)=[x^i]f(x)i!x^i$，发现就是次数相减。</p><p>将 $h(x)$ 翻转为 $[x^i]f(x)i! x^{n-i}$，那么就是次数相加了，变为 NTT 就可以了。</p><p>回归本题。<br>$$<br>x^{\overline {2n}} = x^{\overline n}\cdot (x+n)^{\overline{n}}<br>$$<br>先将 $x^\overline n$ 求出来，然后上面的式子（可以叫多项式平移）推出 $(x+n)^\overline n$，NTT 一下就是了。</p><p>注意 $n$ 为奇数的时候，可以直接暴力求 $x^\overline {n-1}\cdot (x+n)$ 即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_sti</span><span class="params">(<span class="keyword">int</span> n, ll *a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n &lt; <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> ll c[N], d[N], t[N];</span><br><span class="line"><span class="keyword">if</span> (n &amp; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">get_sti</span>(n - <span class="number">1</span>, a);</span><br><span class="line">c[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) c[i + <span class="number">1</span>] = a[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) c[i] = (c[i] + a[i] * (n - <span class="number">1</span>) % Mod) % Mod;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++ i) a[i] = c[i];</span><br><span class="line"><span class="comment">// cout &lt;&lt; n &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">// for (int i = 0; i &lt;= n; ++ i) cout &lt;&lt; a[i] &lt;&lt; &#x27; &#x27;;</span></span><br><span class="line"><span class="comment">// puts(&quot;&quot;);</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">get_sti</span>(n &gt;&gt; <span class="number">1</span>, a);</span><br><span class="line"><span class="keyword">int</span> m = n &gt;&gt; <span class="number">1</span>, bit = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((<span class="number">1</span> &lt;&lt; bit) &lt; n + <span class="number">1</span>) bit ++;</span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">1</span> &lt;&lt; bit;</span><br><span class="line">ll now = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; ++ i) c[m - i] = a[i] * fact[i] % Mod;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; ++ i, now = now * m % Mod) d[i] = now * infact[i] % Mod;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = m + <span class="number">1</span>; i &lt; tot; ++ i) c[i] = d[i] = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// for (int i = 0; i &lt;= m; ++ i) cout &lt;&lt; c[i] &lt;&lt; &quot; \n&quot;[i == m];</span></span><br><span class="line"><span class="comment">// for (int i = 0; i &lt;= m; ++ i) cout &lt;&lt; d[i] &lt;&lt; &quot; \n&quot;[i == m];</span></span><br><span class="line"><span class="built_in">NTT</span>(c, bit, <span class="number">1</span>), <span class="built_in">NTT</span>(d, bit, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++ i) c[i] = c[i] * d[i] % Mod;</span><br><span class="line"><span class="built_in">NTT</span>(c, bit, <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; ++ i) t[i] = c[m - i] * infact[i] % Mod;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = m + <span class="number">1</span>; i &lt; tot; ++ i) t[i] = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// for (int i = 0; i &lt;= m; ++ i) cout &lt;&lt; t[i] &lt;&lt; &quot; \n&quot;[i == m];</span></span><br><span class="line"><span class="built_in">NTT</span>(a, bit, <span class="number">1</span>), <span class="built_in">NTT</span>(t, bit, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++ i) a[i] = a[i] * t[i] % Mod;</span><br><span class="line"><span class="built_in">NTT</span>(a, bit, <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n + <span class="number">1</span>; i &lt; tot; ++ i) a[i] = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// cout &lt;&lt; n &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">// for (int i = 0; i &lt;= n; ++ i) cout &lt;&lt; a[i] &lt;&lt; &#x27; &#x27;;</span></span><br><span class="line"><span class="comment">// puts(&quot;&quot;);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T4：第一类斯特林数-·-列"><a href="#T4：第一类斯特林数-·-列" class="headerlink" title="T4：第一类斯特林数 · 列"></a>T4：第一类斯特林数 · 列</h4><p><a href="https://www.luogu.com.cn/problem/P5409">题目传送门 Luogu</a></p><p>和 T2 差不多。</p><p>考虑只有一个集合的时候，就是：<br>$$<br>f(x)=\sum_{i=1}(i-1)!\dfrac{x^i}{i!}<br>$$<br>那么答案就是 $g(x) = f(x)^m$，最后答案乘上 $\dfrac{i!}{m!}$ 就可以了。</p><p>仍然注意第一项为 $0$，所以要先右移一位，做完后，再左移 $m$ 位。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    n ++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++ i) a[i] = <span class="built_in">qpow</span>(i + <span class="number">1</span>, Mod - <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">get_qpow</span>(a, b, n - <span class="number">1</span>, k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= k; -- i) b[i] = b[i - k];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++ i) b[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++ i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>, b[i] * infact[k] % Mod * fact[i] % Mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 多项式 </tag>
            
            <tag> 数论 </tag>
            
            <tag> 斯特林数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOIp2021 游记</title>
      <link href="/2021/12/11/NOIp2021-%E6%B8%B8%E8%AE%B0/"/>
      <url>/2021/12/11/NOIp2021-%E6%B8%B8%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>可还行吧。</p><span id="more"></span><p>以考试当天（2021-11-20）为 Day 0。</p><h2 id="Day"><a href="#Day" class="headerlink" title="Day -?"></a>Day -?</h2><p>记录两次机房的对话。</p><hr><p>我：”又在卷网络流！怎么可能考得到嘛。“</p><p>机房大佬：”CSP-S 才考了，肯定是在考纲范围内啊。已经是废物了，还不快复习网络流。”</p><p>我（表示不信）：“怎么可能？才考了，怎么可能还考得到？”</p><hr><p>我：“模拟退火都要学！啥分都骗不到，估计和暴力差不多。”</p><p>机房大佬：“骗分的东西，还是要多学的。”</p><p>我：“骗分的东西，考试的时候又用不到，还学这么高深的算法。这么久都没考了，不可能考啊”。</p><hr><p>事实证明，还是不能随便押题啊。模拟退火就考到了……</p><p>考前和省外的联测，天天被吊打，怎么办啊……</p><p>已经停了 whk 专心搞竞赛了，但是感觉没有很大的提升，倒是身旁的大佬多了起来。不知道更卷的地方是什么样呢，反正已经比我强多了。</p><h2 id="Day-1"><a href="#Day-1" class="headerlink" title="Day -1"></a>Day -1</h2><p>本身根据机房习俗，应该是 <code>考前 generals 大赛</code>，但是由于之前机房发生过事故（具体什么就略去了），所以不敢参加。</p><p>倒是解决了一个遗留问题：（在 CSP-S 当天早上写的 Treap 60 pts 那个）在 NOIP 前一天解决了！简直是 rp ++！</p><p>又 A 了一个黑题（CF 的虚高黑题），考前心态还是挺不错的。</p><p>晚上同寝室的还比较照顾我，本身应该说话到 11:00 的，很早（10：30 之前）就都睡了。</p><p>我却翻来覆去，一直睡不着，不知道明天如果考挂了，自己的前途将会是如何。</p><p>但不管怎样，考试还是得来临，我迷迷糊糊之中还是睡着了。</p><h2 id="Day-0"><a href="#Day-0" class="headerlink" title="Day 0"></a>Day 0</h2><p>早上 8:00 到考场，发现已经挤满了人（本身考点人就不多，基本都在外面）。</p><p>赶忙进去，开了虚拟机，开始敲模板，感觉键盘比较拙劣，平均 3 个字符就有一个吃掉了，只要集中在 <code>s,j,(</code> 这些字符，很难打。<code>(</code> 最烦，我又开了 <code>-Wall</code> 的，很容易打掉括号。</p><p>几分钟码完了模板，开始呆坐。只能看到标题，也就只是复制了几遍模板，放在那里，命好名，啥也不能干了。</p><p>8:22 发了密码，赶忙翻到 T1，但是刚翻到老师就说不准动键盘，于是只能盯着 T1 看。但是旁边的人一直在动鼠标，老师也没有管（大草</p><p>8:30：正式开始！</p><p>看了遍题，没什么思路（其实是没认真看）。</p><p>感觉第一题是一个签到的题目，虽然是 $10^7$，埃式筛法是 $O(n\ln n)$，但是不是每一个数都要筛一遍，所以赶忙码了一个，测速只需要 0.3s，所以 20 min 就做完了签到题。</p><p>8:50 左右开第二题。第二题似乎是一个神仙 DP，可以顺序枚举每一个数被取的次数，主要是进位十分烦人。考虑可以用一个状态存下来向前的进位，发现最多只是 $n$ 的级别。</p><p>中间算错了几次复杂度，一直算的都是 $O(n^3m)$（因为状态个数就是 $O(n^3m)$），码了一半，发现还需要一个 $n$ 枚举每一个数枚举的次数，复杂度升到 $O(n^4m)$，计算器一算，$3\times10^8$，但一想到有很多状态不存在，直接跳过就好，所以不太关心。</p><p>写了 25min 左右，差不多 9:40，调还算顺利，调了一会就出来了，给的样例又不是大样例（觉得是大样例的站出来！），没感觉到什么就对了。</p><p>9:55 左右看第三题，感觉是一个神仙题，虽然是方差知道怎么求，$=nS2-S1^2$，但是啥性质都推不出来了。第四题题面又臭又长，但是又不得不看，有些搞心态。</p><p>又回来推第三题，想了半个小时才发现可以差分，就是邻项交换。似乎可以暴力枚举的，手写了一个暴力观察性质。</p><p>发现了应该单谷，但是想了几个贪心都是错的，不知道怎么回事。后来才发现贪心就是错的。</p><p>这时已经 11:30 了，只好放弃 T3，马上去写 T4，发现只有直行的可以维护每一行列的覆盖情况，发现可以倒序变成加点的形式。</p><p>但是似乎极其难写，只写了个暴力，30 min 写完跑路。</p><p>又倒过来看 T3，已经 12:10 了，感觉可以区间 DP 的样子，但是方差的公式实在用差分的形式太难变形了，只好放弃。</p><p>12:30 的时候，突然灵光一闪：我的贪心答案和正确答案差不了多少，可不可以通过随机交换的方式来得到更优解呢？</p><p>于是我想到了模拟退火（大草</p><p>从来没写过模拟退火，这次在 NOIP 考场上算是第一次写。</p><p>我看过书上的解释，但是当时没有给代码，心里还是没底的。</p><p>不过模拟退火还好写，10 min 就写完了。</p><p>不过死活过不了大样例，答案比最开始的贪心答案还大一倍（这里说一说我的神奇模拟退火（赛后知晓）：我中间有判断，如果 <code>time&gt;0.9</code> 就直接退出；但是我有没有全局变量来维护走过的最佳答案），不免极慌。</p><p>一阵魔改之后，过掉了样例 3，但样例 4 实在是过不了了，此时已经 12:55 了。</p><p>我不知道应该怎样改才是合适的，但是最后时分，我将多次退火改为了一次退火，精度调的极高：<code>for (double t = 1e9; t &gt; 1e-7; t *= 0.9999997)</code>，没时间测样例的，我赶忙将文件看了一下，没有多余输出，都有 <code>freopen</code>。</p><p>检查完后，看到 12:59:30 了，本身想测 T3 大样例的，也只好罢休了。</p><blockquote><p>考试结束，不允许再动键盘鼠标了，迅速离开。</p></blockquote><p>寂寞的走出考场，交流了一下，发现许多人没有写出 T2，但是都写出了 T3 的模拟退火。</p><p>哎，要是我学了模拟退火该多好啊！</p><p>但是，过去的已经过去了。</p><p>机房大佬说，模拟退火应该有 $40\sim56pts$，但是我的假的模拟退火，差不多有个 $16pts$ 差不多了。</p><p>仔细算了一下：$100+100+[0\sim 20]+[32\sim48]=[232\sim268]$ 的成绩了吧。</p><p>看到去年的一等奖线都是 100+ 不少，想到万一 T2 挂了肯定就上不了一等奖线了。</p><p>但是估计在全省大概就是 $rk25\sim40$ 吧，可能又是省队三倍线上不了了吧。</p><p>不管了，休息了两天，又要回归 whk 了。</p><h2 id="Day-1-1"><a href="#Day-1-1" class="headerlink" title="Day 1"></a>Day 1</h2><p>还没时间写，不过已经有时间看别人的博客了。</p><p>发现大家似乎都是 $200pts$ 左右吧，心态稳了一些。</p><p>代码发下来了，但是不敢在 Luogu 上测，就连 xtl 都不敢看。</p><p>又浑浑噩噩过了一天。</p><h2 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h2><p>还是看到了 xtl 的成绩，又到 Luogu 上测了一下。</p><p>发现 T2 挂了 $15 pts$，T4 由于多组询问全部都清空，直接导致只有 $24 pts$。</p><p>不过可喜可贺的是，我的模拟退火竟然写对了，再加上推出了差分单谷的性质，直接得到了 88 pts！</p><p>Luogu 评测：$100+85+88+24=297$，xtl $301$。据说可以进 $rk15$。</p><p>等 CCF 的成绩吧。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这次考试，主要是策略相对正确，但是有很多细节地方应该注意，比如神仙挂分：T2 现在都不知道怎么挂的（求助，14-16 全 WA），T4 全部清空导致时间复杂度卡满了，只有 $24 pts$。</p><p>其实可以 $100+100+88+44=332$ 的，似乎轻松进 $rk10$ 了。</p><p>过去的已经过去了，还是向下一站进发吧！</p><p>2022 联合省选加油！</p><p><strong>upd on 2021-11-29：</strong> CCF T3 送了我 96 pts，看到了一些希望。</p><p>实际分数：$100+85+96+24=305$。</p><p>（另外，看到了 T2 的错误了，我在判断条件的时候，判断本位的时候写错了。</p><pre><code class="cpp">for (int i = 1; i &lt;= m; ++ i)    &#123;        for (int j = 0; j &lt; N; ++ j)            for (int k = 0; k &lt;= K; ++ k)                for (int sta = 0; sta &lt; 18; ++ sta)                    f[i &amp; 1][j][k][sta] = 0;        for (int j = 0; j &lt;= n; ++ j)            for (int k = 0; k &lt;= K; ++ k)                for (int sta = 0; sta &lt; 16; ++ sta)                &#123;                    if (!f[(i - 1) &amp; 1][j][k][sta]) continue;                    for (int nowj = 0; nowj &lt;= n - j; ++ nowj)                        if (k + ((sta + j) &amp; 1) &lt;= K)// 这里，本身应该是 k + ((sta + nowj) &amp; 1) &lt;= K                            f[i &amp; 1][j + nowj][k + ((sta + nowj) &amp; 1)][(sta + nowj) &gt;&gt; 1] =                             (f[i &amp; 1][j + nowj][k + ((sta + nowj) &amp; 1)][(sta + nowj) &gt;&gt; 1] +                            f[(i - 1) &amp; 1][j][k][sta] * v[i][nowj] % Mod * C[j + nowj][nowj] % Mod) % Mod;                &#125;    &#125;</code></pre>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
