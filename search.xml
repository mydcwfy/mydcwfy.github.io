<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>后缀自动机（SAM）总结</title>
      <link href="/2021/12/13/%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA%EF%BC%88SAM%EF%BC%89%E6%80%BB%E7%BB%93/"/>
      <url>/2021/12/13/%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA%EF%BC%88SAM%EF%BC%89%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>自认为写得还行。</p><span id="more"></span><h1 id="后缀自动机（SAM）总结"><a href="#后缀自动机（SAM）总结" class="headerlink" title="后缀自动机（SAM）总结"></a>后缀自动机（SAM）总结</h1><h3 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h3><p>本文不比前面的学习笔记 <a href="https://www.luogu.com.cn/blog/mydcwfy-342891/suffix-automation">后缀自动机笔记</a>，这篇文章大概能保证你能理解。</p><p>本文同样不会给出证明，但是会亲近读者，尽可能让读者看懂。</p><h3 id="1-职能"><a href="#1-职能" class="headerlink" title="1. 职能"></a>1. 职能</h3><p>这个就是一个可以快速查找一个字符串的子串，1 号点是根节点，走 1 号点可以走到所有的子串。</p><p>预处理和寻找都是线性 $O(n)$ 的。</p><h3 id="2-前置知识"><a href="#2-前置知识" class="headerlink" title="2. 前置知识"></a>2. 前置知识</h3><p>$\text{endpos}$ 的一些基本定义和性质。</p><p>顾名思义，$\text{endpos}$ 对于字符串中的一个子串而定义，是指所有出现的地方的最后一个字符的位置。</p><p>（可能有些绕，看一下下面的解释</p><p>首先，我们定义，$\text{endpos}$ 相同的作为一个等价类，可以看做同一个状态，对应在 SAM 中是同一个结点。</p><p>比如，我们还是来看一个实例 $\texttt{abcbc}$：</p><ul><li>${\texttt{abcbc},\texttt{bcbc},\texttt{cbc} }$ 的 $\text{endpos}$ 都是 ${5}$。</li><li>${\texttt{bc},\texttt{c} }$ 的 $\text{endpos}$ 都是 ${3,5}$。</li></ul><p>当然没有列举完，读者可以自己推一下（？</p><p>可以发现，$\text{endpos}$ 有一个性质，就是如果 $\text{endpos}$ 相同的，一定是长度递减的字符串。</p><p>还是看上面的实例：</p><ul><li>${\texttt{abcbc},\texttt{bcbc},\texttt{cbc} }$ 是长度递减的字符串，且后面一个是前面一个的后缀。</li><li>${\texttt{bc},\texttt{c} }$ 是长度递减的字符串，且后面一个是前面一个的后缀。</li></ul><p>现在，大概理解了 $\text{endpos}$ 的基本性质了吧。</p><h3 id="3-SAM-的构造"><a href="#3-SAM-的构造" class="headerlink" title="3. SAM 的构造"></a>3. SAM 的构造</h3><p>这里我们先贴代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> len, fa;</span><br><span class="line">    <span class="keyword">int</span> ch[<span class="number">26</span>];</span><br><span class="line">&#125;tr[N];</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">1</span>, tot = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> str[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">extend</span><span class="params">(<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> p = last;<span class="keyword">int</span> np = ++ tot;</span><br><span class="line">f[tot] = <span class="number">1</span>;</span><br><span class="line">tr[np].len = tr[p].len + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (; p &amp;&amp; !tr[p].ch[c]; p = tr[p].fa) tr[p].ch[c] = np;</span><br><span class="line">last = tot;</span><br><span class="line"><span class="keyword">if</span> (!p) tr[np].fa = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> q = tr[p].ch[c];</span><br><span class="line"><span class="keyword">if</span> (tr[q].len == tr[p].len + <span class="number">1</span>) tr[np].fa = q;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> nq = ++ tot;</span><br><span class="line">tr[nq] = tr[q], tr[nq].len = tr[p].len + <span class="number">1</span>;</span><br><span class="line">tr[q].fa = tr[np].fa = nq;</span><br><span class="line"><span class="keyword">for</span> (; p &amp;&amp; tr[p].ch[c] == q; p = tr[p].fa) tr[p].ch[c] = nq;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主函数调用的时候，直接 <code>for (int i = 1; str[i]; ++ i) extend(str[i] - &#39;a&#39;);</code> （这里假设只有小写字母）。</p><p><del>可以先背代码，再看下面的讲解</del>。</p><p>下面一点一点的讲解：</p><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> len, fa;</span><br><span class="line">    <span class="keyword">int</span> ch[<span class="number">26</span>];</span><br><span class="line">&#125;tr[N];</span><br></pre></td></tr></table></figure><p>说明一下每一个变量的含义：</p><p><code>tr[N]</code>：前面所讲的 $\text{endpos}$ 相同的子串将会被放入同一个结点，也就是说这些子串遍历时会走到这个结点停止。</p><p><code>ch[26]</code>：指所有的结点的转移。</p><p><code>len</code>：指所有的子串的最大长度。</p><p><code>fa</code>：可以看做 <code>fail</code>，也就是匹配失败的时候会走到哪个结点（现在大概用不到，有点像 KMP）。</p><p><strong>性质</strong>：$fa$ 指向的结点的最长长度就是当前结点所代表的子串的最短长度减 1。</p><p>还是拿 $\texttt{abcbc}$ 来说：</p><p>${\texttt{abcbc},\texttt{bcbc},\texttt{cbc} }$ 的最短长度是 3，那么这个结点的 $fa$ 是 $\texttt{bc}$ 所在的结点， 长度为 2。</p><p>这里有一些重要，请务必理解。（其实认真读一下上面的定义就可以了）</p><p>然后，还有一个<strong>重要的性质</strong>：如果当前所代表的最长子串是 $s$，那么按照 $fa$ 一直跳的话，所有遍历到的结点所代表的子串一定都是 $s$ 的后缀，且 $s$ 的后缀一定都被遍历到。</p><p>拿 ${\texttt{abcbc},\texttt{bcbc},\texttt{cbc} }$ 为例：这个结点的 $fa$ 会指向 $\texttt{bc}$ 所在的结点，然后 ${\texttt{bc},\texttt{c}}$ 是一个结点，然后 $fa$ 是 $\varnothing$。可以发现，整个遍历到的是 ${\texttt{abcbc,bcbc,cbc,bc,c},\varnothing }$，恰好是 $\texttt{abcbc}$ 的后缀的所有。 </p><hr><p><code>last = tot = 1</code>：这里表示开始已经有了一个节点，我们定义最开始结点的 $fa$ 是 0，长度也是 0。</p><hr><p><code>int p = last, np = ++ tot; ...; last = tot; </code>：$p$ 表示前面的结点，$np$ 表示当前的结点，处理完当前结点的时候要将 $last$ 更新。</p><hr><p><code>for (; p &amp;&amp; !tr[p].ch[c]; p = tr[p].fa) tr[p].ch[c] = np;</code></p><p>根据刚才的性质：</p><blockquote><p>如果当前所代表的最长子串是 $s$，那么按照 $fa$ 一直跳的话，所有遍历到的结点所代表的子串一定都是 $s$ 的后缀，且 $s$ 的后缀一定都被遍历到。</p></blockquote><p>有了这个结论的话，这里就比较简单了：直接一直按照 $fa$ 跳，将所有的结点都加上当前字符 $c$。</p><p>为什么要加上 <code>!tr[p].ch[c]</code> 呢？</p><p>因为如果出现了相同的字符，我们就有可能出现 $\text{endpos}$ 不是当前结点的，我们要特殊处理。</p><p>这个稍微有点复杂，现在可以理解为有原来的指向了，如果再赋值就会导致一些被覆盖，我们等一下再讲。</p><hr><p><code>if (!p) tr[np].fa = 1;</code>：这个说明程序退出循环是因为 $p=0$，所以说明 $last$ 结点所代表的最长子串，也就是原串（每一次扩展时 $last$ 都赋值给了最新的那个，也就是最长的那个），原串的所有后缀都加了当前字符 $c$，然后到了 $np$ 这个结点。</p><p>所以，$np$ 所代表的子串的长度一定从 $1$ 到最长长度。</p><p>比如，原来的串是 $\texttt{abc}$，加上了 $\texttt{d}$，那么 $\texttt{abc},\texttt{bc},\texttt{c},\varnothing$ 都会加上 $d$ 这个字符。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/u717hbc3.png"></p><p>（黑色边代表 $ch[]$，绿色边代表 $fa$）</p><p>前面没有理解可以看一下这个图。</p><p>那么，$np$ 的 $fa$ 就是长度为 $0$ 的串在的结点，也就是 $1$。</p><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> q = tr[p].ch[c];</span><br><span class="line"><span class="keyword">if</span> (tr[q].len == tr[p].len + <span class="number">1</span>) tr[np].fa = q;</span><br></pre></td></tr></table></figure><p>这里就有些难理解了，我们首先填一下前面的坑。</p><p>因为 $p$ 既可以转移到 $q$，也可以转移到 $np$，那么可以得到结论：$p$ 转移的 $ch[c]$ 有两个出现。</p><p>这里我们用一下前面的例子，在前面的基础 $\texttt{ab}$ 加上 $\texttt{b}$。</p><p>当循环到 $p=1$ 的时候，我们发现已经有了 $b$ 的转移边，这意味着 $\varnothing+\texttt{b}$ 已经出现了一次，这里又一次出现了，也就是说，$\text{endpos}$ 结果是不同于 $q$ 本身的 $\text{endpos}$ 了，所以要特殊处理。</p><p>这里明显是遇上了也有 $c$ 转移的。</p><p>我们首先记录下 $ch[c]$ 的位置 $q$。</p><p>首先，为什么 <code>tr[q].len = tr[p].len + 1</code> 与 <code>tr[q].len != tr[p].len + 1</code> 是不同的呢？</p><p>画一个图。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/eolba4ep.png"></p><p>根据前面所讲，$\texttt{b}$ 的 $\text{endpos}$ 是 ${2,3}$，不同于原来 3 号结点的 $\text{endpos}$。</p><p>但是，这里判断的 <code>tr[q].len = tr[p].len + 1</code> 是什么意思呢？</p><p>前面讲到，$len$ 的意思是一个结点所代表的子串的最长长度。</p><p>如果 <code>tr[q].len == tr[p].len + 1</code> 的话，那么这里只有长度为 $tr[q].len$ 的一个子串！</p><p>所以我们可以直接将这个结点的 $\text{endpos}$ 改为新的子串。</p><p>比如说，前面的 $q=3$ 的 $\text{endpos}$ 为 2，但是又添加了 $b$ 这个字符，我们就将 $q=3$ 的 $\text{endpos}$ 直接改为 ${2,3}$ 就可以了。</p><p>很明显，3 号结点所代表的子串仍然是 ${\texttt{ab},\texttt{b}}$，然后 $np=4$ 所代表的子串是 ${\texttt{abb}}$，比较明显，4 的 $fa$ 是 3。</p><hr><p>（你以为完了？还多着呢</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> nq = ++ tot;</span><br><span class="line">tr[nq] = tr[q], tr[nq].len = tr[p].len + <span class="number">1</span>;</span><br><span class="line">tr[q].fa = tr[np].fa = nq;</span><br><span class="line"><span class="keyword">for</span> (; p &amp;&amp; tr[p].ch[c] == q; p = tr[p].fa) tr[p].ch[c] = nq;</span><br></pre></td></tr></table></figure><p>这里是前面情况的相反情况，也就是 <code>tr[q].len != tr[p].len + 1</code>。</p><p>那么，我们这里就需要将 $q$ 结点拆为两个结点。</p><p>其中一个仍然是 $q$，另一个是 $nq$，也就是新建结点。</p><p>我们再画一个图，建的是 $\texttt{abcb}$ 的后缀自动机。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/hib4zlyo.png"></p><p><code>tr[nq] = tr[q]</code>：这一个比较简单，因为就是复制过来即可。</p><p><code>tr[nq].len = tr[p].len + 1</code>：这里是指将 $q$ 的长度为 $tr[p].len+1$ 的子串。</p><p><code>tr[q].fa = tr[np].fa = nq</code>：首先，我们从例子中学习。</p><p>很明显，$q$ 的最短子串是 $\texttt{ab}$，也就是长度减 1 的就是 $\texttt{b}$，同理，$np$ 的最短子串是 $\texttt{cb}$，长度减 1 也是 $\texttt{b}$。</p><p>再从证明入手。</p><p>前面说到，$nq$ 这个结点是从 $q$ 这个结点分离出来的，且是最短的子串被分离了的。</p><p>所以，$q$ 的 $fa$ 就应该是 $q$，这个显然 <del>（显然大法）</del>。</p><p>然后，因为 $np$ 本来应该也是有 $nq$ 这个结点所代表的子串的。</p><p>那么，我们也可以说 $nq$ 是从 $np$ 分离出来的。</p><p>所以，这一句显然。</p><hr><p><code>for (; p &amp;&amp; tr[p].ch[c] == q; p = tr[p].fa) tr[p].ch[c] = nq;</code></p><p> 这里是指，既然 $p$ 这个结点所代表的最长子串都是重复了的，那么 $p$ 的所有 $fa$（前提是原来是 $tr[p].ch[c] == q$）都应该有 $ch[c]$ 指到 $nq$ 这个结点。</p><p>看一下上面的例子。</p><p>$p$ 所代表的是 $\varnothing$，它接上 $\texttt{b}$ 也应该属于 $nq$，所以 $tr[p].ch[‘b’-‘a’]=nq$。</p><p>$p$ 的 $fa$ 是 0，所以结束。</p><hr><h3 id="4-SAM-时空复杂度的理解与简要证明"><a href="#4-SAM-时空复杂度的理解与简要证明" class="headerlink" title="4. SAM 时空复杂度的理解与简要证明"></a>4. SAM 时空复杂度的理解与简要证明</h3><p>这里，只说明 $tot\leq 2\operatorname{strlen}(s) - 1$。</p><p>很明显，每一次最多只会多 2 个结点。</p><p>查询也是线性，不用多说。</p><hr><h3 id="5-结语"><a href="#5-结语" class="headerlink" title="5. 结语"></a>5. 结语</h3><p>如果你还没有理解的话，<del>请喷作者</del>并发再评论。</p><p>希望能帮助到你。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>后缀自动机（SAM）</title>
      <link href="/2021/12/13/%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA%EF%BC%88SAM%EF%BC%89/"/>
      <url>/2021/12/13/%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA%EF%BC%88SAM%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>写得比较差，建议看另一篇。</p><span id="more"></span><h2 id="后缀自动机-SAM"><a href="#后缀自动机-SAM" class="headerlink" title="后缀自动机(SAM)"></a>后缀自动机(SAM)</h2><h3 id="1-主要思想"><a href="#1-主要思想" class="headerlink" title="1. 主要思想"></a>1. 主要思想</h3><p>可以类比于 Trie，但它是一个有向无环图。</p><p>可以用来存储一个串的所有子串。</p><h3 id="2-性质"><a href="#2-性质" class="headerlink" title="2. 性质"></a>2. 性质</h3><p>从起点出发，从普通边，可以得到所有子串。</p><p>同时，所有边和点的数量在 $O(n)$ 级别。</p><p>终点就是包含后缀的点，同时每一个点对应的是不止一个子串。</p><p>但所有每一个点对应的子串满足：按长度降序排序后，我们发现每一个串都是前面一个串的后缀。</p><p>还有一种边：$Link/Father$。</p><p>这种边构成一棵树。</p><p>将一个点所对应的最短的子串的首字母去掉，得到的子串所对应的节点，再由原来节点指向这个节点。</p><p>首先定义 $endpos(s)$ 为子串 s 在原串所有出现的位置（尾字母）下标集合。</p><p>如果有两个子串的 $endpos$ 相同，则我们可以将其看为一个等价类。</p><p>SAM 的状态与所有的等价类一一对应。</p><p><strong>证明1</strong>：如果 $|s1|\leq|s2|$，则 $s1$ 是 $s2$ 的后缀当且仅当 $endpos(s1) \supseteq endpos(s2)$。</p><p>$s1$ 不是 $s2$ 的后缀当且仅当 $endpos(s1)\cap endpos(s2)= \varnothing$。</p><p>这两个易证。</p><p><strong>证明2：</strong>两个不同子串的 $endpos$ 要么包含要么无交集。</p><p>易得，如果不为交集，那么必有一个 $pos$ 使两个都满足，则必有一个是另一个的子集。</p><p><strong>证明3：</strong> 对于每一个等价类 $st$，最长的子串为 $longest$，最短的为 $shortest$，若 $shortest\leq |s|\leq longest$，则 $s$ 也是属于该等价类。</p><h3 id="3-构造方法"><a href="#3-构造方法" class="headerlink" title="3. 构造方法"></a>3. 构造方法</h3><p>本人能力不够，也是云里雾里，只能帮到这了（ <del>逃</del> ）。</p><p>自己去理解吧。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e6</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> len,fa;</span><br><span class="line">    <span class="keyword">int</span> ch[<span class="number">26</span>];</span><br><span class="line">&#125;tr[N];</span><br><span class="line"><span class="keyword">char</span> str[N];</span><br><span class="line">ll f[N],ans;</span><br><span class="line"><span class="keyword">int</span> h[N],e[N],ne[N],idx,last=<span class="number">1</span>,tot=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx]=b,ne[idx]=h[a],h[a]=idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">extend</span><span class="params">(<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p=last;<span class="keyword">int</span> np=++tot;</span><br><span class="line">    f[tot]=<span class="number">1</span>;</span><br><span class="line">    tr[np].len=tr[p].len+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (;p&amp;&amp;!tr[p].ch[c];p=tr[p].fa) tr[p].ch[c]=np;</span><br><span class="line">    last=tot;</span><br><span class="line">    <span class="keyword">if</span> (!p) tr[np].fa=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> q=tr[p].ch[c];</span><br><span class="line">        <span class="keyword">if</span> (tr[q].len==tr[p].len+<span class="number">1</span>) tr[np].fa=q;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> nq=++tot;</span><br><span class="line">            tr[nq]=tr[q],tr[nq].len=tr[p].len+<span class="number">1</span>;</span><br><span class="line">            tr[q].fa=tr[np].fa=nq;</span><br><span class="line">            <span class="keyword">for</span> (;p&amp;&amp;tr[p].ch[c]==q;p=tr[p].fa) tr[p].ch[c]=nq;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=h[x];~i;i=ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">dfs</span>(e[i]);f[x]+=f[e[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (f[x]&gt;<span class="number">1</span>) ans=<span class="built_in">max</span>(ans,f[x]*tr[x].len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;str[i];++i) <span class="built_in">extend</span>(str[i]-<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=tot;++i) <span class="built_in">add</span>(tr[i].fa,i);</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-例题"><a href="#4-例题" class="headerlink" title="4. 例题"></a>4. 例题</h3><h4 id="T1：玄武密码"><a href="#T1：玄武密码" class="headerlink" title="T1：玄武密码"></a>T1：玄武密码</h4><p><a href="https://www.luogu.com.cn/problem/P5231">题目传送门 Luogu</a></p><p><a href="https://www.acwing.com/problem/content/1285/">题目传送门 AcWing</a></p><p>比模板还要裸。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e7</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> fa,len;</span><br><span class="line">    <span class="keyword">int</span> ch[<span class="number">4</span>];</span><br><span class="line">&#125;tr[N];</span><br><span class="line"><span class="keyword">int</span> last=<span class="number">1</span>,tot=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> str[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">extend</span><span class="params">(<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p=last,np=last=++tot;</span><br><span class="line">    tr[np].len=tr[p].len+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (;p&amp;&amp;!tr[p].ch[c];p=tr[p].fa) tr[p].ch[c]=np;</span><br><span class="line">    <span class="keyword">if</span> (!p) tr[np].fa=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> q=tr[p].ch[c];</span><br><span class="line">        <span class="keyword">if</span> (tr[q].len==tr[p].len+<span class="number">1</span>) tr[np].fa=q;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> nq=++tot;</span><br><span class="line">            tr[nq]=tr[q],tr[nq].len=tr[p].len+<span class="number">1</span>;</span><br><span class="line">            tr[q].fa=tr[np].fa=nq;</span><br><span class="line">            <span class="keyword">for</span> (;p&amp;&amp;tr[p].ch[c]==q;p=tr[p].fa) tr[p].ch[c]=nq; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span> (c)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;W&#x27;</span>:<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;N&#x27;</span>:<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;E&#x27;</span>:<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;S&#x27;</span>:<span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p=<span class="number">1</span>,i;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;str[i]&amp;&amp;tr[p].ch[<span class="built_in">get</span>(str[i])];++i) p=tr[p].ch[<span class="built_in">get</span>(str[i])];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,i);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i) <span class="built_in">extend</span>(<span class="built_in">get</span>(str[i]));</span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str);</span><br><span class="line">        <span class="built_in">dfs</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T2：最长公共子串"><a href="#T2：最长公共子串" class="headerlink" title="T2：最长公共子串"></a>T2：最长公共子串</h4><p><a href="https://www.acwing.com/problem/content/2813/">题目传送门 AcWing</a></p><p><a href="https://loj.ac/p/171">题目传送门 LOJ</a></p><p>将第一个建后缀自动机，和后面的进行比较即可。</p><p>注意要标记回传，否则更新可能不及时。</p><p>注意其中的最大最小：</p><ol><li>每一次走到一个节点时，应该和当前的取最大值。</li><li>不同的字符串之间，一个节点的值应取最小值。</li><li>最后得出答案时，应该把不同的节点所保存的值取最大输出。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>,INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> len,fa;</span><br><span class="line">    <span class="keyword">int</span> ch[<span class="number">26</span>];</span><br><span class="line">&#125;tr[<span class="number">2</span>*N];</span><br><span class="line"><span class="keyword">int</span> last=<span class="number">1</span>,tot=<span class="number">1</span>,now[N],ans[N];</span><br><span class="line"><span class="keyword">char</span> str[N];</span><br><span class="line"><span class="keyword">int</span> h[N],e[N],ne[N],idx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">extend</span><span class="params">(<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p=last,np=last=++tot;</span><br><span class="line">    tr[np].len=tr[p].len+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (;p&amp;&amp;!tr[p].ch[c];p=tr[p].fa) tr[p].ch[c]=np;</span><br><span class="line">    <span class="keyword">if</span> (!p) tr[np].fa=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> q=tr[p].ch[c];</span><br><span class="line">        <span class="keyword">if</span> (tr[q].len==tr[p].len+<span class="number">1</span>) tr[np].fa=q;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> nq=++tot;</span><br><span class="line">            tr[nq]=tr[q],tr[nq].len=tr[p].len+<span class="number">1</span>;</span><br><span class="line">            tr[q].fa=tr[np].fa=nq;</span><br><span class="line">            <span class="keyword">for</span> (;p&amp;&amp;tr[p].ch[c]==q;p=tr[p].fa) tr[p].ch[c]=nq;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx]=b,ne[idx]=h[a],h[a]=idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tree</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=h[x];~i;i=ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">tree</span>(e[i]);</span><br><span class="line">        now[x]=<span class="built_in">max</span>(now[x],now[e[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,p=<span class="number">1</span>,t=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(now,<span class="number">0</span>,<span class="keyword">sizeof</span> now);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;str[i];++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> c=str[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">while</span> (p&gt;<span class="number">1</span>&amp;&amp;!tr[p].ch[c]) p=tr[p].fa,t=tr[p].len; </span><br><span class="line">        <span class="keyword">if</span> (tr[p].ch[c]) p=tr[p].ch[c],t++;</span><br><span class="line">        now[p]=<span class="built_in">max</span>(now[p],t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">tree</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;++i) ans[i]=<span class="built_in">min</span>(ans[i],now[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;n--;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str);<span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;str[i];++i) <span class="built_in">extend</span>(str[i]-<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;++i) ans[i]=tr[i].len;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=tot;++i) <span class="built_in">add</span>(tr[i].fa,i);</span><br><span class="line">    <span class="keyword">while</span> (n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str);</span><br><span class="line">        <span class="built_in">calc</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> finalres=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;++i) finalres=<span class="built_in">max</span>(finalres,ans[i]);</span><br><span class="line">    cout&lt;&lt;finalres&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> 后缀自动机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>莫比乌斯反演</title>
      <link href="/2021/12/12/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
      <url>/2021/12/12/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/</url>
      
        <content type="html"><![CDATA[<p>容斥原理的升级版。</p><span id="more"></span><h2 id="1-莫比乌斯函数的定义与主要思想"><a href="#1-莫比乌斯函数的定义与主要思想" class="headerlink" title="1. 莫比乌斯函数的定义与主要思想"></a>1. 莫比乌斯函数的定义与主要思想</h2><p>$\mu(x)$ 来表示莫比乌斯函数。</p><p>其实就是容斥原理的升级版。</p><p>定义为：（假设 $x=p1^{a1}p2^{a2}…pk^{ak}$）</p><ol><li>$\exists i, ai\geq2,\mu(x)=0$</li><li>$\forall i,ai=1,\mu(x)=(-1)^k$</li></ol><p>顺便讲一下积性函数：</p><p>如果 $\gcd(i,j)=1,f(i*j)=f(i)*f(j)$，那么 $f$ 就是积性函数。</p><p>$\mu(x)$ 就是一个积性函数。</p><p>原因很简单：</p><ol><li>如果有 $\mu(i)=0$ 或 $\mu(j)=0$，那么 $i * j$ 一定有一个质因数的次数 $\geq2$，所以 $\mu(i*j)=0$</li><li>如果没有，设 $i$ 的质因数个数（即上面的 $k$）为 $x$，$j$ 为 $y$，又因为 $\gcd(i,j)=1$，所以没有相同的质因数，所以 $i * j$ 的质因数个数为 $x+y$，且没有次数 $&gt;1$ 的。所以 $\mu(i * j)=(-1)^{x+y}$。</li></ol><p>那么，我们就可以在线性筛的时候求出 $\mu(x)$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mu[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;N;++i)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">if</span> (!st[i]) mu[i]=<span class="number">-1</span>,prime[cnt++]=i;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cnt&amp;&amp;i*prime[j]&lt;N;++j)</span><br><span class="line">       &#123;</span><br><span class="line">           st[i*prime[j]]=<span class="number">1</span>;</span><br><span class="line">           <span class="keyword">if</span> (!(i%prime[j]))</span><br><span class="line">           &#123;</span><br><span class="line">               mu[i*prime[j]]=<span class="number">0</span>;<span class="comment">//break1</span></span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           mu[i*prime[j]]=-mu[i];<span class="comment">//break2</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>这就是一个简单的线性筛模板了。</p><p><code>break1</code>：这时，$i * prime[j]$ 的 $prime[j]$ 的次数一定大于 1，所以 $\mu(i*prime[j])$ 为 0。</p><p><code>break2</code>：这是，可以使用积性函数的性质 $\mu(i * prime[j])=\mu(i) * \mu(prime[j])$。</p><h2 id="2-函数的一些性质"><a href="#2-函数的一些性质" class="headerlink" title="2. 函数的一些性质"></a>2. 函数的一些性质</h2><h3 id="一）"><a href="#一）" class="headerlink" title="一）"></a>一）</h3><p>定义 $smu(n)=\sum_{d|n}\mu(d)$，那么可以得到：</p><ol><li>$n=1\Rightarrow smu(n)=1$</li><li>$n\not=1,smu(n)=0$</li></ol><p>简要的证明一下（前置知识：二项式定理）：</p><p>$n=1$ 的情况略过。</p><p>假设 $n&gt;1$，那么 $k\geq1$（前面的 $k$，即质因数个数）</p><p>首先，如果 $\forall i,0\leq bi\leq ai$，那么 $x=p1^{b1}p2^{b2}…pk^{bk}$ 一定是 $n$ 的因数。</p><p>如果 $\exists bi&gt;1$，那么 $\mu(x)=0$。</p><p>所以，我们只需要考虑 $0\leq bi\leq1$ 的情况。</p><p>假设有 $t$ 个 1，则 $\mu(x)=(-1)^t$。（不懂的回去看一下前面的定义）</p><p>对于每一个 $t$，其实都有 $C_k^t$ 种情况（就是 $k$ 个中选取 $t$ 个，就是组合数了）</p><p>那么，$smu(n)=C_k^0(-1)^0+C_k^1(-1)^1+…+C_k^{k-1}(-1)^{k-1}+C_k^k(-1)^k$。</p><p>又由二项式定义得到：$(a+b)^k=C_k^0a^0b^k+C_k^1a^1b^{k-1}+…+C_k^ka^kb_0$。</p><p>用 $-1$ 代替 $a$，$1$ 代替 $b$，我们发现， 右边就是 $smu(n)$，左边就是 $(-1+1)^k=0$！</p><p>得证。</p><h2 id="3-莫比乌斯反演"><a href="#3-莫比乌斯反演" class="headerlink" title="3. 莫比乌斯反演"></a>3. 莫比乌斯反演</h2><p>直接扔式子。<br>$$<br>F(n)=\sum_{d|n}f(d)\Rightarrow f(n)=\sum_{d|n}\mu(d)*F(\dfrac{n}{d})<br>$$<br>这个是比较常见的式子。</p><p>简要的证明一下：<br>$$<br>\sum_{d|n}\mu(d)F(\dfrac{n}{d})=\sum_{d|n}\mu(d)\sum_{x|\frac{n}{d}}f(x)<br>$$<br>上面的式子就是我们根据所给条件从右边开始的。</p><p>现在，我们要做一件事情：将 $d$ 和 $x$ 交换一下！</p><p>先给出结论：<br>$$<br>\sum_{d|n}\mu(d)\sum_{x|\frac{n}{d}}f(x)=\sum_{x|n}f(x)\sum_{d|\frac{n}{x}}\mu(d)<br>$$<br>为什么是对的呢？</p><p>这里，我们假设一下：首先有一个 $d$，然后我们枚举了 $\dfrac{n}{d}$ 的因数 $x$，然后我们将 $\mu(d)f(x)$ 加入了答案。</p><p>$x|\dfrac{n}{d}\Leftrightarrow xd|n$，那么，$xd|n\Leftrightarrow d|\dfrac{n}{x}$。</p><p>所以，我们枚举每一个 $x$，其实和枚举每一个 $d$ 其实是一样的，因为每个枚举到的 $(x,d)$ 在先枚举 $d$ 的时候都会枚举到！</p><p>那么，原式变为了：<br>$$<br>\sum_{x|n}f(x)\sum_{d|\frac{n}{x}}\mu(d)<br>$$<br>观察右边的 $\displaystyle \sum_{d|\frac{n}{x}}\mu(d)$，和上面我们得到的式子 $smu(n)$ 其实是一样的！</p><p>所以，只有在 $\dfrac{n}{x}=1$，即 $x=n$ 时后面才为 1，其余为 0。</p><p>那么，原式得证。</p><p><del>你以为就结束了吗？</del></p><p>还有一个式子：<br>$$<br>F(n)=\sum_{n|d}f(d)\Rightarrow f(n)=\sum_{n|d}\mu(\dfrac{d}{n})F(d)<br>$$<br>和上面的式子略微不同，但本质一样。</p><p>还是一波操作（中间步骤的推导留给读者 <del>逃</del>）：<br>$$<br>\sum_{n|d}\mu(\dfrac{n}{d})F(d)=\sum_{n|d}\mu(\dfrac{d}{n})\sum_{d|x}f(x)<br>$$<br>设 $t=\dfrac{d}{n}$，$y=\dfrac{x}{d}$，则：<br>$$<br>\sum_{t=1}\mu(t)\sum_{y=1}f(t * y * n)<br>$$<br>那么，我们在枚举 $t$ 再枚举 $y$ 的时候，统计答案为 $\mu(t) * f(t * y * n)$，我们也可以先枚举 $t * y$，在枚举 $t$，其实相当于枚举了 $t,y$。</p><p>所以，一波操作（设 $z=t * y$）：<br>$$<br>\sum_{z=1}f(z * n)\sum_{t|z}\mu(t)<br>$$<br>所以又看到后面的式子，实在是熟悉不过了。</p><p>于是 $z=1$ 时右边为 $1$。</p><p>所以就是 $f(n)$ 了。</p><h2 id="3-例题"><a href="#3-例题" class="headerlink" title="3. 例题"></a>3. 例题</h2><h4 id="T1：-HAOI-2011-Problem-b"><a href="#T1：-HAOI-2011-Problem-b" class="headerlink" title="T1：[HAOI 2011]Problem b"></a>T1：[HAOI 2011]Problem b</h4><p><a href="https://www.luogu.com.cn/problem/P2522">题目传送门 Luogu</a></p><p><a href="https://www.acwing.com/problem/content/2704/">题目传送门 AcWing</a></p><p>首先，看到 $x\in[a,b],y\in[c,d]$，可以想到二维前缀和（还是差分，记不清楚了 qwq</p><p>所以，假设 $F(a,b)$ 表示 $x\in[1,a],y\in[1,b]$ 满足 $\gcd(x,y)=k$ 的个数，可以得到：<br>$$<br>ans=F(b,d)-F(a-1,d)-F(b,c-1)+F(a-1,b-1)<br>$$<br>然后开始正题，求 $F(a,b)$。</p><p>又是一波操作：<br>$$<br>F(a,b)=\sum_{x=1}^{\frac{a}{k}}\sum_{y=1}^{\frac{b}{k}}[\gcd(x,y)=1]<br>$$<br>首先，$[\gcd(x,y)=1]$ 表示 $\gcd(x,y)=1$ 取值为 $1$，否则为 $0$。</p><p>那么，设 $m=\dfrac{a}{k},n=\dfrac{b}{k}$，于是就是：<br>$$<br>F(a,b)=\sum_{x=1}^m\sum_{y=1}^n[\gcd(x,y)=1]<br>$$<br>定义 $f(d)$ 为 $\sum_{x=1}^m\sum_{y=1}^n[\gcd(x,y)=d]$，$g(d)=\sum_{x=1}^m\sum_{y=1}^n[d|\gcd(x,y)]$。</p><p>所以 $F(a,b)=f(1)$，$g(x)=\lfloor\dfrac{m}{x}\rfloor\lfloor\dfrac{n}{x}\rfloor$。（直接取 $x$ 的倍数就是了</p><p>还有一个：<br>$$<br>g(x)=\sum_{x|d}f(d)<br>$$<br>意义很简单：$\gcd(a1,a2)$ 可以等于 $x,2x,…$，就是这个式子的意思。</p><p>根据套路：<br>$$<br>f(x)=\sum_{x|d}\mu(\dfrac{d}{x})g(d)<br>$$<br>所以，$f(1)=\sum_{d=1}^n\mu(d)g(d)$</p><p>直接求的话，大概也是能过的。</p><p>还有一些优化，比如整除分块，就是 $g(d)$ 相同的可以一起计算。</p><p>如果当前的值为 $a$，那么当前值为 $\dfrac{n}{a}$，那么最大的 $x$ 满足 $\dfrac{n}{x}=\dfrac{n}{a}$ 为 $x=\dfrac{n}{\frac{n}{a}}$。（证明略复杂，跳过</p><p>加入 $m$ 的话，满足 $\dfrac{n}{a}*\dfrac{m}{a}=\dfrac{n}{x}*\dfrac{n}{x}$ 的最大 $x$ 为 $\min(\dfrac{n}{\frac{n}{a}},\dfrac {m}{\frac{m}{a}})$。</p><p>时间复杂度：$O(\sqrt{n})$。</p><p>放个代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">calc</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a/=k,b/=k;</span><br><span class="line">    ll res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="built_in">min</span>(a,b);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> l=<span class="number">1</span>,r;l&lt;=n;l=r+<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        r=<span class="built_in">min</span>(n,<span class="built_in">min</span>(a/(a/l),b/(b/l)));</span><br><span class="line">        res+=(sum[r]-sum[l<span class="number">-1</span>])*(ll)(a/l)*(b/l);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T2：-SDOI-2015-约数个数和"><a href="#T2：-SDOI-2015-约数个数和" class="headerlink" title="T2：[SDOI 2015]约数个数和"></a>T2：[SDOI 2015]约数个数和</h4><p><a href="https://www.luogu.com.cn/problem/P3327">题目传送门 Luogu</a></p><p><a href="https://www.acwing.com/problem/content/1360/">题目传送门 AcWing</a></p><p><strong>前方高能！</strong></p><p>首先，得到结论：<br>$$<br>d(i*j)=\sum_{x|i}\sum_{y|j}[\gcd(x,y)=1]<br>$$<br>简要证明：</p><p>假设对于每一个质因数 $p$，$i$ 的次数为 $a$，$j$ 的次数为 $b$。</p><p>对于左边，显然 $p$ 的存在可以使答案乘上 $a+b+1$（可以选择 $0\sim a+b$ 次方）。</p><p>对于右边，可以有以下的方法：</p><ol><li>都选择 $0$ 次，贡献为 $1$。</li><li>如果 $i$ 选择 $0$ 次，那么 $j$ 可以选择 $1\sim b$，贡献为 $b$。</li><li>如果 $j$ 选择 $0$ 次，那么 $i$ 可以选择 $1\sim a$，贡献为 $a$。</li></ol><p>综上，$p$ 的存在使得答案乘上了 $a+b+1$。</p><p>既然对于每一个 $p$，左右相乘的数是相等的。</p><p>得证。</p><p>接下来，一波操作：<br>$$<br>ans=\sum_{i=1}^N\sum_{j=1}^M\sum_{x|i}\sum_{y|j}[\gcd(x,y)=1]<br>$$<br>根据上面的结论得到的。<br>$$<br>=\sum_{x=1}^N\sum_{y=1}^M[\gcd(x,y)=1]\lfloor\dfrac{N}{x}\rfloor\lfloor\dfrac{M}{y}\rfloor<br>$$<br>直接提出 $x,y$，枚举 $i,j$ 贡献其实就是 $\lfloor\dfrac{N}{x}\rfloor\lfloor\dfrac{M}{y}\rfloor$。</p><p>令 $f(d)=\sum_{x=1}^N\sum_{y=1}^M[\gcd(x,y)=1]\lfloor\dfrac{N}{x}\rfloor\lfloor\dfrac{M}{y}\rfloor,F(d)=\sum_{x=1} ^N\sum_{y=1}^M[d|\gcd(x,y)]\lfloor\dfrac{N}{x}\rfloor\lfloor\dfrac{M}{y}\rfloor$。</p><p>还可以根据套路推 $F$ 得到：<br>$$<br>F(d)=\sum_{k=1}^{\frac{N}{d}}\sum_{l=1}^{\frac{M}{d}}\lfloor\dfrac{N}{dk} \rfloor\lfloor\dfrac{M}{dl}\rfloor<br>$$<br>接着令 $N1=\dfrac{N}{d},M1=\dfrac{M}{d}$，则：<br>$$<br>F(d)=\sum_{k=1}^{N1}\sum_{l=1}^{M1}\lfloor\dfrac{N1}{k}\rfloor\lfloor\dfrac{M1}{l}\rfloor<br>$$<br>$g(n)=\sum_{k=1}^{N}\lfloor\dfrac{N}{k}\rfloor$ 是可以预处理的。对于每一个 $g(n)$，直接整除分块，复杂度 $O(n\sqrt{n})$。</p><p>可以得到：$F(d)=g(\dfrac{N}{d})g(\dfrac{M}{d})$</p><p>莫比乌斯的反演套路大都如此：构造出 $f,F$，引入 $\mu$ 来简化运算，$f(1)$ 一般为所求，$\mu$ 一般要预处理。</p><p>接着：<br>$$<br>ans=f(1)=\sum_{d=1}\mu(d)F(d)<br>$$<br>可以 $O(n)$ 求，但还不够优秀。</p><p>带入 $g$，即得：<br>$$<br>ans=\sum_{d=1}\mu(d)g(\dfrac{N}{d})g(\dfrac{M}{d})<br>$$<br>发现可以整除分块，单次复杂度为 $O(\sqrt{n})$，可以通过。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e4</span> + <span class="number">10</span>;</span><br><span class="line">ll g[N];</span><br><span class="line"><span class="keyword">int</span> prime[N], cnt, mu[N], n, m, s[N];</span><br><span class="line"><span class="keyword">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = N - <span class="number">1</span>;</span><br><span class="line">    mu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++ i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!st[i]) prime[cnt ++] = i, mu[i] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt &amp;&amp; prime[j] * i &lt;= n; ++ j)</span><br><span class="line">        &#123;</span><br><span class="line">            st[i * prime[j]] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % prime[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            mu[i * prime[j]] = -mu[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) s[i] = s[i - <span class="number">1</span>] + mu[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">1</span>; d &lt;= n; ++ d)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>, r; l &lt;= d; l = r + <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            r = d / (d / l);</span><br><span class="line">            g[d] += (r - l + <span class="number">1</span>) * (d / l);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="keyword">if</span> (n &gt; m) <span class="built_in">swap</span>(n, m);</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>, r; l &lt;= n; l = r + <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            r = <span class="built_in">min</span>(n / (n / l), m / (m / l));</span><br><span class="line">            ans += (s[r] - s[l - <span class="number">1</span>]) * g[n / l] * g[m / l];</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面给出几道题目与得到的公式，就不展开了。</p><h4 id="T3：P3312-SDOI2014-数表"><a href="#T3：P3312-SDOI2014-数表" class="headerlink" title="T3：P3312 [SDOI2014]数表"></a>T3：P3312 [SDOI2014]数表</h4><p><a href="https://www.luogu.com.cn/problem/P3312">题目传送门 Luogu</a><br>$$<br>\sum_{T=1}^n[\dfrac{n}{T}][\dfrac{m}{T}]\sum_{d|T}[g(d)\leq a]\mu(\dfrac{T}{d})d<br>$$</p><p>$g(d)$ 表示 $d$ 的约数和。</p><h4 id="T4：P3704-SDOI2017-数字表格"><a href="#T4：P3704-SDOI2017-数字表格" class="headerlink" title="T4：P3704 [SDOI2017]数字表格"></a>T4：P3704 [SDOI2017]数字表格</h4><p><a href="https://www.luogu.com.cn/problem/P3704">题目传送门 Luogu</a><br>$$<br>\prod_{T=1}^n(\prod_{d|t}f(d)^{\mu(\frac{T}{d})})^{^{\lfloor\frac{n}{T}\rfloor\lfloor\frac{m}{T}\rfloor}}<br>$$</p><h4 id="T5：P3768-简单的数学题"><a href="#T5：P3768-简单的数学题" class="headerlink" title="T5：P3768 简单的数学题"></a>T5：P3768 简单的数学题</h4><p><a href="https://www.luogu.com.cn/problem/P3768">题目传送门 Luogu</a><br>$$<br>\begin{aligned}\\ans &amp; =<br>\sum_{T=1}^nsum(\dfrac{n}{T})^2\times T^2\sum_{d|T}d\times\mu(\dfrac{T}{d})<br>\\ &amp; =\sum_{T=1}^n\sum(\dfrac{n}{T})^2\times T^2\varphi(T)<br>\end{aligned}<br>$$<br>后面使用杜教筛等。</p><p>化简为：<br>$$<br>\begin{aligned}<br>S(n) &amp;=\sum_{T=1}^nT^2\varphi(T) \\ &amp;=\sum_{i=1}^ni^3-\sum_{i=1}^ni^2S(\dfrac{n}{i})<br>\end{aligned}<br>$$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e7</span> + <span class="number">10</span>;</span><br><span class="line">ll Mod, sphi[N], n, inv2, inv6;</span><br><span class="line"><span class="keyword">int</span> prime[N], cnt, phi[N];</span><br><span class="line"><span class="keyword">bool</span> st[N];</span><br><span class="line">map &lt;ll, ll&gt; Sphi;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">phi[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; N; ++ i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!st[i]) prime[cnt ++] = i, phi[i] = i - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt &amp;&amp; i * prime[j] &lt; N; ++ j)</span><br><span class="line">&#123;</span><br><span class="line">st[i * prime[j]] = <span class="number">1</span>, phi[i * prime[j]] = phi[i] * phi[prime[j]];</span><br><span class="line"><span class="keyword">if</span> (i % prime[j] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">phi[i * prime[j]] = phi[i] * prime[j];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++ i) sphi[i] = (sphi[i - <span class="number">1</span>] + phi[i] * (ll)i % Mod * i % Mod) % Mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a, ll k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (k &amp; <span class="number">1</span>) res = res * a % Mod;</span><br><span class="line">a = a * a % Mod;</span><br><span class="line">k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">sum1</span><span class="params">(ll n)</span></span>&#123;<span class="keyword">return</span> (n % Mod) * ((n + <span class="number">1</span>) % Mod) % Mod * inv2 % Mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">sum2</span><span class="params">(ll n)</span></span>&#123;<span class="keyword">return</span> (n % Mod) * ((n + <span class="number">1</span>) % Mod) % Mod * ((<span class="number">2</span> * n + <span class="number">1</span>) % Mod) % Mod * inv6 % Mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">sum3</span><span class="params">(ll n)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">sum1</span>(n) * <span class="built_in">sum1</span>(n) % Mod;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">get_sphi</span><span class="params">(ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n &lt; N) <span class="keyword">return</span> sphi[n];</span><br><span class="line"><span class="keyword">if</span> (Sphi.<span class="built_in">find</span>(n) != Sphi.<span class="built_in">end</span>()) <span class="keyword">return</span> Sphi[n];</span><br><span class="line">ll ans = <span class="built_in">sum3</span>(n);</span><br><span class="line"><span class="keyword">for</span> (ll l = <span class="number">2</span>, r; l &lt;= n; l = r + <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">r = n / (n / l);</span><br><span class="line">ans = (-(<span class="built_in">sum2</span>(r) - <span class="built_in">sum2</span>(l - <span class="number">1</span>)) * <span class="built_in">get_sphi</span>(n / l) % Mod + ans + Mod) % Mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Sphi[n] = ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin &gt;&gt; Mod &gt;&gt; n;</span><br><span class="line">inv2 = <span class="built_in">qpow</span>(<span class="number">2</span>, Mod - <span class="number">2</span>), inv6 = <span class="built_in">qpow</span>(<span class="number">6</span>, Mod - <span class="number">2</span>);</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line">ll res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (ll l = <span class="number">1</span>, r; l &lt;= n; l = r + <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">r = n / (n / l);</span><br><span class="line">res = (res + <span class="built_in">sum1</span>(n / l) * <span class="built_in">sum1</span>(n / l) % Mod</span><br><span class="line">        * ((<span class="built_in">get_sphi</span>(r) - <span class="built_in">get_sphi</span>(l - <span class="number">1</span>) + Mod) % Mod) % Mod) % Mod;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 莫比乌斯反演 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Splay</title>
      <link href="/2021/12/12/Splay/"/>
      <url>/2021/12/12/Splay/</url>
      
        <content type="html"><![CDATA[<p>比较重要的基础数据结构。</p><span id="more"></span><h2 id="Splay"><a href="#Splay" class="headerlink" title="Splay"></a>Splay</h2><p>前置知识：平衡二叉树，Treap / 左旋右旋操作。</p><h3 id="1基本原理"><a href="#1基本原理" class="headerlink" title="1基本原理"></a>1基本原理</h3><p>每操作一次，均将该节点旋至树根。</p><h3 id="2-核心操作"><a href="#2-核心操作" class="headerlink" title="2.核心操作"></a>2.核心操作</h3><p>即 Splay 操作.。</p><p>定义 $splay(x,k)$ 为将点 x 旋转至 k 的下面。</p><p>特别的，$splay(x,0)$ 定义为将 x 旋转至根。</p><p>有四种情况，两种分类。</p><p>注意，转 x 的意思就是将 x 转到父节点。</p><p>假设 z 是 y 的父亲，y 是 x 的父亲。</p><p>第一种：成一条链的形状。</p><p>先转 y，再转 x。</p><p>第二种：成折线的形状。</p><p>转两次 x。</p><p>一般来说，k 的取值一般只有是 0 或根。</p><h3 id="3-支持操作"><a href="#3-支持操作" class="headerlink" title="3.支持操作"></a>3.支持操作</h3><h4 id="1）插入"><a href="#1）插入" class="headerlink" title="1）插入"></a>1）插入</h4><p>第一种，就是将 x 直接插入。</p><p>第二种，将一个序列插到 y 的后面。</p><p>主要讲第二种。</p><p>首先，将 y 的后继 z。</p><p>然后，执行 $splay(y,0)$。</p><p>接着，执行 $splay(z,y)$。</p><p>现在，由于 z 是 y 的后继，所以 z 一定没有左子树（否则就不是后继）。</p><p>直接先将插入序列构造成二叉树，接在 z 左子树即可。</p><h4 id="2）删除"><a href="#2）删除" class="headerlink" title="2）删除"></a>2）删除</h4><p>直接讲删除 $[L,R]$。</p><p>先将执行 $splay(L-1,0)$，然后 $splay(R+1,L-1)$。</p><p>此时，$[L,R]$，一定全部在 R+1 的左子树，直接断开来连接即可。</p><h3 id="4-例题"><a href="#4-例题" class="headerlink" title="4.例题"></a>4.例题</h3><h4 id="T1：Splay-文艺平衡树"><a href="#T1：Splay-文艺平衡树" class="headerlink" title="T1：Splay/文艺平衡树"></a>T1：Splay/文艺平衡树</h4><p><a href="https://www.acwing.com/problem/content/2439/">题目传送门 AcWing</a></p><p><a href="https://www.luogu.com.cn/problem/P3391">题目传送门 Luogu</a></p><p>要维护以下信息：</p><ol><li>$size$</li><li>$flag/lazytag$：表示是否会翻转。</li></ol><p>需要维护。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,rt,idx;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> s[<span class="number">2</span>],size,p,v;</span><br><span class="line"><span class="keyword">int</span> flag;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _v,<span class="keyword">int</span> _p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">v=_v;p=_p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;t[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t[p].size=t[t[p].s[<span class="number">0</span>]].size+t[t[p].s[<span class="number">1</span>]].size+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!t[p].flag) <span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">swap</span>(t[p].s[<span class="number">0</span>],t[p].s[<span class="number">1</span>]);</span><br><span class="line">t[t[p].s[<span class="number">0</span>]].flag^=<span class="number">1</span>;</span><br><span class="line">t[t[p].s[<span class="number">1</span>]].flag^=<span class="number">1</span>;</span><br><span class="line">t[p].flag=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//cout&lt;&lt;x&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">int</span> y=t[x].p,z=t[y].p,k=(t[y].s[<span class="number">1</span>]==x);</span><br><span class="line">t[z].s[y==t[z].s[<span class="number">1</span>]]=x,t[x].p=z;</span><br><span class="line">t[y].s[k]=t[x].s[k^<span class="number">1</span>],t[t[x].s[k^<span class="number">1</span>]].p=y;</span><br><span class="line">t[x].s[k^<span class="number">1</span>]=y,t[y].p=x;</span><br><span class="line"><span class="built_in">pushup</span>(y);<span class="built_in">pushup</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//cout&lt;&lt;x&lt;&lt;&#x27; &#x27;&lt;&lt;k&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">while</span> (t[x].p!=k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//cout&lt;&lt;x&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">int</span> y=t[x].p,z=t[y].p;</span><br><span class="line"><span class="keyword">if</span> (z!=k)</span><br><span class="line"><span class="keyword">if</span> ((x==t[y].s[<span class="number">1</span>])^(y==t[z].s[<span class="number">1</span>])) <span class="built_in">rotate</span>(x);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">rotate</span>(y);</span><br><span class="line"><span class="built_in">rotate</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (k==<span class="number">0</span>) rt=x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//cout&lt;&lt;v&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">int</span> u=rt,p=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (u) p=u,u=t[u].s[t[u].v&lt;v];</span><br><span class="line"><span class="keyword">int</span> now=++idx;</span><br><span class="line"><span class="keyword">if</span> (p) t[p].s[v&gt;t[p].v]=now;</span><br><span class="line">t[now].<span class="built_in">init</span>(v,p);</span><br><span class="line"><span class="built_in">splay</span>(now,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_k</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> u=rt;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">pushdown</span>(u);</span><br><span class="line"><span class="keyword">if</span> (t[t[u].s[<span class="number">0</span>]].size&gt;=k) u=t[u].s[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (t[t[u].s[<span class="number">0</span>]].size==k<span class="number">-1</span>) <span class="keyword">return</span> u;</span><br><span class="line"><span class="keyword">else</span> k-=t[t[u].s[<span class="number">0</span>]].size+<span class="number">1</span>,u=t[u].s[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">pushdown</span>(u);</span><br><span class="line"><span class="keyword">if</span> (t[u].s[<span class="number">0</span>]) <span class="built_in">output</span>(t[u].s[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span>&lt;=t[u].v&amp;&amp;t[u].v&lt;=n) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,t[u].v);</span><br><span class="line"><span class="keyword">if</span> (t[u].s[<span class="number">1</span>]) <span class="built_in">output</span>(t[u].s[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n+<span class="number">1</span>;++i) <span class="built_in">insert</span>(i);</span><br><span class="line"><span class="keyword">while</span> (m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;l,&amp;r);</span><br><span class="line">l=<span class="built_in">get_k</span>(l),r=<span class="built_in">get_k</span>(r+<span class="number">2</span>);</span><br><span class="line"><span class="built_in">splay</span>(l,<span class="number">0</span>);<span class="built_in">splay</span>(r,l);</span><br><span class="line">t[t[r].s[<span class="number">0</span>]].flag^=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">output</span>(rt);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T2：-NOI2004-郁闷的出纳员"><a href="#T2：-NOI2004-郁闷的出纳员" class="headerlink" title="T2：[NOI2004] 郁闷的出纳员"></a>T2：[NOI2004] 郁闷的出纳员</h4><p><a href="https://www.luogu.com.cn/problem/P1486">题目传送门 Luogu</a></p><p><a href="https://www.acwing.com/problem/content/952/">题目传送门 AcWing</a></p><p>还是接近于模板，但是要处理一下整个修改。</p><p>我们可以记录一个 $delta$，记录整个的偏移量。</p><p>差不多就可以了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>,INF=<span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> s[<span class="number">2</span>],p;</span><br><span class="line">    <span class="keyword">int</span> val,size;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _val,<span class="keyword">int</span> _p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        val=_val;p=_p;</span><br><span class="line">        size=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;tr[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,rt,m,tot,delta;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[p].size=tr[tr[p].s[<span class="number">0</span>]].size+tr[tr[p].s[<span class="number">1</span>]].size+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y=tr[x].p,z=tr[y].p;</span><br><span class="line">    <span class="keyword">int</span> k=tr[y].s[<span class="number">1</span>]==x;</span><br><span class="line">    tr[x].p=z,tr[z].s[y==tr[z].s[<span class="number">1</span>]]=x;</span><br><span class="line">    tr[tr[x].s[k^<span class="number">1</span>]].p=y,tr[y].s[k]=tr[x].s[k^<span class="number">1</span>];</span><br><span class="line">    tr[y].p=x,tr[x].s[k^<span class="number">1</span>]=y;</span><br><span class="line">    <span class="built_in">pushup</span>(y);<span class="built_in">pushup</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (tr[x].p!=k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> y=tr[x].p,z=tr[y].p;</span><br><span class="line">        <span class="keyword">if</span> (z!=k)</span><br><span class="line">            <span class="keyword">if</span> ((y==tr[z].s[<span class="number">1</span>])^(tr[y].s[<span class="number">1</span>]==x)) <span class="built_in">rotate</span>(x);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">rotate</span>(y);</span><br><span class="line">        <span class="built_in">rotate</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!k) rt=x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u=rt,res;</span><br><span class="line">    <span class="keyword">while</span> (u)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (tr[u].val&gt;=val) res=u,u=tr[u].s[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">else</span> u=tr[u].s[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_k</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u=rt,tmp=k;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (tr[tr[u].s[<span class="number">0</span>]].size&gt;=k) u=tr[u].s[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (tr[tr[u].s[<span class="number">0</span>]].size+<span class="number">1</span>==k)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> tr[u].val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> k-=tr[tr[u].s[<span class="number">0</span>]].size+<span class="number">1</span>,u=tr[u].s[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u=rt,p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (u) p=u,u=tr[u].s[val&gt;tr[u].val];</span><br><span class="line">    u=++tot;</span><br><span class="line">    <span class="keyword">if</span> (p) tr[p].s[val&gt;tr[p].val]=u;</span><br><span class="line">    tr[u].<span class="built_in">init</span>(val,p);</span><br><span class="line">    <span class="built_in">splay</span>(u,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">int</span> L=<span class="built_in">insert</span>(-INF),R=<span class="built_in">insert</span>(INF),cnt=<span class="number">0</span>,x;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> op[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">while</span> (n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s %d&quot;</span>,op,&amp;x);</span><br><span class="line">        <span class="keyword">if</span> (op[<span class="number">0</span>]==<span class="string">&#x27;I&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (x&gt;=m) x-=delta,<span class="built_in">insert</span>(x),cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op[<span class="number">0</span>]==<span class="string">&#x27;A&#x27;</span>) delta+=x;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op[<span class="number">0</span>]==<span class="string">&#x27;S&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            delta-=x;</span><br><span class="line">            R=<span class="built_in">get</span>(m-delta);</span><br><span class="line">            <span class="built_in">splay</span>(R,<span class="number">0</span>);<span class="built_in">splay</span>(L,R);</span><br><span class="line">            tr[L].s[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">            <span class="built_in">pushup</span>(L);<span class="built_in">pushup</span>(R);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (tr[rt].size<span class="number">-2</span>&lt;x) <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">get_k</span>(tr[rt].size-x)+delta);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,cnt-(tr[rt].size<span class="number">-2</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T3：-HNOI2012-永无乡"><a href="#T3：-HNOI2012-永无乡" class="headerlink" title="T3：[HNOI2012] 永无乡"></a>T3：[HNOI2012] 永无乡</h4><p><a href="https://www.luogu.com.cn/problem/P3224">题目传送门 Luogu</a></p><p><a href="https://www.acwing.com/problem/content/1065/">题目传送门 AcWing</a></p><p>主要是如何维护哪些点在同一个集合。</p><p>首先要使用并查集，同时使用启发式合并。</p><p>顾名思义，启发式合并就是将小的合并到大的上面。</p><p>没什么说的了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> s[<span class="number">2</span>], p;</span><br><span class="line">    <span class="keyword">int</span> key, id;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _key, <span class="keyword">int</span> _id, <span class="keyword">int</span> _p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        key=_key;</span><br><span class="line">        id=_id;</span><br><span class="line">        p=_p;</span><br><span class="line">        size=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; tr[N];</span><br><span class="line"><span class="keyword">int</span> n, tot, rt[N], fa[N], m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[p].size = tr[tr[p].s[<span class="number">0</span>]].size + tr[tr[p].s[<span class="number">1</span>]].size + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y = tr[x].p, z = tr[y].p;</span><br><span class="line">    <span class="keyword">int</span> k = tr[y].s[<span class="number">1</span>] == x;</span><br><span class="line">    tr[x].p=z,tr[z].s[y==tr[z].s[<span class="number">1</span>]]=x;</span><br><span class="line">    tr[tr[x].s[k^<span class="number">1</span>]].p=y,tr[y].s[k]=tr[x].s[k^<span class="number">1</span>];</span><br><span class="line">    tr[y].p = x, tr[x].s[k^<span class="number">1</span>] = y;</span><br><span class="line">    <span class="built_in">pushup</span>(y);<span class="built_in">pushup</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (tr[x].p != k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> y = tr[x].p, z = tr[y].p;</span><br><span class="line">        <span class="keyword">if</span> (z != k)</span><br><span class="line">            <span class="keyword">if</span> ((tr[z].s[<span class="number">1</span>] == y) ^ (tr[y].s[<span class="number">1</span>] == x)) <span class="built_in">rotate</span>(x);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">rotate</span>(y);</span><br><span class="line">        <span class="built_in">rotate</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!k) rt[b] = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_k</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u = rt[b];</span><br><span class="line">    <span class="keyword">while</span> (u)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (tr[tr[u].s[<span class="number">0</span>]].size &gt;= k)</span><br><span class="line">            u = tr[u].s[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (tr[tr[u].s[<span class="number">0</span>]].size == k - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> tr[u].id;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            k -= tr[tr[u].s[<span class="number">0</span>]].size + <span class="number">1</span>, u = tr[u].s[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> id, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u = rt[b], p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (u)</span><br><span class="line">        p = u, u = tr[u].s[key &gt; tr[u].key];</span><br><span class="line">    u = ++tot;</span><br><span class="line">    <span class="keyword">if</span> (p)</span><br><span class="line">        tr[p].s[key &gt; tr[p].key] = u;</span><br><span class="line">    tr[u].<span class="built_in">init</span>(key, id, p);</span><br><span class="line">    <span class="built_in">splay</span>(u, <span class="number">0</span>, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[u].s[<span class="number">0</span>]) <span class="built_in">dfs</span>(tr[u].s[<span class="number">0</span>], b);</span><br><span class="line">    <span class="keyword">if</span> (tr[u].s[<span class="number">1</span>]) <span class="built_in">dfs</span>(tr[u].s[<span class="number">1</span>], b);</span><br><span class="line">    <span class="built_in">insert</span>(tr[u].key, tr[u].id, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (fa[x] != x)</span><br><span class="line">        fa[x] = <span class="built_in">find</span>(fa[x]);</span><br><span class="line">    <span class="keyword">return</span> fa[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        rt[i]=i;</span><br><span class="line">        fa[i]=i;</span><br><span class="line">        tr[i].<span class="built_in">init</span>(x,i,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    tot=n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">        x = <span class="built_in">find</span>(x);</span><br><span class="line">        y = <span class="built_in">find</span>(y);</span><br><span class="line">        <span class="keyword">if</span> (x==y) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (tr[rt[x]].size &gt; tr[rt[y]].size)</span><br><span class="line">            <span class="built_in">swap</span>(x, y);</span><br><span class="line">        <span class="built_in">dfs</span>(rt[x], y);</span><br><span class="line">        fa[x] = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">    <span class="keyword">char</span> op[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s %d %d&quot;</span>, op, &amp;x, &amp;y);</span><br><span class="line">        <span class="keyword">if</span> (op[<span class="number">0</span>] == <span class="string">&#x27;Q&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            x = <span class="built_in">find</span>(x);</span><br><span class="line">            <span class="keyword">if</span> (tr[rt[x]].size &lt; y)</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">get_k</span>(y, x));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            x = <span class="built_in">find</span>(x);</span><br><span class="line">            y = <span class="built_in">find</span>(y);</span><br><span class="line">            <span class="keyword">if</span> (x == y)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (tr[rt[x]].size &gt; tr[rt[y]].size)</span><br><span class="line">                <span class="built_in">swap</span>(x, y);</span><br><span class="line">            <span class="built_in">dfs</span>(rt[x], y);</span><br><span class="line">            fa[x] = y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T4：-NOI2005-维护数列"><a href="#T4：-NOI2005-维护数列" class="headerlink" title="T4：[NOI2005] 维护数列"></a>T4：[NOI2005] 维护数列</h4><p><a href="https://www.luogu.com.cn/problem/P2042">题目传送门 Luogu</a></p><p><a href="https://www.acwing.com/problem/content/957/">题目传送门 AcWing</a></p><p>很麻烦，我们可以一个一个的看。</p><p>（先咕着）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>,INF=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> s[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> val,fa,size;</span><br><span class="line">    <span class="keyword">bool</span> flag,sm;</span><br><span class="line">    <span class="keyword">int</span> ls,rs,tots,sum;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _val,<span class="keyword">int</span> _fa)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sum=val=_val;fa=_fa;s[<span class="number">0</span>]=s[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        flag=sm=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (val&gt;=<span class="number">0</span>) ls=rs=tots=val;</span><br><span class="line">        <span class="keyword">else</span> ls=rs=<span class="number">0</span>,tots=val;</span><br><span class="line">        size=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;tr[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> q[N],st,rt;</span><br><span class="line"><span class="keyword">int</span> tmp[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node &amp;u=tr[x],&amp;l=tr[tr[x].s[<span class="number">0</span>]],&amp;r=tr[tr[x].s[<span class="number">1</span>]];</span><br><span class="line">    u.size=l.size+r.size+<span class="number">1</span>;</span><br><span class="line">    u.sum=l.sum+r.sum+u.val;</span><br><span class="line">    u.ls=<span class="built_in">max</span>(l.ls,l.sum+u.val+r.ls);</span><br><span class="line">    u.rs=<span class="built_in">max</span>(r.rs,r.sum+u.val+l.rs);</span><br><span class="line">    u.tots=<span class="built_in">max</span>(<span class="built_in">max</span>(l.tots,r.tots),l.rs+u.val+r.ls);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node &amp;u=tr[x],&amp;l=tr[tr[x].s[<span class="number">0</span>]],&amp;r=tr[tr[x].s[<span class="number">1</span>]];</span><br><span class="line">    <span class="keyword">if</span> (u.sm)</span><br><span class="line">    &#123;</span><br><span class="line">        u.flag=<span class="number">0</span>;u.sm=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (u.s[<span class="number">0</span>]) l.sm=<span class="number">1</span>,l.val=u.val,l.sum=u.val*l.size;</span><br><span class="line">        <span class="keyword">if</span> (u.s[<span class="number">1</span>]) r.sm=<span class="number">1</span>,r.val=u.val,r.sum=u.val*r.size;</span><br><span class="line">        <span class="keyword">if</span> (u.s[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">if</span> (l.val&gt;=<span class="number">0</span>) l.ls=l.rs=l.tots=l.sum;</span><br><span class="line">            <span class="keyword">else</span> l.ls=l.rs=<span class="number">0</span>,l.tots=l.val;</span><br><span class="line">        <span class="keyword">if</span> (u.s[<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">if</span> (r.val&gt;=<span class="number">0</span>) r.ls=r.rs=r.tots=r.sum;</span><br><span class="line">            <span class="keyword">else</span> r.ls=r.rs=<span class="number">0</span>,r.tots=r.val;</span><br><span class="line"><span class="comment">//         if (l==N-1||r==N-1) puts(&quot;Failed&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (u.flag)</span><br><span class="line">    &#123;</span><br><span class="line">        u.flag=<span class="number">0</span>;</span><br><span class="line">        l.flag^=<span class="number">1</span>;r.flag^=<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">swap</span>(l.ls,l.rs);<span class="built_in">swap</span>(l.s[<span class="number">0</span>],l.s[<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">swap</span>(r.ls,r.rs);<span class="built_in">swap</span>(r.s[<span class="number">0</span>],r.s[<span class="number">1</span>]);</span><br><span class="line"><span class="comment">//if (l==N-1||r==N-1) puts(&quot;Failed&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// pushup(x);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//    pushdown(x);</span></span><br><span class="line">    <span class="keyword">int</span> y=tr[x].fa,z=tr[y].fa;</span><br><span class="line">    <span class="keyword">int</span> k=x==tr[y].s[<span class="number">1</span>];</span><br><span class="line">    tr[z].s[y==tr[z].s[<span class="number">1</span>]]=x,tr[x].fa=z;</span><br><span class="line">    tr[tr[x].s[k^<span class="number">1</span>]].fa=y,tr[y].s[k]=tr[x].s[k^<span class="number">1</span>];</span><br><span class="line">    tr[y].fa=x,tr[x].s[k^<span class="number">1</span>]=y;</span><br><span class="line">    <span class="built_in">pushup</span>(y);<span class="built_in">pushup</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (tr[x].fa!=k)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="comment">//        pushdown(x);</span></span><br><span class="line">        <span class="keyword">int</span> y=tr[x].fa,z=tr[y].fa;</span><br><span class="line"><span class="comment">//        pushdown(z);pushdown(y);</span></span><br><span class="line">        <span class="keyword">if</span> (z!=k)</span><br><span class="line">            <span class="keyword">if</span> ((x==tr[y].s[<span class="number">1</span>])^(y==tr[z].s[<span class="number">1</span>])) <span class="built_in">rotate</span>(x);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">rotate</span>(y);</span><br><span class="line">        <span class="built_in">rotate</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!k) rt=x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// printf(&quot;find:%d(%d,%d,%d) %d\n&quot;,x,tr[x].val,tr[x].size,tr[tr[x].s[0]].size,pos);</span></span><br><span class="line">    <span class="keyword">int</span> u=rt;</span><br><span class="line">    <span class="keyword">while</span> (u)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">pushdown</span>(u);</span><br><span class="line">        <span class="keyword">if</span> (tr[tr[u].s[<span class="number">0</span>]].size&gt;=k) u=tr[u].s[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (tr[tr[u].s[<span class="number">0</span>]].size+<span class="number">1</span>==k) <span class="keyword">return</span> u;</span><br><span class="line">        <span class="keyword">else</span> k-=tr[tr[u].s[<span class="number">0</span>]].size+<span class="number">1</span>, u=tr[u].s[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    q[st++]=x;</span><br><span class="line">    <span class="keyword">if</span> (tr[x].s[<span class="number">0</span>]) <span class="built_in">dfs</span>(tr[x].s[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">if</span> (tr[x].s[<span class="number">1</span>]) <span class="built_in">dfs</span>(tr[x].s[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">make_tree</span><span class="params">(<span class="keyword">int</span> fa,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// printf(&quot;make_tree %d %d %d\n&quot;,fa,l,r);</span></span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>,u=q[--st];</span><br><span class="line">    tr[u].<span class="built_in">init</span>(tmp[mid],fa);</span><br><span class="line">    <span class="keyword">if</span> (l==r)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span> (tmp[mid]&gt;=<span class="number">0</span>) tr[u].tots=tr[u].ls=tr[u].rs=tmp[mid];</span><br><span class="line">    <span class="keyword">else</span> tr[u].tots=tmp[mid],tr[u].ls=tr[u].rs=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> u;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l&lt;mid) tr[u].s[<span class="number">0</span>]=<span class="built_in">make_tree</span>(u,l,mid<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span> (r&gt;mid) tr[u].s[<span class="number">1</span>]=<span class="built_in">make_tree</span>(u,mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="built_in">pushup</span>(u);</span><br><span class="line">    <span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> tot)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l=<span class="built_in">find</span>(pos+<span class="number">1</span>),r=<span class="built_in">find</span>(pos+<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">splay</span>(l,<span class="number">0</span>);<span class="built_in">splay</span>(r,l);</span><br><span class="line"><span class="comment">//    pushdown(r);pushdown(l);</span></span><br><span class="line">    tr[r].s[<span class="number">0</span>]=<span class="built_in">make_tree</span>(r,<span class="number">0</span>,tot<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">pushup</span>(r);<span class="built_in">pushup</span>(l);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> tot)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l=<span class="built_in">find</span>(pos),r=<span class="built_in">find</span>(pos+tot+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">splay</span>(l,<span class="number">0</span>);<span class="built_in">splay</span>(r,l);</span><br><span class="line"><span class="comment">//    pushdown(r);</span></span><br><span class="line"><span class="comment">//    printf(&quot;%d:%d %d:%d\n&quot;,l,tr[l].val,r,tr[r].val);</span></span><br><span class="line">    <span class="built_in">dfs</span>(tr[r].s[<span class="number">0</span>]);</span><br><span class="line">    tr[r].s[<span class="number">0</span>]=<span class="number">0</span>;<span class="built_in">pushup</span>(r);<span class="built_in">pushup</span>(l);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">make_same</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> tot,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l=<span class="built_in">find</span>(pos),r=<span class="built_in">find</span>(pos+tot+<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// printf(&quot;%d:%d %d:%d\n&quot;,l,tr[l].val,r,tr[r].val);</span></span><br><span class="line">    <span class="built_in">splay</span>(l,<span class="number">0</span>);<span class="built_in">splay</span>(r,l);</span><br><span class="line">    Node &amp;now=tr[tr[r].s[<span class="number">0</span>]];</span><br><span class="line">    now.val=x;now.sm=<span class="number">1</span>;</span><br><span class="line">now.sum=x*now.size;</span><br><span class="line">    now.flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (x&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// if (now==N-1) printf(&quot;Failed:::::%d %d %d %d\n&quot;,tr[now].ls,tr[now].rs,tr[now].sum,tr[now].tots);</span></span><br><span class="line">        now.ls=now.rs=now.tots=now.sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> now.ls=now.rs=<span class="number">0</span>,now.tots=x;</span><br><span class="line">    <span class="built_in">pushup</span>(r);<span class="built_in">pushup</span>(l);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> tot)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l=<span class="built_in">find</span>(pos),r=<span class="built_in">find</span>(pos+tot+<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// printf(&quot;%d:%d %d:%d\n&quot;,l,tr[l].val,r,tr[r].val);</span></span><br><span class="line">    <span class="built_in">splay</span>(l,<span class="number">0</span>);<span class="built_in">splay</span>(r,l);</span><br><span class="line">    Node &amp;now=tr[tr[r].s[<span class="number">0</span>]];</span><br><span class="line">now.flag^=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">swap</span>(now.s[<span class="number">0</span>],now.s[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">swap</span>(now.ls,now.rs);</span><br><span class="line">    <span class="built_in">pushup</span>(r);<span class="built_in">pushup</span>(l);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_sum</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> tot)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l=<span class="built_in">find</span>(pos),r=<span class="built_in">find</span>(pos+tot+<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// printf(&quot;%d:%d %d:%d\n&quot;,l,tr[l].val,r,tr[r].val);</span></span><br><span class="line">    <span class="built_in">splay</span>(l,<span class="number">0</span>);<span class="built_in">splay</span>(r,l);</span><br><span class="line">    <span class="keyword">return</span> tr[tr[r].s[<span class="number">0</span>]].sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">pushdown</span>(x);</span><br><span class="line"><span class="keyword">if</span> (tr[x].s[<span class="number">0</span>]) <span class="built_in">output</span>(tr[x].s[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\n&quot;</span>,x,tr[x].val,tr[x].sum,tr[x].ls,tr[x].rs,tr[x].tots,tr[x].s[<span class="number">0</span>],tr[x].s[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span> (tr[x].s[<span class="number">1</span>]) <span class="built_in">output</span>(tr[x].s[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// freopen(&quot;P2042_2.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line"><span class="comment">// freopen(&quot;myans.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;++i) q[st++]=i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    tr[<span class="number">0</span>].tots=-INF;</span><br><span class="line">    tmp[<span class="number">0</span>]=tmp[n+<span class="number">1</span>]=-INF;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;tmp[i]);</span><br><span class="line">    rt=<span class="built_in">make_tree</span>(<span class="number">0</span>,<span class="number">0</span>,n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> pos,tot,x;</span><br><span class="line">    <span class="keyword">char</span> op[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,op);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(op,<span class="string">&quot;INSERT&quot;</span>)==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;pos,&amp;tot);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tot;++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;tmp[i]);</span><br><span class="line">            <span class="built_in">Insert</span>(pos,tot);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(op,<span class="string">&quot;DELETE&quot;</span>)==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;pos,&amp;tot);</span><br><span class="line">            <span class="built_in">remove</span>(pos,tot);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(op,<span class="string">&quot;MAKE-SAME&quot;</span>)==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;pos,&amp;tot,&amp;x);</span><br><span class="line">            <span class="built_in">make_same</span>(pos,tot,x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(op,<span class="string">&quot;REVERSE&quot;</span>)==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;pos,&amp;tot);</span><br><span class="line">            <span class="built_in">reverse</span>(pos,tot);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(op,<span class="string">&quot;GET-SUM&quot;</span>)==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;pos,&amp;tot);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">get_sum</span>(pos,tot));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(op,<span class="string">&quot;MAX-SUM&quot;</span>)==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="comment">// output(rt);</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,tr[rt].tots);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> Splay </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态树</title>
      <link href="/2021/12/12/%E5%8A%A8%E6%80%81%E6%A0%91/"/>
      <url>/2021/12/12/%E5%8A%A8%E6%80%81%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>比较难写，也比较难理解。</p><span id="more"></span><h2 id="动态树"><a href="#动态树" class="headerlink" title="动态树"></a>动态树</h2><h3 id="0-前置知识"><a href="#0-前置知识" class="headerlink" title="0. 前置知识"></a>0. 前置知识</h3><p>Splay</p><p><a href="https://mydcwfy.github.io/2021/12/12/Splay/">我的 Splay 文章</a></p><h3 id="1-主要思想与用途"><a href="#1-主要思想与用途" class="headerlink" title="1. 主要思想与用途"></a>1. 主要思想与用途</h3><p>用于处理树上的联通及统计问题。</p><p>时间复杂度为 $O(m\log n)$。</p><h3 id="2-主要思想"><a href="#2-主要思想" class="headerlink" title="2. 主要思想"></a>2. 主要思想</h3><p><strong>首先声明：祖先和儿子是人为定义的，其实是一棵无根树！</strong></p><p>和树链剖分其实相似，我们也将树的边分为两种，为实边和虚边。</p><p>定义为每个点最多只有一条实边相连它的儿子，其他的我们称为虚边。</p><p>和重链类似，我们定义实边链为实边所连成的链。</p><p>但是，又和树链剖分不同，每一条链用 Splay 维护。所以树被拆成了若干个 Splay。单个点也可以有一个 Splay。</p><p>Splay 维护的就是从祖先到儿子的实边链，形状任意，用中序遍历维护。即我们如果中序遍历这一个 Splay，那么一定得到的是祖先到儿子的访问顺序。</p><p>但一般不称其为树套树（<del>主要是太重要</del>）。</p><p>回忆 Splay 的操作，我们发现：后继就是该点儿子，前驱就是该点父亲。</p><p>虚边不一定维护到真正的点，而是连到整个 Splay 的根节点来维护。具体的表现方式是指我们在儿子所在的 Splay 的根节点的父亲定义为这一个点。但是注意这个点的左右儿子都不是儿子所在 Splay 的根节点。</p><p><strong>一定分清 Splay 的根节点和 Splay 深度最小的点！</strong></p><p>将 Splay 的根节点连接至原树节点所代表的点。</p><p>下面有一个问题：</p><p>怎样区分实边和虚边？</p><p>仔细分析之后，我们发现，虚边只有儿子指向父亲，实边则还有父亲指向儿子。</p><p>所以，我们只要改变父亲所记录的儿子，就可以改变实边与虚边，而无需两边都进行维护。据此我们可以得出一个节点是不是所在 Splay 的根节点：直接判断它父亲有没有一个儿子是他自己。</p><p>画一个图。</p><img src="/2021/12/12/%E5%8A%A8%E6%80%81%E6%A0%91/%E5%8A%A8%E6%80%81%E6%A0%911.png" class=""><p>它建出一堆 Splay 后（有些点没管）：</p><img src="/2021/12/12/%E5%8A%A8%E6%80%81%E6%A0%91/%E5%8A%A8%E6%80%81%E6%A0%912.png" class=""><h3 id="3-主要操作"><a href="#3-主要操作" class="headerlink" title="3. 主要操作"></a>3. 主要操作</h3><h4 id="1）access"><a href="#1）access" class="headerlink" title="1）access"></a>1）access</h4><p>$\operatorname{access}(x)$ 是指将 x 到根节点的路径全部变为实边，把不合法的删去（因为可能有两个儿子的）。注意 $x$ 下面就没有实边了。</p><p>当遇到一个虚边时，假设我们当前的最高的点是 $y$，它的父亲是 $k$，我们将 $k$ 转到 Splay 的根，然后将 $k$ 的右儿子直接赋值为 $y$（可能原来也有值），但是我们要强制断掉，然后使得 $k-y$ 连上。</p><h4 id="2）make-root"><a href="#2）make-root" class="headerlink" title="2）make_root"></a>2）make_root</h4><p>$\operatorname{make_root}(x)$ 是指将 x 变为整颗原树的根节点。</p><p>先调用 $\operatorname{access}(x)$，再直接转上去，调用 reverse。</p><p>将整个树看做是无根树，那么将 x 转到根节点，并打上 reverse 的 flag。</p><p>请注意，现在的拓扑序其实并没有变化，而且只是当前的顺序是变了一下，但是打了一个标记，其实后来走到的时候也要转回去。</p><h4 id="3）find-root"><a href="#3）find-root" class="headerlink" title="3）find_root"></a>3）find_root</h4><p>$\operatorname{find_root}(x)$ 是指找到 x 所在树的深度最小的节点。</p><p>我们直接先 $\text{access}(x)$，然后一直向左儿子走。</p><h4 id="4）split"><a href="#4）split" class="headerlink" title="4）split"></a>4）split</h4><p>$\operatorname{split}(x,y)$ 是指将 x 到 y 的路径建为实边。</p><p>先 $\operatorname{make_root}(x)$，再 $\operatorname{access}(y)$。</p><h4 id="5）link"><a href="#5）link" class="headerlink" title="5）link"></a>5）link</h4><p>这里是指如果 x 和 y 不连通的话，就连起来。</p><p>将 x 转到根节点，判断 y 的根节点是不是 x 即可，如果不是，就直接连上即可。</p><h4 id="6）cut"><a href="#6）cut" class="headerlink" title="6）cut"></a>6）cut</h4><p>先将 x 转到整个树的根节点，再将 y 转至 x 的下面，最后判断 y 是不是 x 的后继。</p><p>注意我们前面说到 $y$ 下面没有实边。如果 x 为根，并且 $x-y$ 是 x 所在的 Splay 唯一的实边。如果是，直接删除。注意要双向删除，既不能作为一个简单的将实边变为虚边，而是儿子到父亲和父亲到儿子都要删。</p><h4 id="7）isroot"><a href="#7）isroot" class="headerlink" title="7）isroot"></a>7）isroot</h4><p>判断 x 是否是所在 Splay 的根节点。前面已经讲到了。</p><hr><p>以上就是 Link-Cut-Tree 的基本函数，也是核心函数。</p><p><strong>非常绕，请务必理解并画图！</strong></p><h3 id="4-代码"><a href="#4-代码" class="headerlink" title="4. 代码"></a>4. 代码</h3><p>其实还算简单，但是细节不少，也有些难理解。</p><p><a href="https://www.luogu.com.cn/problem/P3690">模板 Luogu</a></p><p><a href="https://www.acwing.com/problem/content/2541/">模板 AcWing</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> s[<span class="number">2</span>], fa;</span><br><span class="line">    <span class="keyword">int</span> val, rev;</span><br><span class="line">&#125;tr[N];</span><br><span class="line"><span class="keyword">int</span> n, m, a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[x].val = tr[tr[x].s[<span class="number">0</span>]].val ^ tr[tr[x].s[<span class="number">1</span>]].val ^ a[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[x].rev ^= <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">swap</span>(tr[x].s[<span class="number">0</span>], tr[x].s[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!tr[x].rev) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">reverse</span>(tr[x].s[<span class="number">0</span>]), <span class="built_in">reverse</span>(tr[x].s[<span class="number">1</span>]);<span class="comment">//注意 reverse 的方式</span></span><br><span class="line">    tr[x].rev = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isroot</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x != tr[tr[x].fa].s[<span class="number">0</span>] &amp;&amp; x != tr[tr[x].fa].s[<span class="number">1</span>];&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y = tr[x].fa, z = tr[y].fa;</span><br><span class="line">    <span class="keyword">int</span> k = tr[y].s[<span class="number">1</span>] == x;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">isroot</span>(y)) tr[z].s[y == tr[z].s[<span class="number">1</span>]] = x;</span><br><span class="line">    tr[x].fa = z;</span><br><span class="line">    tr[y].s[k] = tr[x].s[k ^ <span class="number">1</span>], tr[tr[x].s[k ^ <span class="number">1</span>]].fa = y;</span><br><span class="line">    tr[y].fa = x, tr[x].s[k ^ <span class="number">1</span>] = y;</span><br><span class="line">    <span class="built_in">pushup</span>(y), <span class="built_in">pushup</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">isroot</span>(x)) <span class="built_in">update</span>(tr[x].fa);</span><br><span class="line">    <span class="built_in">pushdown</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">update</span>(x);<span class="comment">//先翻转回来</span></span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isroot</span>(x))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> y = tr[x].fa, z = tr[y].fa;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">isroot</span>(y))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((x == tr[y].s[<span class="number">1</span>]) ^ (y == tr[z].s[<span class="number">1</span>])) <span class="built_in">rotate</span>(x);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">rotate</span>(y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">rotate</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> z = x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; x; y = x, x = tr[y].fa)<span class="comment">//最开始的 y 是 0，表示 x 开始没有向儿子的实边了</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">splay</span>(x);</span><br><span class="line">        tr[x].s[<span class="number">1</span>] = y, <span class="built_in">pushup</span>(x);<span class="comment">//更改了信息就要 pushup</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">splay</span>(z);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeroot</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">access</span>(x), <span class="built_in">reverse</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findroot</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">access</span>(x);</span><br><span class="line">    <span class="keyword">while</span> (tr[x].s[<span class="number">0</span>]) <span class="built_in">pushdown</span>(x), x = tr[x].s[<span class="number">0</span>];<span class="comment">//注意要 pushup</span></span><br><span class="line">    <span class="built_in">splay</span>(x);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">makeroot</span>(x);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">findroot</span>(y) != x) tr[x].fa = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">makeroot</span>(x);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">findroot</span>(y) == x &amp;&amp; tr[y].fa == x &amp;&amp; !tr[y].s[<span class="number">0</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        tr[x].s[<span class="number">1</span>] = tr[y].fa = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">pushup</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) tr[i].val = a[i];</span><br><span class="line">    <span class="keyword">int</span> op, x, y;</span><br><span class="line">    <span class="keyword">while</span> (m --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;op, &amp;x, &amp;y);</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">makeroot</span>(x), <span class="built_in">access</span>(y);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, tr[y].val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">1</span>) <span class="built_in">link</span>(x, y);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) <span class="built_in">cut</span>(x, y);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="built_in">access</span>(x);</span><br><span class="line">            a[x] = y, <span class="built_in">pushup</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-例题"><a href="#5-例题" class="headerlink" title="5. 例题"></a>5. 例题</h3><h4 id="T1：魔法森林"><a href="#T1：魔法森林" class="headerlink" title="T1：魔法森林"></a>T1：魔法森林</h4><p><a href="https://www.luogu.com.cn/problem/P2387">题目传送门 Luogu</a></p><p><a href="https://www.acwing.com/problem/content/1001/">题目传送门 AcWing</a></p><p>看似是一个最短路，但是我们的最短路是处理单元的，并且两个没有联系，我们必须转换。</p><p>枚举 $a[i]$ 的取值，是 $\max(a[i])$ 答案为 $a[x]$，我们可以现在取不超过 $a[x]$ 的边，再求 $\max(b[i])$ 的值。</p><p>首先，我们考虑怎样维护整张图。</p><p>可以从小到大枚举 $a[i]$，使只加入边。</p><p>加入边，就是 <strong>Link-Cut-Tree</strong> 的模板。</p><p>但是，有一个问题：动态树只能维护树，而不能维护图，怎么办？</p><p>当加入一条边时，形成环时，我们去掉整个环的最大值，一定不会影响答案。</p><p>原因是如果取删掉的边，一定在删除这条边后可以找到比该解更优或者相同的解。</p><p>最后一个问题：怎样维护边上的权值？</p><p>我们可以使用 <strong>边化点</strong> 的技巧。</p><p>即在边中建一个点，使其的权值等于边的取值，即可。</p><p>（说实话很久前写的了，有些记不得了。而且码风还没改）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> isroot(x) (tr[tr[x].p].s[0]!=x&amp;&amp;tr[tr[x].p].s[1]!=x)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">5e4</span>+<span class="number">10</span>,INF=<span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,p[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> s[<span class="number">2</span>],p;</span><br><span class="line">    <span class="keyword">int</span> val,mx,flag;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _p,<span class="keyword">int</span> _val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        p=_p;val=_val;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;tr[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y,a,b;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> Edge &amp;t) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a&lt;t.a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;e[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[x].mx=x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">2</span>;k++)</span><br><span class="line">        <span class="keyword">if</span> (tr[tr[tr[x].s[k]].mx].val&gt;tr[tr[x].mx].val) tr[x].mx=tr[tr[x].s[k]].mx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">swap</span>(tr[x].s[<span class="number">0</span>],tr[x].s[<span class="number">1</span>]);</span><br><span class="line">    tr[x].flag^=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!tr[x].flag) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">reverse</span>(tr[x].s[<span class="number">0</span>]);<span class="built_in">reverse</span>(tr[x].s[<span class="number">1</span>]);</span><br><span class="line">    tr[x].flag=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y=tr[x].p,z=tr[y].p;</span><br><span class="line">    <span class="keyword">int</span> k=tr[y].s[<span class="number">1</span>]==x;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">isroot</span>(y)) tr[z].s[tr[z].s[<span class="number">1</span>]==y]=x;</span><br><span class="line">    tr[x].p=z;</span><br><span class="line">    tr[y].s[k]=tr[x].s[k^<span class="number">1</span>],tr[tr[x].s[k^<span class="number">1</span>]].p=y;</span><br><span class="line">    tr[x].s[k^<span class="number">1</span>]=y,tr[y].p=x;</span><br><span class="line">    <span class="built_in">pushup</span>(y);<span class="built_in">pushup</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updata</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">isroot</span>(x)) <span class="built_in">updata</span>(tr[x].p);</span><br><span class="line">    <span class="built_in">pushdown</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">updata</span>(x);</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isroot</span>(x))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> y=tr[x].p,z=tr[y].p;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">isroot</span>(y))</span><br><span class="line">            <span class="keyword">if</span> ((tr[z].s[<span class="number">1</span>]==y)^(tr[y].s[<span class="number">1</span>]==x)) <span class="built_in">rotate</span>(x);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">rotate</span>(y);</span><br><span class="line">        <span class="built_in">rotate</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> z=x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> y=<span class="number">0</span>;x;y=x,x=tr[y].p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">splay</span>(x);</span><br><span class="line">        tr[x].s[<span class="number">1</span>]=y;<span class="built_in">pushup</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">splay</span>(z);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeroot</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">access</span>(x);</span><br><span class="line">    <span class="built_in">reverse</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findroot</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">access</span>(x);</span><br><span class="line">    <span class="keyword">while</span> (tr[x].s[<span class="number">0</span>]) <span class="built_in">pushdown</span>(x),x=tr[x].s[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">splay</span>(x);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">makeroot</span>(x);</span><br><span class="line">    <span class="built_in">access</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">makeroot</span>(x);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">findroot</span>(y)!=x) tr[x].p=y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">split</span>(x,y);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">findroot</span>(y)==x&amp;&amp;tr[y].p==x&amp;&amp;!tr[y].s[<span class="number">1</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        tr[y].p=tr[x].s[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">pushup</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p[x]!=x) p[x]=<span class="built_in">find</span>(p[x]);</span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,x,y,a,b;i&lt;=m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d&quot;</span>,&amp;x,&amp;y,&amp;a,&amp;b);</span><br><span class="line">        e[i]=(Edge)&#123;x,y,a,b&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(e+<span class="number">1</span>,e+m+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        p[i]=i;</span><br><span class="line">        <span class="keyword">if</span> (i&gt;n) tr[i].val=e[i-n].b;</span><br><span class="line">        tr[i].mx=i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> res=INF;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,x,y,t,a,b;i&lt;=m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        x=e[i].x,y=e[i].y,a=e[i].a,b=e[i].b;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">find</span>(x)==<span class="built_in">find</span>(y))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">split</span>(x,y);</span><br><span class="line">            t=tr[y].mx;</span><br><span class="line">            <span class="keyword">if</span> (tr[t].val&gt;b)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cut</span>(e[t-n].x,t);<span class="built_in">cut</span>(t,e[t-n].y);</span><br><span class="line">                <span class="built_in">link</span>(x,n+i);<span class="built_in">link</span>(n+i,y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            p[<span class="built_in">find</span>(x)]=<span class="built_in">find</span>(y);</span><br><span class="line">            <span class="built_in">link</span>(x,n+i),<span class="built_in">link</span>(n+i,y);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">find</span>(<span class="number">1</span>)==<span class="built_in">find</span>(n))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">split</span>(<span class="number">1</span>,n);</span><br><span class="line">            res=<span class="built_in">min</span>(res,a+tr[tr[n].mx].val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// printf(&quot;%d\n&quot;,res);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (res==INF) res=<span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> Splay </tag>
            
            <tag> 动态树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多项式汇总</title>
      <link href="/2021/12/12/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E6%B1%87%E6%80%BB/"/>
      <url>/2021/12/12/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<p>大杂烩。建议先学 FFT 和 NTT。</p><p>也可以来这里找代码。</p><p><strong>注意清空数组！</strong></p><p><strong>会不断更新。</strong></p><span id="more"></span><p>这里汇总了所有<del>我所学过的</del>多项式的板子。</p><p>既是存代码，也是简单的讲解。</p><p>首先甩一个 NTT 在这里。</p><p>前置知识：FFT。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a, ll k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (k &amp; <span class="number">1</span>) res = res * a % Mod;</span><br><span class="line">        a = a * a % Mod;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_rev</span><span class="params">(<span class="keyword">int</span> bit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; (<span class="number">1</span> &lt;&lt; bit); ++ i)</span><br><span class="line">        rev[i] = (rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (bit - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NTT</span><span class="params">(ll *a, <span class="keyword">int</span> bit, <span class="keyword">int</span> inv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">get_rev</span>(bit);</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">1</span> &lt;&lt; bit;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++ i)</span><br><span class="line">        <span class="keyword">if</span> (rev[i] &lt; i) <span class="built_in">swap</span>(a[rev[i]], a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> mid = <span class="number">1</span>; mid &lt; tot; mid &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ll ak = <span class="built_in">qpow</span>(<span class="number">3</span>, (Mod - <span class="number">1</span>) / (mid &lt;&lt; <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span> (inv == <span class="number">-1</span>) ak = <span class="built_in">qpow</span>(ak, Mod - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; i += (mid &lt;&lt; <span class="number">1</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            ll now = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; mid; ++ j, now = now * ak % Mod)</span><br><span class="line">            &#123;</span><br><span class="line">                ll x = a[i + j], y = a[i + j + mid] * now % Mod;</span><br><span class="line">                a[i + j] = (x + y) % Mod, a[i + j + mid] = (x - y + Mod) % Mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (inv == <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    ll Inv = <span class="built_in">qpow</span>(tot, Mod - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++ i) a[i] = a[i] * Inv % Mod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-多项式求逆"><a href="#1-多项式求逆" class="headerlink" title="1. 多项式求逆"></a>1. 多项式求逆</h2><p>可以考虑倍增。</p><p>默认 $\dfrac{n}{2}=\lfloor\dfrac{n+1}{2}\rfloor$</p><p>假设我们已经求出了 $h(x)\equiv f(x)^{-1}\pmod{x^{\frac{n}{2}}}$。</p><p>我们需要求 $g(x)\equiv f(x)^{-1}\pmod{x^n}$。</p><p>很明显，可以得到：$g(x)-h(x)\equiv 0\pmod {x^{\frac{n}{2} } }$。</p><p>平方一下，就是 $g^2(x)-2g(x)h(x)+h^2(x)\equiv 0\pmod {x^n}$。</p><p>有一个 $g^2(x)$，我们考虑搞掉一个，所以乘一个 $f(x)$，也就是 $g(x)-2h(x)+h^2(x)f(x)\equiv 0\pmod {x^n}$。</p><p>于是：$g(x)\equiv h(x)(2-h(x)f(x))\pmod {x^n}$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_ni</span><span class="params">(ll *a, ll *b, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        b[<span class="number">0</span>] = <span class="built_in">qpow</span>(a[<span class="number">0</span>], Mod - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> bit = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((<span class="number">1</span> &lt;&lt; bit) &lt; (len &lt;&lt; <span class="number">1</span>)) bit ++;</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">1</span> &lt;&lt; bit;</span><br><span class="line">    <span class="built_in">get_ni</span>(a, b, (len + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">static</span> ll c[N];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = (len + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>; i &lt; tot; ++ i) b[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++ i)</span><br><span class="line">        <span class="keyword">if</span> (i &lt; len) c[i] = a[i];</span><br><span class="line">        <span class="keyword">else</span> c[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">NTT</span>(c, bit, <span class="number">1</span>), <span class="built_in">NTT</span>(b, bit, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++ i)</span><br><span class="line">        b[i] = (<span class="number">2</span> - b[i] * c[i] % Mod + Mod) % Mod * b[i] % Mod;</span><br><span class="line">    <span class="built_in">NTT</span>(b, bit, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; ++ i) b[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-多项式-ln"><a href="#2-多项式-ln" class="headerlink" title="2. 多项式 ln"></a>2. 多项式 ln</h2><p>考虑：$g(x)=\ln f(x)$。</p><p>同时求导：$g’(x)=\ln f(x)$。</p><p>看做复合函数，$h(x)=\ln x$，那么 $\ln f(x) = h(f(x)) = \dfrac{1}{f(x)} \cdot f’(x)$。</p><p>然后又有求导和积分公式：<br>$$<br>\begin{aligned}<br>x^ {a’} &amp;= a x ^ {a - 1}\<br>\int x ^ a dx &amp;= \dfrac{1} {a + 1} x ^ {a + 1}<br>\end{aligned}<br>$$<br>顺便把求导的和积分的放进来。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_dao</span><span class="params">(ll *a, ll *b, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; ++ i) b[i - <span class="number">1</span>] = a[i] * i % Mod;</span><br><span class="line">    b[len - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_ji</span><span class="params">(ll *a, ll *b, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; ++ i) b[i] = a[i - <span class="number">1</span>] * <span class="built_in">qpow</span>(i, Mod - <span class="number">2</span>) % Mod;</span><br><span class="line">    b[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_ln</span><span class="params">(ll *a, ll *b, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ll c[N], d[N];</span><br><span class="line">    <span class="built_in">get_dao</span>(a, c, len), <span class="built_in">get_ni</span>(a, d, len);</span><br><span class="line">    <span class="keyword">int</span> bit = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((<span class="number">1</span> &lt;&lt; bit) &lt; (len &lt;&lt; <span class="number">1</span>)) bit ++;</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">1</span> &lt;&lt; bit;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; ++ i) c[i] = d[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">NTT</span>(c, bit, <span class="number">1</span>), <span class="built_in">NTT</span>(d, bit, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++ i) c[i] = c[i] * d[i] % Mod;</span><br><span class="line">    <span class="built_in">NTT</span>(c, bit, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; ++ i) c[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">get_ji</span>(c, b, len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; ++ i) b[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-多项式-exp"><a href="#3-多项式-exp" class="headerlink" title="3. 多项式 exp"></a>3. 多项式 exp</h2><p>这个需要牛顿迭代。</p><p>假设我们要找到一个函数的零点，我们当前找到的值为 $x_0$，怎样才能逼近更优解呢？</p><p>画一个图。</p><img src="/2021/12/12/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E6%B1%87%E6%80%BB/%E7%89%9B%E9%A1%BF%E8%BF%AD%E4%BB%A3%E5%9B%BE.png" class=""><p>看到上面的函数图像，我们发现，可以直接对该点进行求导，然后交到 $x$ 轴的位置，会更靠近答案。</p><p>于是我们可以得到式子：<br>$$<br>x_1 = x_0 - \dfrac{y_0}{f’(x_0)}<br>$$<br>精度就可以不断提高。</p><p>回到本题，<del>经过我不会的证明</del>，可以得到，单次牛顿迭代后，答案可以由 $\pmod{x ^ { \frac{n} {2} } }$ 变为 $\pmod{ x^n }$。</p><p>那么，假设我们已经确定了 $h(x) = e ^ {f(x)} \pmod {x ^ {\frac {n}{2} } }$，要求 $g(x) = e ^{f(x)} \pmod {x ^ n}$。</p><p>我们考虑构造 $A(x) = \ln g(x) - f(x) = 0$，求 $g(x)$，现在我们已经找到了一个近似的 $h(x)$。</p><p>带入上面的式子，就是：<br>$$<br>\begin{aligned}<br>g(x) &amp;\equiv h(x) - \dfrac{A(h(x))} {A’(h(x))}<br>\\ &amp;\equiv h(x) - A(h(x))h(x)<br>\\ &amp;\equiv h(x) - (\ln h(x) - f(x))h(x)<br>\\ &amp;\equiv h(x)(1 - \ln h(x) + f(x))<br>\\ &amp;\pmod {x^n}<br>\end{aligned}<br>$$<br>直接 NTT 就可以了。注意保证 $f(0) = 0$，也就是常数项为 1。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_exp</span><span class="params">(ll *a, ll *b, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        b[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> bit = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((<span class="number">1</span> &lt;&lt; bit) &lt; (len &lt;&lt; <span class="number">1</span>)) bit ++;</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">1</span> &lt;&lt; bit;</span><br><span class="line">    <span class="built_in">get_exp</span>(a, b, (len + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">static</span> ll d[N];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++ i) d[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">get_ln</span>(b, d, len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++ i) d[i] = (a[i] - d[i] + Mod) % Mod;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; ++ i) d[i] = <span class="number">0</span>;</span><br><span class="line">    d[<span class="number">0</span>] ++;</span><br><span class="line">    <span class="built_in">NTT</span>(d, bit, <span class="number">1</span>), <span class="built_in">NTT</span>(b, bit, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++ i)</span><br><span class="line">        b[i] = b[i] * d[i] % Mod;</span><br><span class="line">    <span class="built_in">NTT</span>(b, bit, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; tot; ++ i) b[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-多项式快速幂"><a href="#4-多项式快速幂" class="headerlink" title="4. 多项式快速幂"></a>4. 多项式快速幂</h2><p>比较简单。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 多项式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>斯特林数</title>
      <link href="/2021/12/12/%E6%96%AF%E7%89%B9%E6%9E%97%E6%95%B0/"/>
      <url>/2021/12/12/%E6%96%AF%E7%89%B9%E6%9E%97%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>后面比较难理解，但是前面比较简单。</p><span id="more"></span><h2 id="1-第一类斯特林数"><a href="#1-第一类斯特林数" class="headerlink" title="1. 第一类斯特林数"></a>1. 第一类斯特林数</h2><h3 id="一）定义"><a href="#一）定义" class="headerlink" title="一）定义"></a>一）定义</h3><p>是指将 $n$ 个不同的数划分成 $k$ 个圆排列的方案数，记作 $s(n,k)$ 或者 $n\brack m$。</p><h3 id="二）求法"><a href="#二）求法" class="headerlink" title="二）求法"></a>二）求法</h3><p>使用递推的方法。</p><p>第一种情况是 $n$ 专门放入 1 个圆排列，剩下的 $n-1$ 放入剩下的 $k-1$ 的圆排列中，这一类答案的贡献是 $s(n-1,k-1)$。</p><p>第二种情况是 $n$ 放入已有的 $k$ 个圆排列中。因为每一个数是不同的，所以可以发现，在一个圆排列中，可以放的位置（且不重复）恰好等于当前圆排列的大小。前面放的 $n-1$ 个数，所以有 $n-1$ 种方法，贡献为 $(n-1)\times s(n-1,k)$。</p><p>那么，我们就可以得到递推公式：</p><p>$$<br>s(n,k)=s(n-1,k-1)+(n-1)\times s(n-1,k)<br>$$</p><h3 id="三）性质"><a href="#三）性质" class="headerlink" title="三）性质"></a>三）性质</h3><ol><li><p>$s(n,n)=1$：显然，每一个数放一个圆排列。</p></li><li><p>$s(n,1)=(n-1)!$：首先，不考虑旋转的话，就是 $n!$，但是每一种会对应 $n$ 种相同的，所以就是 $(n-1)!$。</p></li><li><p>$s(n, n-2) = 2\binom{n}{3}+3\binom{n}{4}$：其实都是一些简单的推导了。此处略去。</p></li><li><p>$\sum_{k=0}^ns(n,k)=n!$：这个需要用到第一类斯特林数的另一种表示方法，我们等一下再讲。</p></li></ol><p>首先，我们定义一个 $x^{\bar n}=x(x+1)…(x+n-1)$，也就是上升幂。</p><p><strong>定理</strong>：$x^{\bar{n}}=\sum_{k=0}^ns(n,k)x^k$。</p><p>证明：使用递推的方法，我们假设最后一个乘的是 $x$ 而不是 $n-1$，那么，对于 $x^k$ 的贡献就是剩下的 $x^{\overline{n-1}}$ 在 $x^{k-1}$ 的贡献。</p><p>如果最后乘的是 $n-1$，那么对于 $x^k$ 的贡献就是 $x^{\overline{n-1}}$ 在 $x^k$ 的贡献再乘上 $n-1$。</p><p>综上，我们发现和 $s(n,k)$ 的递推公式一模一样，所以定理得证。</p><p>接着，利用定理，我们令 $x=1$，那么可以化为：</p><p>$$<br>n!=\sum_{k=0}^ns(n,k)<br>$$</p><h2 id="2-第二类斯特林数"><a href="#2-第二类斯特林数" class="headerlink" title="2. 第二类斯特林数"></a>2. 第二类斯特林数</h2><h3 id="一）定义-1"><a href="#一）定义-1" class="headerlink" title="一）定义"></a>一）定义</h3><p>是指将 $n$ 个不同的数划分 $k$ 个子集的方案数，记为 $S(n,k)$ 或 $n\brace m$。</p><h3 id="二）求法-1"><a href="#二）求法-1" class="headerlink" title="二）求法"></a>二）求法</h3><p>如果我们单独将 $n$ 放入一个集合，就是 $S(n-1,k-1)$。</p><p>如果我们将 $n$ 归入前面的 $k$ 个集合，就是 $k\times S(n-1,k)$。</p><p>于是，递推式就是：</p><p>$$<br>S(n,k)=S(n-1,k-1)+k\times S(n-1,k)<br>$$</p><h2 id="3-例题"><a href="#3-例题" class="headerlink" title="3. 例题"></a>3. 例题</h2><h4 id="T1：-FJOI2016-建筑师"><a href="#T1：-FJOI2016-建筑师" class="headerlink" title="T1：[FJOI2016]建筑师"></a>T1：[FJOI2016]建筑师</h4><p><a href="https://www.luogu.com.cn/problem/P4609">题目传送门 Luogu</a></p><p>首先，一个显然的东西是：最高的肯定不会被挡住。</p><p>所以，我们可以将 $n$ 的位置枚举，然后左边可以看到 $A-1$ 个，右边可以看到 $B-1$ 个（均没有计算 $n$ 的贡献）。</p><p>然后，我们可以将这些可以看到的建筑以及它后面被挡住的分为一组。</p><p>可以在这一组中，因为最高的一定放在最前面。如果接在一起，可以看做一个圆排列，并且贡献就是 $1$。</p><p>这不就是第一类斯特林数吗！</p><p>我们就是将 $n-1$ 个放入 $A+B-2$ 个圆排列，贡献就是 ${n-1}\brack{A+B-2}$。</p><p>然后，我们要选择 $A-1$ 个放在前面，于是就是 ${A+B-2}\choose {A-1}$。</p><p>答案就是<br>$$<br>{ {n - 1} \brack {A + B - 2} } \times { { A + B - 2} \choose {A - 1} }<br>$$</p><p>直接递推，时间复杂度为 $O(nk)$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e4</span> + <span class="number">10</span>, K = <span class="number">205</span>, Mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">ll s[N][K], C[K][K];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++ i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; K; ++ j)</span><br><span class="line">            s[i][j] = (s[i - <span class="number">1</span>][j - <span class="number">1</span>] + (i - <span class="number">1</span>) * s[i - <span class="number">1</span>][j]) % Mod;</span><br><span class="line">    C[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; K; ++ i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; K; ++ j)</span><br><span class="line">            <span class="keyword">if</span> (!j) C[i][j] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> C[i][j] = (C[i - <span class="number">1</span>][j] + C[i - <span class="number">1</span>][j - <span class="number">1</span>]) % Mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="comment">// cout &lt;&lt; C[5][3] &lt;&lt; &#x27; &#x27; &lt;&lt; s[4][1] &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">int</span> t, n, a, b;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;n, &amp;a, &amp;b);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, s[n - <span class="number">1</span>][a + b - <span class="number">2</span>] * C[a + b - <span class="number">2</span>][a - <span class="number">1</span>] % Mod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有 Luogu 上的几道神仙题（一紫三黑），我们简单的讲一下。</p><h4 id="T1：第二类斯特林数-·-行"><a href="#T1：第二类斯特林数-·-行" class="headerlink" title="T1：第二类斯特林数 · 行"></a>T1：第二类斯特林数 · 行</h4><p><a href="https://www.luogu.com.cn/problem/P5395">题目传送门 Luogu</a></p><p>我们可以这样考虑：<br>$$<br>{n \brace m} = \sum_{i=0}^m\dfrac{(-1)^i}{i!}\cdot \dfrac{(m-i)^n}{(m-i)!}<br>$$<br>发现可以先构造左边的 $f(x)=\sum_{i=0}^n \dfrac{(-1)^i}{i!},g(x)=\sum_{i=0}^n \dfrac{i^n}{i!}$，直接 NTT 卷积即可，就可以得到每一项 $h_m$ 所对应的项。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++ i) a[i] = <span class="built_in">qpow</span>(i, n) * infact[i] % Mod;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++ i) b[i] = (i &amp; <span class="number">1</span> ? Mod - infact[i] : infact[i]);</span><br><span class="line">    <span class="keyword">int</span> bit = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span> &lt;&lt; bit &lt; (n &lt;&lt; <span class="number">1</span>)) bit ++;</span><br><span class="line">    <span class="built_in">NTT</span>(a, bit, <span class="number">1</span>), <span class="built_in">NTT</span>(b, bit, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; bit); ++ i) a[i] = a[i] * b[i] % Mod;</span><br><span class="line">    <span class="built_in">NTT</span>(a, bit, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++ i) <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>, a[i]);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T2：第二类斯特林数-·-列"><a href="#T2：第二类斯特林数-·-列" class="headerlink" title="T2：第二类斯特林数 · 列"></a>T2：第二类斯特林数 · 列</h4><p><a href="https://www.luogu.com.cn/problem/P5396">题目传送门 Luogu</a></p><p>直接考虑指数型生成函数。</p><p>先看做 $n$ 个元素是相同的，$m$ 个盒子是不同的。</p><p>如果只有一个集合，用 $x^n$ 的系数表示方案数，那么就是：<br>$$<br>f(x)=\sum_{i=1}\dfrac{x^i}{i!}<br>$$<br>（注意指数型生成函数本身就要除以 $i!$，才能得到系数）</p><p>可以用 Taylor 展开式得到：$f(x)=e^x-1$（因为不是从 $i=0$ 开始的）。</p><p>那么，有 $m$ 个集合，就是 $g(x)=f(x)^k$，得到的系数再乘以一个 $i!$ 再除以 $m!$ 就可以得到答案了。</p><p>快速幂直接是 $g(x)=e^\left(k\ln f(x) \right)$。多项式 $\ln,\exp$ 结束了。注意第一项是 0，要整体向右平移 1 个单位，最后向左平移 $k$ 个单位。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">int</span> n, k;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    n ++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++ i) f[i] = infact[i + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">static</span> ll c[N];</span><br><span class="line">    <span class="built_in">get_ln</span>(a, c, len);</span><br><span class="line">    <span class="keyword">int</span> bit = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((<span class="number">1</span> &lt;&lt; bit) &lt; (len &lt;&lt; <span class="number">1</span>)) bit ++;</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">1</span> &lt;&lt; bit;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++ i) c[i] = c[i] * k % Mod;</span><br><span class="line">    <span class="built_in">get_exp</span>(c, b, len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= k; -- i) g[i] = g[i - k];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++ i) g[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>, g[i] * fact[i] % Mod * infact[k] % Mod);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T3：第一类斯特林数-·-行"><a href="#T3：第一类斯特林数-·-行" class="headerlink" title="T3：第一类斯特林数 · 行"></a>T3：第一类斯特林数 · 行</h4><p><a href="https://www.luogu.com.cn/problem/P5408">题目传送门 Luogu</a></p><p>首先，<del>由题解</del>可以得到：<br>$$<br>x^{\overline n} = \sum_{i=0}^{n}{n \brack i}x^i<br>$$<br>题目转化为求 $x^{\overline n}$ 的系数。</p><p>考虑倍增的算法。</p><p>已经得到了 $f(x)$，求 $f(x+c)$。</p><p>二项式定理就可以了。<br>$$<br>\begin{aligned}<br>f(x+c)&amp;=\sum_{i=0}^n[x^i]f(x)\sum_{j=0}^i {i \choose j}x^j c^{i-j} \<br>&amp;=\sum_{i=0}^n[x^i]f(x)\sum_{j=0}^i \dfrac{i!}{j!\cdot (i-j)!} x^j c^{i-j}\<br>&amp;=\sum_{j=0}^n \dfrac{x^j}{j!}\cdot \sum_{i=j}^n\dfrac{c^{i-j}}{(i-j)!}[x^i]f(x) i!\<br>\end{aligned}<br>$$<br>很明显可以化为两个式子：$g(x)=\sum_{i=0}^n \dfrac{c^i}{i!}x^i,h(x)=[x^i]f(x)i!x^i$，发现就是次数相减。</p><p>将 $h(x)$ 翻转为 $[x^i]f(x)i! x^{n-i}$，那么就是次数相加了，变为 NTT 就可以了。</p><p>回归本题。<br>$$<br>x^{\overline {2n}} = x^{\overline n}\cdot (x+n)^{\overline{n}}<br>$$<br>先将 $x^\overline n$ 求出来，然后上面的式子（可以叫多项式平移）推出 $(x+n)^\overline n$，NTT 一下就是了。</p><p>注意 $n$ 为奇数的时候，可以直接暴力求 $x^\overline {n-1}\cdot (x+n)$ 即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_sti</span><span class="params">(<span class="keyword">int</span> n, ll *a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n &lt; <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> ll c[N], d[N], t[N];</span><br><span class="line"><span class="keyword">if</span> (n &amp; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">get_sti</span>(n - <span class="number">1</span>, a);</span><br><span class="line">c[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) c[i + <span class="number">1</span>] = a[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) c[i] = (c[i] + a[i] * (n - <span class="number">1</span>) % Mod) % Mod;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++ i) a[i] = c[i];</span><br><span class="line"><span class="comment">// cout &lt;&lt; n &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">// for (int i = 0; i &lt;= n; ++ i) cout &lt;&lt; a[i] &lt;&lt; &#x27; &#x27;;</span></span><br><span class="line"><span class="comment">// puts(&quot;&quot;);</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">get_sti</span>(n &gt;&gt; <span class="number">1</span>, a);</span><br><span class="line"><span class="keyword">int</span> m = n &gt;&gt; <span class="number">1</span>, bit = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((<span class="number">1</span> &lt;&lt; bit) &lt; n + <span class="number">1</span>) bit ++;</span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">1</span> &lt;&lt; bit;</span><br><span class="line">ll now = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; ++ i) c[m - i] = a[i] * fact[i] % Mod;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; ++ i, now = now * m % Mod) d[i] = now * infact[i] % Mod;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = m + <span class="number">1</span>; i &lt; tot; ++ i) c[i] = d[i] = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// for (int i = 0; i &lt;= m; ++ i) cout &lt;&lt; c[i] &lt;&lt; &quot; \n&quot;[i == m];</span></span><br><span class="line"><span class="comment">// for (int i = 0; i &lt;= m; ++ i) cout &lt;&lt; d[i] &lt;&lt; &quot; \n&quot;[i == m];</span></span><br><span class="line"><span class="built_in">NTT</span>(c, bit, <span class="number">1</span>), <span class="built_in">NTT</span>(d, bit, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++ i) c[i] = c[i] * d[i] % Mod;</span><br><span class="line"><span class="built_in">NTT</span>(c, bit, <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; ++ i) t[i] = c[m - i] * infact[i] % Mod;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = m + <span class="number">1</span>; i &lt; tot; ++ i) t[i] = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// for (int i = 0; i &lt;= m; ++ i) cout &lt;&lt; t[i] &lt;&lt; &quot; \n&quot;[i == m];</span></span><br><span class="line"><span class="built_in">NTT</span>(a, bit, <span class="number">1</span>), <span class="built_in">NTT</span>(t, bit, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++ i) a[i] = a[i] * t[i] % Mod;</span><br><span class="line"><span class="built_in">NTT</span>(a, bit, <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n + <span class="number">1</span>; i &lt; tot; ++ i) a[i] = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// cout &lt;&lt; n &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">// for (int i = 0; i &lt;= n; ++ i) cout &lt;&lt; a[i] &lt;&lt; &#x27; &#x27;;</span></span><br><span class="line"><span class="comment">// puts(&quot;&quot;);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T4：第一类斯特林数-·-列"><a href="#T4：第一类斯特林数-·-列" class="headerlink" title="T4：第一类斯特林数 · 列"></a>T4：第一类斯特林数 · 列</h4><p><a href="https://www.luogu.com.cn/problem/P5409">题目传送门 Luogu</a></p><p>和 T2 差不多。</p><p>考虑只有一个集合的时候，就是：<br>$$<br>f(x)=\sum_{i=1}(i-1)!\dfrac{x^i}{i!}<br>$$<br>那么答案就是 $g(x) = f(x)^m$，最后答案乘上 $\dfrac{i!}{m!}$ 就可以了。</p><p>仍然注意第一项为 $0$，所以要先右移一位，做完后，再左移 $m$ 位。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    n ++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++ i) a[i] = <span class="built_in">qpow</span>(i + <span class="number">1</span>, Mod - <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">get_qpow</span>(a, b, n - <span class="number">1</span>, k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= k; -- i) b[i] = b[i - k];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++ i) b[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++ i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>, b[i] * infact[k] % Mod * fact[i] % Mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 多项式 </tag>
            
            <tag> 斯特林数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FFT 详解</title>
      <link href="/2021/12/11/FFT-%E8%AF%A6%E8%A7%A3/"/>
      <url>/2021/12/11/FFT-%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p><strong>前方高能！</strong></p><span id="more"></span><h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h2><p>本节是数学之中算非常难的模板题了。</p><p>注意，如果有没学过的知识点，请记住结论即可，不必深挖使自己绕晕。</p><h2 id="1-解决问题"><a href="#1-解决问题" class="headerlink" title="1. 解决问题"></a>1. 解决问题</h2><p>求两个高次多项式的乘积。</p><p>设 $A(x)$ 多项式为 $n$ 次，$B(x)$ 多项式为 $m$ 次（$n\geq m$）。</p><p>朴素复杂度为 $O(nm)$，该算法可以在 $O(n\log n)$ 的时间求出。</p><h2 id="2-主要方法"><a href="#2-主要方法" class="headerlink" title="2. 主要方法"></a>2. 主要方法</h2><h3 id="1）前置知识"><a href="#1）前置知识" class="headerlink" title="1）前置知识"></a>1）前置知识</h3><h4 id="A-点值表示"><a href="#A-点值表示" class="headerlink" title="A. 点值表示"></a>A. 点值表示</h4><p>任意一个 $n$ 次多项式都可以用任意 $n+1$ 个点来表示，其中 $n+1$ 个点都在函数上。</p><p>证明不难，就是 $n+1$ 个 $n+1$ 元一次方程有唯一解。</p><p>经过“范德蒙矩阵”的行列式推导，当且仅当 $x_i\not=x_j(i\not=j)$ 时原方程有唯一解。</p><h4 id="B-复数的基本运算"><a href="#B-复数的基本运算" class="headerlink" title="B. 复数的基本运算"></a>B. 复数的基本运算</h4><p>首先，令 $i=\sqrt{-1}$。</p><p>所以，所有的复数都可以表示为 $a+bi$。</p><p>复数的加法：$(a+bi)+(c+di)=(a+c) +(b+d)i$。</p><p>用向量的角度看，就是两个向量的合成。</p><p>复数的乘法：$(a+bi)\times(c+di)=(ac-bd)+(ad+bc)i$。</p><p>从向量的角度看，乘积的模就为原来的向量的模的乘积。</p><p>乘积的角度为 $\theta=\theta_1+\theta_2$。$\theta$ 为向量与 x 轴正半轴的夹角。</p><h4 id="C-复数域上的单位根"><a href="#C-复数域上的单位根" class="headerlink" title="C. 复数域上的单位根"></a>C. 复数域上的单位根</h4><p>画一个单位圆。</p><p>将该圆划分为 $n$ 份，取了 $k$ 份后，终边所表示的向量记为 $\omega_n^k$。</p><p>$n$ 次单位根为：$\omega_n^k(k\in [0,n-1])$。</p><p>它有几个性质：</p><ol><li>$\forall i\not=j,\omega_n^i \not=\omega_n^j$。</li><li>$\omega_n^k=\cos\dfrac{2k \pi}{n}+\sin\dfrac{2k\pi}{n}i$。</li><li>$\omega_n^0=\omega_n^n=1$。</li><li>$\omega_{2n}^{2k}=\omega_n^k$。</li><li>$\omega_n^{k+\frac{n}{2}}=-\omega_n^k$。</li></ol><p>同样，具有上述几个性质的点也是 $n$ 次单位根。</p><h3 id="2）核心：点值表示与系数表示的转换"><a href="#2）核心：点值表示与系数表示的转换" class="headerlink" title="2）核心：点值表示与系数表示的转换"></a>2）核心：点值表示与系数表示的转换</h3><p>在 FFT 中，我们一共取 $n+m+1$ 个点。</p><p>怎样求出 $C(x)$ 的表达式？</p><p>我们设定 $n+m+1$ 个点，然后求出每一个点的函数值，就求出了点值表示。</p><p>怎样转换为系数表示呢？</p><p>首先，我们考虑取哪些点。</p><p>对于 $A(x)$ 来说，我们取 $\omega_n^k (k\in[0,n-1])$ $n$ 个横坐标。</p><p>我们还是首先考虑怎样从系数表示转换为点值表示。</p><p>然后，我们按次数分类，分为奇数次和偶数次。</p><p>$A(x)=a_0+a_1x+a_2x^2+…+a_{n-1}x^{n-1}$。</p><p>假设 $n$ 为偶数。</p><p>$A_1(x)=a_0+a_2x+a_4x^2+…+a_{n-2}x^{\frac{n}{2}-1}$。</p><p>$A_2(x)=a_1+a_3x+a_5x^2+…+a_{n-1}x^{\frac{n}{2}-1}$。</p><p>所以，我们惊喜地发现：$A(x)=A_1( x^2)+xA_2(x^2)$！</p><p>然后我们将 $\omega_n^k$ 代入，得到：</p><p>如果 $k\in[0,\dfrac{n}{2}-1]$，原式可以写成：<br>$$<br>A(\omega_n^k)=A_1(\omega_n^{2k})+\omega_n^kA_2(\omega_n^{2k})=A_1(\omega_{\frac{n}{2}}^k)+\omega_n^kA_2(\omega_{\frac{n}{2}}^k)<br>$$<br>如果 $k\in[\dfrac{n}{2},n-1]$，原式可以写成：<br>$$<br>A(\omega_n^k)=A_1(\omega_n^{2k})+\omega_n^kA_2(\omega_n^{2k})=A_1(\omega_n^{2k-n})-\omega_n^{k-\frac{n}{2}}A_2(\omega_n^{2k-n})<br>$$</p><p>这样，我们就可以在 $O(n\log n)$ 的时间内从系数表示转换到点值表示。</p><p>下面，我们进行逆变化：从点值表示转换到系数表示。</p><p>假设最终的答案为 $A(x)=c_0+c_1x+…+ c_{n-1}x^{n-1}$。</p><p><strong>结论：</strong><br>$$<br>c_k=\dfrac{\sum_{i=0}^{n-1}y_i(\omega_n^{-k})^i}{n}<br>$$<br>其中，$y_i$ 表示最终得到的纵坐标。</p><p>首先，我们假设该结论成立。</p><p>再定义 $B(x)=y_0+y_1x+y_2x^2+…+y_{n-1}x^ {n-1}$。</p><p>不难发现 $n\cdot c_i=B(\omega_n^{-i})$。</p><p>所以，我们相当于把 $B$ 从系数表示法转换为点值表示法，就在做一次前面的即可。</p><p>可以发现（？），有一个负号不影响答案。</p><p>好，下面我们来证明该结论。</p><p><strong>证明：（从结论反推）</strong><br>$$<br>\begin{aligned}<br>&amp; \sum_{i=0}^{n-1}y_i(\omega_{n} ^ {-k})^i\\<br>= &amp; \sum_{i=0}^{n-1}(\sum_{j = 0}^{n-1} c_j(\omega_{n}^{i}) ^ j)(\omega_{n} ^ {-k}) ^ i\\<br>= &amp; \sum_{i=0}^{n-1}\sum_{j = 0}^{n - 1}c_j (\omega_{n}^{i}) ^ j(\omega_{n} ^ {-k}) ^ i\\<br>= &amp; \sum_{i=0}^{n - 1}\sum_{j = 0}^{n - 1} c_j (\omega_{n}^{j-k}) ^ i\\<br>= &amp; \sum_{j=0}^{n - 1} c_j(\sum_{i = 0}^{n - 1} (\omega_{n}^{j - k}) ^ i)<br>\end{aligned}<br>$$</p><p>在最里面的括号 $(\omega_{n}^{j-k})^i$，$j,k$ 都是常量，$i$ 是变量，所以我们可以再构造 $D(x)=\sum_{i = 0}^{n-1}x^i$，原式就可以化成：<br>$$<br>=\sum_{j=0}^{n-1}c_j*D(\omega_{n}^{j-k})<br>$$<br>接着，我们讨论 $D(\omega_{n}^{x})$ 的取值：</p><p>$x\not=0$：，首先，$D(\omega_{n}^{x})= \omega_{n}^{0}+\omega_{n}^{x}+ \omega_{n}^{2x}+…+\omega_{n} ^{(n-1)x}$。</p><p>其次，$\omega_{n}^{x}D( \omega_{n}^{x})=\omega_{n}^{x}+ \omega_{n}^{2x}+…+\omega_{n} ^{(n-1)x}+(\omega_{n}^{nx}=\omega_{n}^0)$。</p><p>发现，这两项相等。</p><p>于是，$(\omega_{n}^{x}-1)D(\omega_{n}^{x})=0$，又 $x\not=0$，所以 $\omega_{n}^{x}\not=1$，于是 $D(\omega_{n}^{x})=0$。</p><p>$x=0$：$D(\omega_{n}^{x})=D(1)=n$。</p><p>所以，当 $j\not=k$ 时，原式为 $0$。</p><p>带入原式，便可以得到：<br>$$<br>=nc_k<br>$$<br><strong>证毕。</strong></p><p>在实践中，递归的常数较大，我们使用迭代。</p><p>首先，我们预处理长度为 $1$ 的 $n$ 个点。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 多项式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOIp2021 游记</title>
      <link href="/2021/11/20/NOIp2021-%E6%B8%B8%E8%AE%B0/"/>
      <url>/2021/11/20/NOIp2021-%E6%B8%B8%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>可还行吧。</p><span id="more"></span><p>以考试当天（2021-11-20）为 Day 0。</p><h2 id="Day"><a href="#Day" class="headerlink" title="Day -?"></a>Day -?</h2><p>记录两次机房的对话。</p><hr><p>我：”又在卷网络流！怎么可能考得到嘛。“</p><p>机房大佬：”CSP-S 才考了，肯定是在考纲范围内啊。已经是废物了，还不快复习网络流。”</p><p>我（表示不信）：“怎么可能？才考了，怎么可能还考得到？”</p><hr><p>我：“模拟退火都要学！啥分都骗不到，估计和暴力差不多。”</p><p>机房大佬：“骗分的东西，还是要多学的。”</p><p>我：“骗分的东西，考试的时候又用不到，还学这么高深的算法。这么久都没考了，不可能考啊”。</p><hr><p>事实证明，还是不能随便押题啊。模拟退火就考到了……</p><p>考前和省外的联测，天天被吊打，怎么办啊……</p><p>已经停了 whk 专心搞竞赛了，但是感觉没有很大的提升，倒是身旁的大佬多了起来。不知道更卷的地方是什么样呢，反正已经比我强多了。</p><h2 id="Day-1"><a href="#Day-1" class="headerlink" title="Day -1"></a>Day -1</h2><p>本身根据机房习俗，应该是 <code>考前 generals 大赛</code>，但是由于之前机房发生过事故（具体什么就略去了），所以不敢参加。</p><p>倒是解决了一个遗留问题：（在 CSP-S 当天早上写的 Treap 60 pts 那个）在 NOIP 前一天解决了！简直是 rp ++！</p><p>又 A 了一个黑题（CF 的虚高黑题），考前心态还是挺不错的。</p><p>晚上同寝室的还比较照顾我，本身应该说话到 11:00 的，很早（10：30 之前）就都睡了。</p><p>我却翻来覆去，一直睡不着，不知道明天如果考挂了，自己的前途将会是如何。</p><p>但不管怎样，考试还是得来临，我迷迷糊糊之中还是睡着了。</p><h2 id="Day-0"><a href="#Day-0" class="headerlink" title="Day 0"></a>Day 0</h2><p>早上 8:00 到考场，发现已经挤满了人（本身考点人就不多，基本都在外面）。</p><p>赶忙进去，开了虚拟机，开始敲模板，感觉键盘比较拙劣，平均 3 个字符就有一个吃掉了，只要集中在 <code>s,j,(</code> 这些字符，很难打。<code>(</code> 最烦，我又开了 <code>-Wall</code> 的，很容易打掉括号。</p><p>几分钟码完了模板，开始呆坐。只能看到标题，也就只是复制了几遍模板，放在那里，命好名，啥也不能干了。</p><p>8:22 发了密码，赶忙翻到 T1，但是刚翻到老师就说不准动键盘，于是只能盯着 T1 看。但是旁边的人一直在动鼠标，老师也没有管（大草</p><p>8:30：正式开始！</p><p>看了遍题，没什么思路（其实是没认真看）。</p><p>感觉第一题是一个签到的题目，虽然是 $10^7$，埃式筛法是 $O(n\ln n)$，但是不是每一个数都要筛一遍，所以赶忙码了一个，测速只需要 0.3s，所以 20 min 就做完了签到题。</p><p>8:50 左右开第二题。第二题似乎是一个神仙 DP，可以顺序枚举每一个数被取的次数，主要是进位十分烦人。考虑可以用一个状态存下来向前的进位，发现最多只是 $n$ 的级别。</p><p>中间算错了几次复杂度，一直算的都是 $O(n^3m)$（因为状态个数就是 $O(n^3m)$），码了一半，发现还需要一个 $n$ 枚举每一个数枚举的次数，复杂度升到 $O(n^4m)$，计算器一算，$3\times10^8$，但一想到有很多状态不存在，直接跳过就好，所以不太关心。</p><p>写了 25min 左右，差不多 9:40，调还算顺利，调了一会就出来了，给的样例又不是大样例（觉得是大样例的站出来！），没感觉到什么就对了。</p><p>9:55 左右看第三题，感觉是一个神仙题，虽然是方差知道怎么求，$=nS2-S1^2$，但是啥性质都推不出来了。第四题题面又臭又长，但是又不得不看，有些搞心态。</p><p>又回来推第三题，想了半个小时才发现可以差分，就是邻项交换。似乎可以暴力枚举的，手写了一个暴力观察性质。</p><p>发现了应该单谷，但是想了几个贪心都是错的，不知道怎么回事。后来才发现贪心就是错的。</p><p>这时已经 11:30 了，只好放弃 T3，马上去写 T4，发现只有直行的可以维护每一行列的覆盖情况，发现可以倒序变成加点的形式。</p><p>但是似乎极其难写，只写了个暴力，30 min 写完跑路。</p><p>又倒过来看 T3，已经 12:10 了，感觉可以区间 DP 的样子，但是方差的公式实在用差分的形式太难变形了，只好放弃。</p><p>12:30 的时候，突然灵光一闪：我的贪心答案和正确答案差不了多少，可不可以通过随机交换的方式来得到更优解呢？</p><p>于是我想到了模拟退火（大草</p><p>从来没写过模拟退火，这次在 NOIP 考场上算是第一次写。</p><p>我看过书上的解释，但是当时没有给代码，心里还是没底的。</p><p>不过模拟退火还好写，10 min 就写完了。</p><p>不过死活过不了大样例，答案比最开始的贪心答案还大一倍（这里说一说我的神奇模拟退火（赛后知晓）：我中间有判断，如果 <code>time&gt;0.9</code> 就直接退出；但是我有没有全局变量来维护走过的最佳答案），不免极慌。</p><p>一阵魔改之后，过掉了样例 3，但样例 4 实在是过不了了，此时已经 12:55 了。</p><p>我不知道应该怎样改才是合适的，但是最后时分，我将多次退火改为了一次退火，精度调的极高：<code>for (double t = 1e9; t &gt; 1e-7; t *= 0.9999997)</code>，没时间测样例的，我赶忙将文件看了一下，没有多余输出，都有 <code>freopen</code>。</p><p>检查完后，看到 12:59:30 了，本身想测 T3 大样例的，也只好罢休了。</p><blockquote><p>考试结束，不允许再动键盘鼠标了，迅速离开。</p></blockquote><p>寂寞的走出考场，交流了一下，发现许多人没有写出 T2，但是都写出了 T3 的模拟退火。</p><p>哎，要是我学了模拟退火该多好啊！</p><p>但是，过去的已经过去了。</p><p>机房大佬说，模拟退火应该有 $40\sim56pts$，但是我的假的模拟退火，差不多有个 $16pts$ 差不多了。</p><p>仔细算了一下：$100+100+[0\sim 20]+[32\sim48]=[232\sim268]$ 的成绩了吧。</p><p>看到去年的一等奖线都是 100+ 不少，想到万一 T2 挂了肯定就上不了一等奖线了。</p><p>但是估计在全省大概就是 $rk25\sim40$ 吧，可能又是省队三倍线上不了了吧。</p><p>不管了，休息了两天，又要回归 whk 了。</p><h2 id="Day-1-1"><a href="#Day-1-1" class="headerlink" title="Day 1"></a>Day 1</h2><p>还没时间写，不过已经有时间看别人的博客了。</p><p>发现大家似乎都是 $200pts$ 左右吧，心态稳了一些。</p><p>代码发下来了，但是不敢在 Luogu 上测，就连 xtl 都不敢看。</p><p>又浑浑噩噩过了一天。</p><h2 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h2><p>还是看到了 xtl 的成绩，又到 Luogu 上测了一下。</p><p>发现 T2 挂了 $15 pts$，T4 由于多组询问全部都清空，直接导致只有 $24 pts$。</p><p>不过可喜可贺的是，我的模拟退火竟然写对了，再加上推出了差分单谷的性质，直接得到了 88 pts！</p><p>Luogu 评测：$100+85+88+24=297$，xtl $301$。据说可以进 $rk15$。</p><p>等 CCF 的成绩吧。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这次考试，主要是策略相对正确，但是有很多细节地方应该注意，比如神仙挂分：T2 现在都不知道怎么挂的（求助，14-16 全 WA），T4 全部清空导致时间复杂度卡满了，只有 $24 pts$。</p><p>其实可以 $100+100+88+44=332$ 的，似乎轻松进 $rk10$ 了。</p><p>过去的已经过去了，还是向下一站进发吧！</p><p>2022 联合省选加油！</p><p><strong>upd on 2021-11-29：</strong> CCF T3 送了我 96 pts，看到了一些希望。</p><p>实际分数：$100+85+96+24=305$。</p><p>（另外，看到了 T2 的错误了，我在判断条件的时候，判断本位的时候写错了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 游记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随机蓝题100道</title>
      <link href="/2021/11/12/%E9%9A%8F%E6%9C%BA%E8%93%9D%E9%A2%98100%E9%81%93/"/>
      <url>/2021/11/12/%E9%9A%8F%E6%9C%BA%E8%93%9D%E9%A2%98100%E9%81%93/</url>
      
        <content type="html"><![CDATA[<p>这个是我在 CSP-S 复习前进行刷题目，采用随机跳题 100 道的方法。</p><p><strong>争取在 NOIP 之前做完啊！！</strong></p><span id="more"></span><h2 id="1-正文"><a href="#1-正文" class="headerlink" title="1. 正文"></a>1. 正文</h2><h4 id="T1：P4147-玉蟾宫"><a href="#T1：P4147-玉蟾宫" class="headerlink" title="T1：P4147 玉蟾宫"></a>T1：<a href="https://www.luogu.com.cn/problem/P4147">P4147 玉蟾宫</a></h4><p>这个是一个单调栈（或者叫悬线法）的模板题。</p><p>求 01 矩阵中只包含 1 的矩阵的面积最大值。</p><h4 id="T2：P4854-MloVtry的咸鱼树"><a href="#T2：P4854-MloVtry的咸鱼树" class="headerlink" title="T2：P4854 MloVtry的咸鱼树"></a>T2：<a href="https://www.luogu.com.cn/problem/P4854">P4854 MloVtry的咸鱼树</a></h4><p>状态压缩 + 最短路。</p><p>不太难想，看到 $n\leq15$ 的时候应该就有思路了。</p><h4 id="T3：UVA10881-Piotr’s-Ants"><a href="#T3：UVA10881-Piotr’s-Ants" class="headerlink" title="T3：UVA10881 Piotr’s Ants"></a>T3：<a href="https://www.luogu.com.cn/problem/UVA10881">UVA10881 Piotr’s Ants</a></h4><p>接下来的两个题都是以前校内考试考过的题目的变式，大概思路是人的相对位置（即左右的排名）和所有人都绝对位置（即坐标）分离处理。两个题虽然有些不同，但是大体思路是向东的。</p><h4 id="T4：P5835-USACO19DEC-Meetings-S"><a href="#T4：P5835-USACO19DEC-Meetings-S" class="headerlink" title="T4：P5835 [USACO19DEC]Meetings S"></a>T4：<a href="https://www.luogu.com.cn/problem/P5835">P5835 [USACO19DEC]Meetings S</a></h4><h4 id="T5：P5022-NOIP2018-提高组-旅行"><a href="#T5：P5022-NOIP2018-提高组-旅行" class="headerlink" title="T5：P5022 [NOIP2018 提高组] 旅行"></a>T5：<a href="https://www.luogu.com.cn/problem/P5022">P5022 [NOIP2018 提高组] 旅行</a></h4><p>CSP-S 前做的题目，主要是看一看以前的题目。</p><p>也归入了 CSP-S 的随机蓝题了 qwq。</p><h4 id="T6：P1127-词链"><a href="#T6：P1127-词链" class="headerlink" title="T6：P1127 词链"></a>T6：<a href="https://www.luogu.com.cn/problem/P1127">P1127 词链</a></h4><p>一个欧拉回路的好题。</p><h4 id="T7：P1961-最轻的天平"><a href="#T7：P1961-最轻的天平" class="headerlink" title="T7：P1961 最轻的天平"></a>T7：<a href="https://www.luogu.com.cn/problem/P1961">P1961 最轻的天平</a></h4><p>没有任何所谓的算法（最多一个 gcd），就是思想可鉴。</p><h4 id="T8：P5087-数学"><a href="#T8：P5087-数学" class="headerlink" title="T8：P5087 数学"></a>T8：<a href="https://www.luogu.com.cn/problem/P5087">P5087 数学</a></h4><p>没想到是 DP，看来看出 DP 还是有一定难度的。</p><p>主要是没有想到重复元素怎么搞。</p><h4 id="T9：P5994-PA2014-Kuglarz"><a href="#T9：P5994-PA2014-Kuglarz" class="headerlink" title="T9：P5994 [PA2014]Kuglarz"></a>T9：<a href="https://www.luogu.com.cn/problem/P5994">P5994 [PA2014]Kuglarz</a></h4><p>一个 Prim 的好题。</p><h4 id="T10：P6859-蝴蝶与花"><a href="#T10：P6859-蝴蝶与花" class="headerlink" title="T10：P6859 蝴蝶与花"></a>T10：<a href="https://www.luogu.com.cn/problem/P6859">P6859 蝴蝶与花</a></h4><p>校内考到原题了！（在我做了这个题之后）</p><p>还是有些毒瘤（卡到了最优解），但是还好。</p><p>首先数据结构内二分查找 $pre_i=tot/pre_i=tot+1$ 的 $i$，然后找下一个 1 就可以了。</p><h4 id="T11：P6327-区间加区间sin和"><a href="#T11：P6327-区间加区间sin和" class="headerlink" title="T11：P6327 区间加区间sin和"></a>T11：<a href="https://www.luogu.com.cn/problem/P6327">P6327 区间加区间sin和</a></h4><p>线段树的板子。不说了。</p><p>（但是得复习 $sin(\alpha+\beta)=\sin\alpha\cos\beta+\cos\alpha\sin\beta $）</p><h4 id="T12：P1783-海滩防御"><a href="#T12：P1783-海滩防御" class="headerlink" title="T12：P1783 海滩防御"></a>T12：<a href="https://www.luogu.com.cn/problem/P1783">P1783 海滩防御</a></h4><p>一个简单的二分题目。</p><h4 id="T13：P7878-「SWTR-07」My-rating-is-1064（hard-version）"><a href="#T13：P7878-「SWTR-07」My-rating-is-1064（hard-version）" class="headerlink" title="T13：P7878 「SWTR-07」My rating is 1064（hard version）"></a>T13：<a href="https://www.luogu.com.cn/problem/P7878">P7878 「SWTR-07」My rating is 1064（hard version）</a></h4><p>考场上做出来的。不说了。</p><h4 id="T14：P5184-COCI-2009-PASIJANS"><a href="#T14：P5184-COCI-2009-PASIJANS" class="headerlink" title="T14：P5184 [COCI 2009] PASIJANS"></a>T14：<a href="https://www.luogu.com.cn/problem/P5184">P5184 [COCI 2009] PASIJANS</a></h4><p>看似很简单，但是要处理前面相同的栈的处理。</p><h4 id="T15：P3917-异或序列"><a href="#T15：P3917-异或序列" class="headerlink" title="T15：P3917 异或序列"></a>T15：<a href="https://www.luogu.com.cn/problem/P3917">P3917 异或序列</a></h4><p>校内考过<br>$$<br>\sum_{i=1}^n\sum_{j=i}^n(a_i\ xor …xor\ a_j)^2<br>$$<br>所以就比较简单了。</p><h4 id="T16：P2512-HAOI2008-糖果传递"><a href="#T16：P2512-HAOI2008-糖果传递" class="headerlink" title="T16：P2512 [HAOI2008]糖果传递"></a>T16：<a href="https://www.luogu.com.cn/problem/P2512">P2512 [HAOI2008]糖果传递</a></h4><p>简单的贪心。</p><h4 id="T17：P1846-游戏"><a href="#T17：P1846-游戏" class="headerlink" title="T17：P1846 游戏"></a>T17：<a href="https://www.luogu.com.cn/problem/P1846">P1846 游戏</a></h4><p>很有意思，很难想到会用 DP。</p><h4 id="T18：P2148-SDOI2009-E-amp-D"><a href="#T18：P2148-SDOI2009-E-amp-D" class="headerlink" title="T18：P2148 [SDOI2009]E&amp;D"></a>T18：<a href="https://www.luogu.com.cn/problem/P2148">P2148 [SDOI2009]E&amp;D</a></h4><p>有结论。（自己翻题解吧 qwq</p><h4 id="T19：P4441-COCI2017-2018-3-Retro"><a href="#T19：P4441-COCI2017-2018-3-Retro" class="headerlink" title="T19：P4441 [COCI2017-2018#3] Retro"></a>T19：<a href="https://www.luogu.com.cn/problem/P4441">P4441 [COCI2017-2018#3] Retro</a></h4><h4 id="T20：P5689-CSP-S2019-江西-多叉堆"><a href="#T20：P5689-CSP-S2019-江西-多叉堆" class="headerlink" title="T20：P5689 [CSP-S2019 江西] 多叉堆"></a>T20：<a href="https://www.luogu.com.cn/problem/P5689">P5689 [CSP-S2019 江西] 多叉堆</a></h4><h4 id="T21：P5771-JSOI2016-反质数序列"><a href="#T21：P5771-JSOI2016-反质数序列" class="headerlink" title="T21：P5771 [JSOI2016]反质数序列"></a>T21：<a href="https://www.luogu.com.cn/problem/P5771">P5771 [JSOI2016]反质数序列</a></h4><h4 id="T22：P3946-ことりのおやつ（小鸟的点心）"><a href="#T22：P3946-ことりのおやつ（小鸟的点心）" class="headerlink" title="T22：P3946 ことりのおやつ（小鸟的点心）"></a>T22：<a href="https://www.luogu.com.cn/problem/P3946">P3946 ことりのおやつ（小鸟的点心）</a></h4><h4 id="T23：P6216-回文匹配"><a href="#T23：P6216-回文匹配" class="headerlink" title="T23：P6216 回文匹配"></a>T23：<a href="https://www.luogu.com.cn/problem/P6216">P6216 回文匹配</a></h4><h4 id="T24：P3743-kotori的设备"><a href="#T24：P3743-kotori的设备" class="headerlink" title="T24：P3743 kotori的设备"></a>T24：<a href="https://www.luogu.com.cn/problem/P3743">P3743 kotori的设备</a></h4><h4 id="T25：P3572-POI2014-PTA-Little-Bird"><a href="#T25：P3572-POI2014-PTA-Little-Bird" class="headerlink" title="T25：P3572 [POI2014]PTA-Little Bird"></a>T25：<a href="https://www.luogu.com.cn/problem/P3572">P3572 [POI2014]PTA-Little Bird</a></h4><h4 id="T26：P3601-签到题"><a href="#T26：P3601-签到题" class="headerlink" title="T26：P3601 签到题"></a>T26：<a href="https://www.luogu.com.cn/problem/P3601">P3601 签到题</a></h4><h4 id="T27：P2627-USACO11OPEN-Mowing-the-Lawn-G"><a href="#T27：P2627-USACO11OPEN-Mowing-the-Lawn-G" class="headerlink" title="T27：P2627 [USACO11OPEN]Mowing the Lawn G"></a>T27：<a href="https://www.luogu.com.cn/problem/P2627">P2627 [USACO11OPEN]Mowing the Lawn G</a></h4><h4 id="T28：P4503-CTSC2014-企鹅QQ"><a href="#T28：P4503-CTSC2014-企鹅QQ" class="headerlink" title="T28：P4503 [CTSC2014]企鹅QQ"></a>T28：<a href="https://www.luogu.com.cn/problem/P4503">P4503 [CTSC2014]企鹅QQ</a></h4><h4 id="T29：P1602-Sramoc问题"><a href="#T29：P1602-Sramoc问题" class="headerlink" title="T29：P1602 Sramoc问题"></a>T29：<a href="https://www.luogu.com.cn/problem/P1602">P1602 Sramoc问题</a></h4><h4 id="T30：P2267-琪琪的项链"><a href="#T30：P2267-琪琪的项链" class="headerlink" title="T30：P2267 琪琪的项链"></a>T30：<a href="https://www.luogu.com.cn/problem/P2267">P2267 琪琪的项链</a></h4><h4 id="T31：CF1082B-Vova-and-Trophies"><a href="#T31：CF1082B-Vova-and-Trophies" class="headerlink" title="T31：CF1082B Vova and Trophies"></a>T31：<a href="https://www.luogu.com.cn/problem/CF1082B">CF1082B Vova and Trophies</a></h4><h4 id="T32：P3029-USACO11NOV-Cow-Lineup-S"><a href="#T32：P3029-USACO11NOV-Cow-Lineup-S" class="headerlink" title="T32：P3029 [USACO11NOV]Cow Lineup S"></a>T32：<a href="https://www.luogu.com.cn/problem/P3029">P3029 [USACO11NOV]Cow Lineup S</a></h4><h4 id="T33：P2622-关灯问题II"><a href="#T33：P2622-关灯问题II" class="headerlink" title="T33：P2622 关灯问题II"></a>T33：<a href="https://www.luogu.com.cn/problem/P2622">P2622 关灯问题II</a></h4><h4 id="T34：P4092-HEOI2016-TJOI2016-树"><a href="#T34：P4092-HEOI2016-TJOI2016-树" class="headerlink" title="T34：P4092 [HEOI2016/TJOI2016]树"></a>T34：<a href="https://www.luogu.com.cn/problem/P4092">P4092 [HEOI2016/TJOI2016]树</a></h4><h4 id="T35：P4826-USACO15FEB-Superbull-S"><a href="#T35：P4826-USACO15FEB-Superbull-S" class="headerlink" title="T35：P4826 [USACO15FEB]Superbull S"></a>T35：<a href="https://www.luogu.com.cn/problem/P4826">P4826 [USACO15FEB]Superbull S</a></h4><h4 id="T36：P6218-USACO06NOV-Round-Numbers-S"><a href="#T36：P6218-USACO06NOV-Round-Numbers-S" class="headerlink" title="T36：P6218 [USACO06NOV] Round Numbers S"></a>T36：<a href="https://www.luogu.com.cn/problem/P6218">P6218 [USACO06NOV] Round Numbers S</a></h4><h4 id="T37：P3469-POI2008-BLO-Blockade"><a href="#T37：P3469-POI2008-BLO-Blockade" class="headerlink" title="T37：P3469 [POI2008]BLO-Blockade"></a>T37：<a href="https://www.luogu.com.cn/problem/P3469">P3469 [POI2008]BLO-Blockade</a></h4><h4 id="T38：P6016-CSGRound3-出游"><a href="#T38：P6016-CSGRound3-出游" class="headerlink" title="T38：P6016 [CSGRound3]出游"></a>T38：<a href="https://www.luogu.com.cn/problem/P6016">P6016 [CSGRound3]出游</a></h4><h4 id="T39：P2129-L国的战斗续之多路出击"><a href="#T39：P2129-L国的战斗续之多路出击" class="headerlink" title="T39：P2129 L国的战斗续之多路出击"></a>T39：<a href="https://www.luogu.com.cn/problem/P2129">P2129 L国的战斗续之多路出击</a></h4><h4 id="T40：P2915-USACO08NOV-Mixed-Up-Cows-G"><a href="#T40：P2915-USACO08NOV-Mixed-Up-Cows-G" class="headerlink" title="T40：P2915 [USACO08NOV]Mixed Up Cows G"></a>T40：<a href="https://www.luogu.com.cn/problem/P2915">P2915 [USACO08NOV]Mixed Up Cows G</a></h4><h4 id="T41：P2174-小Z的神奇数列"><a href="#T41：P2174-小Z的神奇数列" class="headerlink" title="T41：P2174 小Z的神奇数列"></a>T41：<a href="https://www.luogu.com.cn/problem/P2174">P2174 小Z的神奇数列</a></h4><h4 id="T42：P1262-间谍网络"><a href="#T42：P1262-间谍网络" class="headerlink" title="T42：P1262 间谍网络"></a>T42：<a href="https://www.luogu.com.cn/problem/P1262">P1262 间谍网络</a></h4><h4 id="T43：P1245-电话号码"><a href="#T43：P1245-电话号码" class="headerlink" title="T43：P1245 电话号码"></a>T43：<a href="https://www.luogu.com.cn/problem/P1245">P1245 电话号码</a></h4><h4 id="T44：P4231-三步必杀"><a href="#T44：P4231-三步必杀" class="headerlink" title="T44：P4231 三步必杀"></a>T44：<a href="https://www.luogu.com.cn/problem/P4231">P4231 三步必杀</a></h4><h4 id="T45：P2585-ZJOI2006-三色二叉树"><a href="#T45：P2585-ZJOI2006-三色二叉树" class="headerlink" title="T45：P2585 [ZJOI2006]三色二叉树"></a>T45：<a href="https://www.luogu.com.cn/problem/P2585">P2585 [ZJOI2006]三色二叉树</a></h4><h4 id="T46：P2700-逐个击破"><a href="#T46：P2700-逐个击破" class="headerlink" title="T46：P2700 逐个击破"></a>T46：<a href="https://www.luogu.com.cn/problem/P2700">P2700 逐个击破</a></h4><h4 id="T47：P6688-可重集"><a href="#T47：P6688-可重集" class="headerlink" title="T47：P6688 可重集"></a>T47：<a href="https://www.luogu.com.cn/problem/P6688">P6688 可重集</a></h4><h4 id="T48：P3177-HAOI2015-树上染色"><a href="#T48：P3177-HAOI2015-树上染色" class="headerlink" title="T48：P3177 [HAOI2015]树上染色"></a>T48：<a href="https://www.luogu.com.cn/problem/P3177">P3177 [HAOI2015]树上染色</a></h4><h4 id="T49：P2602-ZJOI2010-数字计数"><a href="#T49：P2602-ZJOI2010-数字计数" class="headerlink" title="T49：P2602 [ZJOI2010]数字计数"></a>T49：<a href="https://www.luogu.com.cn/problem/P2602">P2602 [ZJOI2010]数字计数</a></h4><h4 id="T50：P1836-数页码"><a href="#T50：P1836-数页码" class="headerlink" title="T50：P1836 数页码"></a>T50：<a href="https://www.luogu.com.cn/problem/P1836">P1836 数页码</a></h4><h4 id="T51：SP3928-MDIGITS-Counting-Digits"><a href="#T51：SP3928-MDIGITS-Counting-Digits" class="headerlink" title="T51：SP3928 MDIGITS - Counting Digits"></a>T51：<a href="https://www.luogu.com.cn/problem/SP3928">SP3928 MDIGITS - Counting Digits</a></h4><h4 id="T52：UVA1640-统计问题-The-Counting-Problem"><a href="#T52：UVA1640-统计问题-The-Counting-Problem" class="headerlink" title="T52：UVA1640 统计问题 The Counting Problem"></a>T52：<a href="https://www.luogu.com.cn/problem/UVA1640">UVA1640 统计问题 The Counting Problem</a></h4><h4 id="T53：P7244-章节划分"><a href="#T53：P7244-章节划分" class="headerlink" title="T53：P7244 章节划分"></a>T53：<a href="https://www.luogu.com.cn/problem/P7244">P7244 章节划分</a></h4><h4 id="T54：P5424-USACO19OPEN-Snakes-G"><a href="#T54：P5424-USACO19OPEN-Snakes-G" class="headerlink" title="T54：P5424 [USACO19OPEN]Snakes G"></a>T54：<a href="https://www.luogu.com.cn/problem/P5424">P5424 [USACO19OPEN]Snakes G</a></h4><h4 id="T55：P6026-餐馆"><a href="#T55：P6026-餐馆" class="headerlink" title="T55：P6026 餐馆"></a>T55：<a href="https://www.luogu.com.cn/problem/P6026">P6026 餐馆</a></h4><h4 id="T56：P2363-马农"><a href="#T56：P2363-马农" class="headerlink" title="T56：P2363 马农"></a>T56：<a href="https://www.luogu.com.cn/problem/P2363">P2363 马农</a></h4><h4 id="T57：P4539-SCOI2006-zh-tree"><a href="#T57：P4539-SCOI2006-zh-tree" class="headerlink" title="T57：P4539 [SCOI2006]zh_tree"></a>T57：<a href="https://www.luogu.com.cn/problem/P4539">P4539 [SCOI2006]zh_tree</a></h4><h4 id="T58：P1709-USACO5-5-隐藏口令Hidden-Password"><a href="#T58：P1709-USACO5-5-隐藏口令Hidden-Password" class="headerlink" title="T58：P1709 [USACO5.5]隐藏口令Hidden Password"></a>T58：<a href="https://www.luogu.com.cn/problem/P1709">P1709 [USACO5.5]隐藏口令Hidden Password</a></h4><h4 id="T59：P5088-矩形"><a href="#T59：P5088-矩形" class="headerlink" title="T59：P5088 矩形"></a>T59：<a href="https://www.luogu.com.cn/problem/P5088">P5088 矩形</a></h4><h4 id="T60：P2303-SDOI2012-Longge-的问题"><a href="#T60：P2303-SDOI2012-Longge-的问题" class="headerlink" title="T60：P2303 [SDOI2012] Longge 的问题"></a>T60：<a href="https://www.luogu.com.cn/problem/P2303">P2303 [SDOI2012] Longge 的问题</a></h4><h4 id="T61：P5557-旅行"><a href="#T61：P5557-旅行" class="headerlink" title="T61：P5557 旅行"></a>T61：<a href="https://www.luogu.com.cn/problem/P5557">P5557 旅行</a></h4><h4 id="T62：CF337C-Quiz"><a href="#T62：CF337C-Quiz" class="headerlink" title="T62：CF337C Quiz"></a>T62：<a href="https://www.luogu.com.cn/problem/CF337C">CF337C Quiz</a></h4><h4 id="T63：P2051-AHOI2009-中国象棋"><a href="#T63：P2051-AHOI2009-中国象棋" class="headerlink" title="T63：P2051 [AHOI2009]中国象棋"></a>T63：<a href="https://www.luogu.com.cn/problem/P2051">P2051 [AHOI2009]中国象棋</a></h4><h4 id="T64：P4918-信仰收集"><a href="#T64：P4918-信仰收集" class="headerlink" title="T64：P4918 信仰收集"></a>T64：<a href="https://www.luogu.com.cn/problem/P4918">P4918 信仰收集</a></h4><h4 id="T65：CF1394B-Boboniu-Walks-on-Graph"><a href="#T65：CF1394B-Boboniu-Walks-on-Graph" class="headerlink" title="T65：CF1394B Boboniu Walks on Graph"></a>T65：<a href="https://www.luogu.com.cn/problem/CF1394B">CF1394B Boboniu Walks on Graph</a></h4><h4 id="T66：CF1175B-Catch-Overflow"><a href="#T66：CF1175B-Catch-Overflow" class="headerlink" title="T66：CF1175B Catch Overflow!"></a>T66：<a href="https://www.luogu.com.cn/problem/CF1175B">CF1175B Catch Overflow!</a></h4><h4 id="T67：CF1526E-Oolimry-and-Suffix-Array"><a href="#T67：CF1526E-Oolimry-and-Suffix-Array" class="headerlink" title="T67：CF1526E Oolimry and Suffix Array"></a>T67：<a href="https://www.luogu.com.cn/problem/CF1526E">CF1526E Oolimry and Suffix Array</a></h4><h4 id="T68：CF1335F-Robots-on-a-Grid"><a href="#T68：CF1335F-Robots-on-a-Grid" class="headerlink" title="T68：CF1335F Robots on a Grid"></a>T68：<a href="https://www.luogu.com.cn/problem/CF1335F">CF1335F Robots on a Grid</a></h4><h4 id="T69：CF1228E-Another-Filling-the-Grid"><a href="#T69：CF1228E-Another-Filling-the-Grid" class="headerlink" title="T69：CF1228E Another Filling the Grid"></a>T69：<a href="https://www.luogu.com.cn/problem/CF1228E">CF1228E Another Filling the Grid</a></h4><h4 id="T70：CF884D-Boxes-And-Balls"><a href="#T70：CF884D-Boxes-And-Balls" class="headerlink" title="T70：CF884D Boxes And Balls"></a>T70：<a href="https://www.luogu.com.cn/problem/CF884D">CF884D Boxes And Balls</a></h4><h4 id="T71：P1654-OSU"><a href="#T71：P1654-OSU" class="headerlink" title="T71：P1654 OSU!"></a>T71：<a href="https://www.luogu.com.cn/problem/P1654">P1654 OSU!</a></h4><h4 id="T72：P1365-WJMZBMR打osu-Easy"><a href="#T72：P1365-WJMZBMR打osu-Easy" class="headerlink" title="T72：P1365 WJMZBMR打osu! / Easy"></a>T72：<a href="https://www.luogu.com.cn/problem/P1365">P1365 WJMZBMR打osu! / Easy</a></h4><h4 id="T73：CF235B-Let’s-Play-Osu"><a href="#T73：CF235B-Let’s-Play-Osu" class="headerlink" title="T73：CF235B Let’s Play Osu!"></a>T73：<a href="https://www.luogu.com.cn/problem/CF235B">CF235B Let’s Play Osu!</a></h4><h4 id="T74：P1659-国家集训队-拉拉队排练"><a href="#T74：P1659-国家集训队-拉拉队排练" class="headerlink" title="T74：P1659 [国家集训队]拉拉队排练"></a>T74：<a href="https://www.luogu.com.cn/problem/P1659">P1659 [国家集训队]拉拉队排练</a></h4><h4 id="T75：P2654-原核生物培养"><a href="#T75：P2654-原核生物培养" class="headerlink" title="T75：P2654 原核生物培养"></a>T75：<a href="https://www.luogu.com.cn/problem/P2654">P2654 原核生物培养</a></h4><h4 id="T76：P4881-hby与tkw的基情"><a href="#T76：P4881-hby与tkw的基情" class="headerlink" title="T76：P4881 hby与tkw的基情"></a>T76：<a href="https://www.luogu.com.cn/problem/P4881">P4881 hby与tkw的基情</a></h4><h4 id="T77：CF1131C-Birthday"><a href="#T77：CF1131C-Birthday" class="headerlink" title="T77：CF1131C Birthday"></a>T77：<a href="https://www.luogu.com.cn/problem/CF1131C">CF1131C Birthday</a></h4><h4 id="T78：CF1416B-Make-Them-Equal"><a href="#T78：CF1416B-Make-Them-Equal" class="headerlink" title="T78：CF1416B Make Them Equal"></a>T78：<a href="https://www.luogu.com.cn/problem/CF1416B">CF1416B Make Them Equal</a></h4><h4 id="T79：P1850-NOIP2016-提高组-换教室"><a href="#T79：P1850-NOIP2016-提高组-换教室" class="headerlink" title="T79：P1850 [NOIP2016 提高组] 换教室"></a>T79：<a href="https://www.luogu.com.cn/problem/P1850">P1850 [NOIP2016 提高组] 换教室</a></h4><h4 id="T80：P3802-小魔女帕琪"><a href="#T80：P3802-小魔女帕琪" class="headerlink" title="T80：P3802 小魔女帕琪"></a>T80：<a href="https://www.luogu.com.cn/problem/P3802">P3802 小魔女帕琪</a></h4><h4 id="T81：P3114-USACO15JAN-Stampede-S"><a href="#T81：P3114-USACO15JAN-Stampede-S" class="headerlink" title="T81：P3114 [USACO15JAN]Stampede S"></a>T81：<a href="https://www.luogu.com.cn/problem/P3114">P3114 [USACO15JAN]Stampede S</a></h4><h4 id="T82：P5160-WD与循环"><a href="#T82：P5160-WD与循环" class="headerlink" title="T82：P5160 WD与循环"></a>T82：<a href="https://www.luogu.com.cn/problem/P5160">P5160 WD与循环</a></h4><h4 id="T83：P5124-USACO18DEC-Teamwork-G"><a href="#T83：P5124-USACO18DEC-Teamwork-G" class="headerlink" title="T83：P5124 [USACO18DEC]Teamwork G"></a>T83：<a href="https://www.luogu.com.cn/problem/P5124">P5124 [USACO18DEC]Teamwork G</a></h4><h4 id="T84：P4753-River-Jumping"><a href="#T84：P4753-River-Jumping" class="headerlink" title="T84：P4753 River Jumping"></a>T84：<a href="https://www.luogu.com.cn/problem/P4753">P4753 River Jumping</a></h4><h4 id="T85：CF77B-Falling-Anvils"><a href="#T85：CF77B-Falling-Anvils" class="headerlink" title="T85：CF77B Falling Anvils"></a>T85：<a href="https://www.luogu.com.cn/problem/CF77B">CF77B Falling Anvils</a></h4><h4 id="T86：P1645-序列"><a href="#T86：P1645-序列" class="headerlink" title="T86：P1645 序列"></a>T86：<a href="https://www.luogu.com.cn/problem/P1645">P1645 序列</a></h4><h4 id="T87：P3868-TJOI2009-猜数字"><a href="#T87：P3868-TJOI2009-猜数字" class="headerlink" title="T87：P3868 [TJOI2009] 猜数字"></a>T87：<a href="https://www.luogu.com.cn/problem/P3868">P3868 [TJOI2009] 猜数字</a></h4><h4 id="T88：P5144-蜈蚣"><a href="#T88：P5144-蜈蚣" class="headerlink" title="T88：P5144 蜈蚣"></a>T88：<a href="https://www.luogu.com.cn/problem/P5144">P5144 蜈蚣</a></h4><h4 id="T89：CF306C-White-Black-and-White-Again"><a href="#T89：CF306C-White-Black-and-White-Again" class="headerlink" title="T89：CF306C White, Black and White Again"></a>T89：<a href="https://www.luogu.com.cn/problem/CF306C">CF306C White, Black and White Again</a></h4><h4 id="T90：CF919E-Congruence-Equation"><a href="#T90：CF919E-Congruence-Equation" class="headerlink" title="T90：CF919E Congruence Equation"></a>T90：<a href="https://www.luogu.com.cn/problem/CF919E">CF919E Congruence Equation</a></h4><h4 id="T91：CF598E-Chocolate-Bar"><a href="#T91：CF598E-Chocolate-Bar" class="headerlink" title="T91：CF598E Chocolate Bar"></a>T91：<a href="https://www.luogu.com.cn/problem/CF598E">CF598E Chocolate Bar</a></h4><h4 id="T92：P3932-浮游大陆的68号岛"><a href="#T92：P3932-浮游大陆的68号岛" class="headerlink" title="T92：P3932 浮游大陆的68号岛"></a>T92：<a href="https://www.luogu.com.cn/problem/P3932">P3932 浮游大陆的68号岛</a></h4><h4 id="T93：P6655-YsOI2020-制高"><a href="#T93：P6655-YsOI2020-制高" class="headerlink" title="T93：P6655 [YsOI2020]制高"></a>T93：<a href="https://www.luogu.com.cn/problem/P6655">P6655 [YsOI2020]制高</a></h4><h4 id="T94：CF822D-My-pretty-girl-Noora"><a href="#T94：CF822D-My-pretty-girl-Noora" class="headerlink" title="T94：CF822D My pretty girl Noora"></a>T94：<a href="https://www.luogu.com.cn/problem/CF822D">CF822D My pretty girl Noora</a></h4><h4 id="T95：CF1143B-Nirvana"><a href="#T95：CF1143B-Nirvana" class="headerlink" title="T95：CF1143B Nirvana"></a>T95：<a href="https://www.luogu.com.cn/problem/CF1143B">CF1143B Nirvana</a></h4><p>题目概述先鸽着 qwq</p>]]></content>
      
      
      
        <tags>
            
            <tag> 做题记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSP-S2021 爆炸记</title>
      <link href="/2021/10/23/CSP-S2021-%E7%88%86%E7%82%B8%E8%AE%B0/"/>
      <url>/2021/10/23/CSP-S2021-%E7%88%86%E7%82%B8%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>被大家吊起来锤。</p><span id="more"></span><h2 id="考前"><a href="#考前" class="headerlink" title="考前"></a>考前</h2><p><del>据老师说状态不错</del>，看了一下 CSP-S 2020 的题目，发现前面两个都是水（du）题（liu），还满不在意的。</p><p>但是一考试就显露原型了，都是只有 100 出头，被机房的 dalao 给吊打了，不过有次碰到了原题，倒是挺高兴的，也就那一次考得好罢了<del>（要是 CSP-S 考到原题就好了</del></p><p>成绩一直有些起伏，不过看到省选是看 NOIp 的成绩，心态要稳一些。</p><p>本校作为考点，还有许多特别强的学校学生要来，既有些高兴，又有些紧张。</p><p>一直以为考前的训练都是难到爆炸，肯定 CSP-S 要简单的多吧。</p><p>考前早上使劲复习模板，结果调了半早上的 Treap 还没调出来，感觉太菜了……</p><h2 id="考中"><a href="#考中" class="headerlink" title="考中"></a>考中</h2><p>本校考试，很早就来到了考场，本身还要开虚拟机的也忘记了，本身想要写个快读，结果被老师说不允许动键盘，也就罢休了。</p><p>2：20 密码下来，一看：<code>airport</code> 就是一个水题吧，<code>bracket</code> 感觉就是一个区间 DP，还没想。第三题似乎就是构造，因为 $\sum n\leq 5\times10^5$，似乎就是一个 $O(n)$，不能再多了。<code>traffic</code> 一看就是一个 Dinic，但一看，<del>我去，</del>$n,m\leq500$，怎么跑得出来？</p><p>感觉时间十分充足，慢慢悠悠地写了一个快读，在开始写第一题。</p><p>一看，是一个三分，感觉一个栈，但是似乎没法 $O(n)$ 求可以停栈桥的飞机。过了半个小时发现可以提前预处理，但是没想到可以线段树优化选择最小的，直接一个暴力 $O(n^2)$ 求后面最小的，（但是许多优化，手造随机数据在 <code>0.3s</code> 左右）</p><p>打完快 3：30 了，赶紧开第二题。按照它给的规则使劲码，结果 3:50 打完的时候，死活过不了第二个样例。经过了一个余小时的手调数据（已经不想写发生了什么了 qwq），终于发现了 <code>ASB</code> 的情况会重复，然后改了出来，$O(n^4)$ 的算法，65 pts 应该没问题了，但 $n=500$ 要刚好 <code>5s</code>，但希望数据水一点吧。</p><p>开第三题，已经 5:30 了。本身有点慌，但是想了几分钟就看出正解：一个简单的构造，将 <code>R</code> 的翻转过来，相当于是两个数列合并为一个回文数列，可以线性。考场上极慌，写到 6:10 分，还是没过大样例。监考老师使劲催：</p><blockquote><p>离考试结束还有 30 分钟。…离考试结束还有 20 分钟，同学们检查一下自己的头文件有没有写齐，有没有保存在 E:\CSP\ 目录下，Dev 会预加载头文件……</p></blockquote><p>虽然确实是善意的提醒，但我当时实在是有些烦躁，虽然坚持到了最后，但 6:27 时仍然败北，只好放弃。估计不超过 5 pts，还不如写暴力呢。</p><blockquote><p>考试结束了，同学们立即站立，不允许再动键盘，否则按违规处理。安静出场。</p></blockquote><p>唉！看着我同考室的同学，又想起 Dinic 连 60 pts 都没有拿到，叹了一口气，走出考场，似乎连饭都不想吃了。</p><h2 id="考后"><a href="#考后" class="headerlink" title="考后"></a>考后</h2><p>走出考场，发现大家都是一片哀嚎（至少我们学校是），心中稍微平衡了一点（话说我这是什么心态啊），仔细算了一下分，应该是 $(40\sim100)+(65\sim80)+(0\sim5)+0=105\sim185$，准确估分应该为 $140\sim160$ 之间。</p><p>和一个 dalao 交流了一下，猛地发现三分可能回锅掉！想起书上的一句话：</p><blockquote><p>特别需要注意的是，三分法并不能由于非严格单峰的函数（即有平台）。</p></blockquote><p>发现就连暴力枚举国内栈桥的个数，也不会增加复杂度。唉，实在是太菜了……</p><p>又讨论了第四题，同机房的竟说 Dinic 可以水过，Linux 加 O2 指令居然只需要 <code>2.7s</code>，实在是令我震惊。但是我也确实没有想好 Dinic 的建图方式，所以只好挂掉了。</p><p>赛后一直盯着 Luogu，看着 pj T4 才绿，感觉 tg 实在是太卷了。</p><p>第二天（还是第三天）发下来代码，跑了一下，发现第一题确实锅掉了，Luogu 只有 60pts，第三题也确实一分没有，总分 125 pts，大概全省 rk 80 的样子。</p><p>唉！不想再多说了。NOIP 加油！</p><p><strong>Update on 2021-11-01：</strong> 昨天（亦或是前天）知道公布了成绩，过去瞅了一眼，最后得到：$85+65+16+0=166$，竟然高出了预计。</p><p>可能是因为 <code>airport</code> 水了不少分吧……</p><p>同机房的 <code>dalao</code> 竟然 T4 Dinic 只有 60pts，叹息了一会，也就似乎什么都没有发生了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的来说，这次考试还是策略没有调整好，因为计算了一下时间，如果我先开 T3，已经早有 200 pts+ 了。还有原因是代码水平不够，导致即使想出来了，也打不完或打不来。</p><p>按部就班吧，向 NOIP 进发！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 游记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
